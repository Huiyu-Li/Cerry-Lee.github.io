<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Coding for Love</title>
      <link href="/2020/07/10/MyResearch/2020-7-10-Coding%20For%20Love/"/>
      <url>/2020/07/10/MyResearch/2020-7-10-Coding%20For%20Love/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MyResearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inception</title>
      <link href="/2020/06/17/Diary/2020-6-17-Inception/"/>
      <url>/2020/06/17/Diary/2020-6-17-Inception/</url>
      
        <content type="html"><![CDATA[<p>To broaden myself, contemplate, </p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
            <tag> Fiction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给24岁的自己</title>
      <link href="/2020/04/27/Diary/2020-4-27-%E5%86%99%E7%BB%9924%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
      <url>/2020/04/27/Diary/2020-4-27-%E5%86%99%E7%BB%9924%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<p>再过一个多月，我就要24岁了，或者已经25了。如果我能活到50岁，刚好一半，可如果我能活到100岁呢，才1/4那么长。<br>显然，现在已经不是第一次看懂言情剧的年代了，那时候的我才11岁，刘品言17岁，整个世界里的大人们都很大，而我也很渴望长大，希望自己不用走太久，就能见到25岁的自己。那时候的我以为，25岁的自己会像山东青年杂志的封底女郎一样潇洒，或许只是一个自由撰稿人，但起码经济独立哦，我可以去买好多书，或者去海边吹吹风，看一看书本里的世界。<br>可是我真的要25喽，开始有些害怕，因为我还是很喜欢追剧，只不过当年陪我长大的威廉们，都已经退出荧屏了，取而代之的，是比我还小的他们。93还好，96也凑合，97，98就太可怕了。突然感觉数字真的好刺眼，19，20已经成了我无法企及的字眼。<br>但是，我还是很会安慰自己。</p><blockquote><p>不要害怕对数字敏感，你才24岁，每个10年以后的你都会艳羡这样的今天：原来10年前的我是如此年轻。每个今天都是10年以后的昨天，所以你一直都很年轻。</p></blockquote><blockquote><p>当你看了一部好电影，读了一本好书，遇见了一个好人，不要因为太美好而害怕失去之后的伤感，勇敢去寻找下一次遇见。</p></blockquote><blockquote><p>你会慢慢懂得，世间无所谓永恒，没有哪一次陪伴长达终生，你要勇敢说再见，也要学会说你好。生命本没有意义，所有未来充满未知和期待，白纸上的意义依靠你去装点。万事别苛求完美，完美的背后是死亡。</p></blockquote><blockquote><p>欣赏一部新电影，打开一本新书，认识一位陌生人，每一次新的遇见，都需要用时间去培养感情，你的付出，决定了一段感情的深浅。</p></blockquote><blockquote><p>生命很短，如果可以遇见照亮心灵的萤火，就不要宁静地守候漆黑的夏夜。当然，你也要学着去做这样的萤火，点亮别人的夏夜。</p></blockquote><blockquote><p>永远不要把成功定义为人生的奋斗目标，你要去做自己最喜欢做的事。那些我们所追捧的成功人士，只是做了自己想做的事的事，仅此而已。</p></blockquote><blockquote><p>如果你有梦想，用心去呵护她。哪怕她与现世格格不入，没关系，她有你就足够。</p></blockquote><blockquote><p>以后的路还很长，你会经历很多，有温暖和阳光，也难免接受伤害，甚至跌落黑暗。世事的变迁在悄无声息地改变着每一个人，但我还是希望你能保护好自己。<br>要知道，你所看见的伤害，不是教你如何去刺杀别人，而是让你懂的，受伤的感觉很痛，你要学会体谅别人，照顾弱小。<br>很多时候，点亮一个灰色的世界，让所有充满意义，只需要一个暖心的细节，比如一句恰如其分对的鼓励，或者自己告诉自己：我相信你。<br>给自己多一点耐心，予未来多一点期待。</p></blockquote><blockquote><p>永远不要轻易否定别人的梦想，你没有这个权利，梦碎之后是扎心的黑暗；也绝不允许别人轻易打碎你的未来。每一条路认真走下去，结果都不会太差。</p></blockquote><blockquote><p>用心去理解这个世界，如果你还在依靠头衔，地位，金钱来定位一个人，那只能说明你对自己的判断力毫无自信，或者你根本没有属于自己的判断力。</p></blockquote><blockquote><p>我知道你是一个赌徒，可以允许自己失败一万次，也不想放弃哪怕万分之一的希望。所以，勇敢去赌，开启赌局是你的问题，即使输了又不代表失败，万一又赢了了呢，岂不是皆大欢喜。</p></blockquote><blockquote><p>物依稀为贵，亘古不变的真理。当大家都去保研，直博，转博的时候，考博的人就是很帅。当大家都去经历爱情的时候，为了自己的相信，永不将就的人就是很温暖。当大家都略施粉黛的时候，不会化妆的素颜反而是难得的风景线。</p></blockquote><blockquote><p>去经历，去追寻，去接受所有改变和未知，直到云卷云舒，淡定自如。<br>愿你的努力配得上你的执着，经得起时间的封藏，静心期待生命的惊喜。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heartbeats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用正确的方式打开生命</title>
      <link href="/2020/04/03/Diary/2020-4-3-%E7%94%A8%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E7%94%9F%E5%91%BD/"/>
      <url>/2020/04/03/Diary/2020-4-3-%E7%94%A8%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E7%94%9F%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Start-Over"><a href="#Start-Over" class="headerlink" title="Start Over"></a>Start Over</h1><p>《遇见王沥川》教会我很多事，16年7月31日上映的好剧，我一定听过这个名字，当时却没有机会，没有心情，没有时间去停留，去品味。今年是2020年，浅唱被拒绝，被忽略的痛苦，面对未来毫无定数的恐惧，一个人躲在被窝里的孤单，把所有没有借口付诸行动的泪水都交付给了《遇见王沥川》。<br>沥川的善良，温暖，体贴；认真，低调，谦和，大概已成为当今时代的稀缺。<br>很多时候，对自己多一点耐心，对未来多一点期待，已经成了我做不到的奢求。<br>如今停下手头的工作，静下心来装点博客，已是不可多得的享受。<br>更不用说，半夜里把32开的笔记本裁开，粘成88个琴键的长度；水粉刷描上黑键；徒手折出无线谱；画好所有的唱名和音高。冲动是魔鬼，也是不惧疲惫的热情，不是吗？<br>为何不勇敢一点，在红尘客梦的高墙外，留一点空白，送自己一份自由自在。<br><img src="/medias/pic_md/Diary/StartOver.png" alt="StartOver"></p><h1 id="当幸福来敲门"><a href="#当幸福来敲门" class="headerlink" title="当幸福来敲门"></a>当幸福来敲门</h1><p>哪怕经历一万次失败，也不要放弃万分之一的希望。（2020年3月4日晚，我流着眼泪，看着镜子中的自己，奢求有人告诉我，我是对的）<br>永远不要打碎别人的梦，否定别人的未来，世界上没有哪一条路是完全行不通的，修改别人的梦想是残忍的。</p><p><img src="/medias/pic_md/Diary/Happyness.jpg" alt="Happyness"></p><h1 id="一生有你：小王子"><a href="#一生有你：小王子" class="headerlink" title="一生有你：小王子"></a>一生有你：小王子</h1><p>我很幸福，因为我的心里一直都有一个小王子。<br>我爱过许多人，也爱过很多事，有些已经消逝，有些依然握在手里，但它们在我心里都有属于自己的位置。<br>我经历过许多幸福，也品尝过些许苦楚，有些已经忘记，有些依然留在心底。那些永远住进脑海里的片段，不是因为他们有多重要，不能忘记。而是因为它们曾经带给我别样的体验，让我舍不得忘记。<br>不要总是用实用主义去揣摩整个世界，很多东西，曾经以为重要的，却经不起时间的洗礼；有些事情，曾经以为无足轻重的，却承载了最真挚的回忆。</p><p><img src="/medias/pic_md/Diary/TheLittlePrince.png" alt="TheLittlePrince"></p><h1 id="小美人鱼"><a href="#小美人鱼" class="headerlink" title="小美人鱼"></a>小美人鱼</h1><p>我想告诉我未来的女儿，现在的自己，以及所有喜欢童话的小女生，如果你是小美人鱼，就不要把自己的鱼尾巴变成人类的双腿。</p><h1 id="一个陌生女人的来信"><a href="#一个陌生女人的来信" class="headerlink" title="一个陌生女人的来信"></a><a href="https://pan.baidu.com/s/1rrdsdH-fLYesG4cJ4bd35w" target="_blank" rel="noopener">一个陌生女人的来信</a></h1><p>我从未想过, 有人会和我一样, 做过同样的傻事, 单是某些只言片语, 就已经收走了我的灵魂.</p><blockquote><p>我的一生确实是从我认识你的那一天才开始的。</p><p>这个世界只因为和你有关才存在.</p></blockquote><blockquote><p>我把这一切都告诉你, 亲爱的, 把这一切琐碎的简直可笑的事情喋喋不休地说给听,为了让你明白,你从一开始就对我这个生性腼腆, 胆怯羞涩地女孩子具有这样巨大的力量. 你自己还没有进入我的生活, 你的身边就出现了一个光圈.</p><p>我的心始终为你而紧张, 为你而颤动; 可是你对此毫无感觉, 就行你口袋里装了怀表, 你对它地紧绷的发条没有感觉一样. 这根发条在暗中耐心地数着你的钟点, 计算着你的时间, 以它听不见的心跳陪着你东奔西走, 而你在那滴答不停地几百万秒当中, 只有一次向它匆匆瞥了一眼. </p></blockquote><blockquote><p>我没有想到, 我对你的心灵来说, 无论是相隔无数地山川峡谷, 还是说在你和我那抬头仰望地目光之间只相隔你窗户的一层玻璃, 其实都是同样的遥远.</p></blockquote><blockquote><p>我是有自尊心的, 我要你一辈子想到我的时候, 心里没有忧愁. 我宁可独自承担一切后果, 也不愿变成你的累赘. 我希望你想起我来, 总是怀着爱情, 怀着感激. 在这点上, 我愿意在你结交的所有女人当中, 成为独一无二的一个. 可是当然啰, 你从来也没有想过我, 你已经把我忘得一干二净.</p></blockquote><p>你唯一能给我的，唯一给过我的，唯一让我忘不掉的，是勇气。</p><p>让我如何否定你，否定自己做过的一切，否定独自规划好的未来。</p><h2 id="后记：此栏目的前世今生"><a href="#后记：此栏目的前世今生" class="headerlink" title="后记：此栏目的前世今生"></a>后记：此栏目的前世今生</h2><blockquote><p>2019-12-12， 累了，孤单了，受伤了，我们一起去读书吧，用别人的眼睛和自己的心灵触碰世界。</p></blockquote><p>我们都渴望被爱，但时常忘记体谅别人。愿你在失去中懂得珍惜，在受伤中学会保护自己。<br>每个人都是自私的，但在自私之外，最起码要有真正的尊重、理解和支持。<br>如果可以的话，用透明的心灵，去感受平凡眼睛看不到的远方。</p><blockquote><p>2019-11-30， 每当我想起你去做一件有意义的事，这是我做过的最浪漫的决定，也是对自己最大的宽慰。</p></blockquote><blockquote><p>2019/12/11，平凡的日子里，去做一件有意义的事，自己去遇见惊喜。</p></blockquote><p>今天将是我重生的日子。往昔，不留恋，不回头，不心动。<br>我送给自己一段没有期限的单身旅程，希望在这段独一无二的日子里，好好去爱自己，享受家人和朋友的关爱，用心珍惜拥有的一切。<br>希望你有足够的勇气和毅力，每一天都可以不遗余力，不要着急去问值不值得，用心去付出，时间会给你最好的回答。<br>我想告诉你，不论何时何地，不管是为一个人，为一件事，还是为一个梦想，只要你想<strong>奋不顾身</strong>，不需要任何理由，也没有必要瞻前顾后。<br>抄一首诗，弹一首曲子，看一本书，画一幅画，写一点小说，听一首歌，寻找一点新鲜的遇见。。。我希望此后做的每一件事，都能静心，用心，不再是自己的人生里匆忙的过客。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>果腹不只为充饥</title>
      <link href="/2020/04/01/Diary/2020-4-1-%E6%9E%9C%E8%85%B9%E4%B8%8D%E5%8F%AA%E4%B8%BA%E5%85%85%E9%A5%A5/"/>
      <url>/2020/04/01/Diary/2020-4-1-%E6%9E%9C%E8%85%B9%E4%B8%8D%E5%8F%AA%E4%B8%BA%E5%85%85%E9%A5%A5/</url>
      
        <content type="html"><![CDATA[<p>我喜欢健康的生活，几乎不喝饮料，从不乱吃零食，每天一定会做三件事：午休，吃水果，喝茶。<br>今天盘点一下一年四季适宜入口的水果吧，纵使塑料大棚一直都在，还是推荐大家多吃应季水果。</p><h1 id="春宵一刻值千金，花有清香月有阴"><a href="#春宵一刻值千金，花有清香月有阴" class="headerlink" title="春宵一刻值千金，花有清香月有阴"></a>春宵一刻值千金，花有清香月有阴</h1><ol><li>草莓当属春天的的特使: 改善便秘、保护视力、美容护肤</li><li>樱桃： 祛风除湿，通痹止痛 </li><li>桑葚：滋阴补血、补肝益肾、生津止渴、乌发明目 </li><li>菠萝：清热解暑、利尿消肿、减肥瘦身</li></ol><h1 id="绿树阴浓夏日长，楼台倒影入池塘。"><a href="#绿树阴浓夏日长，楼台倒影入池塘。" class="headerlink" title="绿树阴浓夏日长，楼台倒影入池塘。"></a>绿树阴浓夏日长，楼台倒影入池塘。</h1><h1 id="深秋帘幕千家雨，落日楼台一笛风。"><a href="#深秋帘幕千家雨，落日楼台一笛风。" class="headerlink" title="深秋帘幕千家雨，落日楼台一笛风。"></a>深秋帘幕千家雨，落日楼台一笛风。</h1><h1 id="晨起开门雪满山，雪晴云淡日光寒。"><a href="#晨起开门雪满山，雪晴云淡日光寒。" class="headerlink" title="晨起开门雪满山，雪晴云淡日光寒。"></a>晨起开门雪满山，雪晴云淡日光寒。</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Evaluation Criteria</title>
      <link href="/2020/02/10/Medical%20Image/2020-2-10-Evaluation-Criteria/"/>
      <url>/2020/02/10/Medical%20Image/2020-2-10-Evaluation-Criteria/</url>
      
        <content type="html"><![CDATA[<p>The set in yellow is Prediction, while the set in blue is Ground Truth.</p><p><img src="/medias/pic_md/MedicalImage/evaluationCriteria.png" alt="evaluationCriteria"></p>]]></content>
      
      
      <categories>
          
          <category> Medical Image </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Evaluation Criteria </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cascade Net的训练</title>
      <link href="/2020/01/04/MyResearch/2020-1-4-Cascade%20Net%E7%9A%84%E8%AE%AD%E7%BB%83/"/>
      <url>/2020/01/04/MyResearch/2020-1-4-Cascade%20Net%E7%9A%84%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>本文主要分析Cascade Net（级联网络）的训练情况。</p><h1 id="2个网络，2个loss，梯度如何回传？"><a href="#2个网络，2个loss，梯度如何回传？" class="headerlink" title="2个网络，2个loss，梯度如何回传？"></a>2个网络，2个loss，梯度如何回传？</h1><p><img src="/medias/pic_md/MyResearch/net1net2.png" alt></p><ol><li>loss1只会优化net1;</li><li>loss2优化net1和net2。</li><li>推荐使用1个优化器，优化一个loss(loss1+loss2), 方便简洁.</li></ol><p>公共代码部分：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Net1</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1<span class="token keyword">class</span> <span class="token class-name">Net2</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1loss1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>net1 <span class="token operator">=</span> Net1<span class="token punctuation">(</span><span class="token punctuation">)</span>net2 <span class="token operator">=</span> Net2<span class="token punctuation">(</span><span class="token punctuation">)</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2个优化器独立优化2个Net，两个loss独立回传"><a href="#2个优化器独立优化2个Net，两个loss独立回传" class="headerlink" title="2个优化器独立优化2个Net，两个loss独立回传"></a>2个优化器独立优化2个Net，两个loss独立回传</h3><pre class=" language-python"><code class="language-python">optimizer1<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output1<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer2<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.1047, -0.0668],<br>                    [ 0.1183,  0.0265]],<br>                    [[ 0.0277,  0.1389],<br>                    [-0.0696,  0.1308]]]]])<br>layer1.0.bias tensor([-4.6566e-09])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[ 0.1112, -0.0436],<br>                    [ 0.0883,  0.0262]],<br>                    [[ 0.0384,  0.1336],<br>                    [-0.1178,  0.1256]]]]])<br>layer1.0.bias tensor([-2.7940e-09])<br>layer2.0.weight tensor([[[[[ 0.0079,  0.0407],<br>                    [-0.0628,  0.0299]],<br>                    [[-0.0284, -0.0627],<br>                    [ 0.0145,  0.0101]]]]])<br>layer2.0.bias tensor([1.1642e-09])</p></blockquote><h3 id="1个优化器优化2个Net"><a href="#1个优化器优化2个Net" class="headerlink" title="1个优化器优化2个Net"></a>1个优化器优化2个Net</h3><pre class=" language-python"><code class="language-python">optimizer1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span></code></pre><h3 id="1个优化器优化2个Net，2个loss加和回传"><a href="#1个优化器优化2个Net，2个loss加和回传" class="headerlink" title="1个优化器优化2个Net，2个loss加和回传"></a>1个优化器优化2个Net，2个loss加和回传</h3><pre class=" language-python"><code class="language-python">optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span>net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span>net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>net1<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>net2<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>output1 <span class="token operator">=</span> net1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>output2 <span class="token operator">=</span> net2<span class="token punctuation">(</span>output1<span class="token punctuation">)</span>loss_output1 <span class="token operator">=</span> loss1<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> target1<span class="token punctuation">)</span>loss_output2 <span class="token operator">=</span> loss2<span class="token punctuation">(</span>output2<span class="token punctuation">,</span> target2<span class="token punctuation">)</span>loss_output <span class="token operator">=</span> loss_output1<span class="token operator">+</span>loss_output2optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output1<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.0281,  0.0501],<br>                    [-0.0897,  0.1292]],<br>                    [[ 0.1451,  0.0634],<br>                    [-0.0040,  0.0151]]]]])<br>layer1.0.bias tensor([9.9535e-09])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[ 0.0686,  0.0366],<br>                    [ 0.0078,  0.0646]],<br>                    [[ 0.0461,  0.0027],<br>                    [-0.0182, -0.0114]]]]])<br>layer1.0.bias tensor([-1.6298e-09])<br>layer2.0.weight tensor([[[[[0.3400, 0.2140],<br>                    [0.2509, 0.2214]],<br>                    [[0.3691, 0.2921],<br>                    [0.3126, 0.2221]]]]])<br>layer2.0.bias tensor([-6.5425e-08])</p><p>layer1.0.weight tensor([[[[[ 0.0966,  0.0867],<br>                    [-0.0819,  0.1939]],<br>                    [[ 0.1912,  0.0661],<br>                    [-0.0222,  0.0037]]]]])<br>layer1.0.bias tensor([-6.0536e-09])<br>layer2.0.weight tensor([[[[[0.3400, 0.2140],<br>                    [0.2509, 0.2214]],<br>                    [[0.3691, 0.2921],<br>                    [0.3126, 0.2221]]]]])<br>layer2.0.bias tensor([-6.5425e-08])</p></blockquote><h3 id="冻结net2的参数"><a href="#冻结net2的参数" class="headerlink" title="冻结net2的参数"></a>冻结net2的参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>optimizer1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">.</span>requires_grad<span class="token punctuation">,</span> net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1 = torch.optim.Adam(net1.parameters(), lr=0.001)# since no param of frozen net2 need to be optimized, so this one is equal to the above optimizer.</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.1854,  0.0710],<br>                    [-0.0503, -0.0730]],<br>                    [[ 0.0512,  0.0873],<br>                    [-0.1704,  0.0965]]]]])<br>layer1.0.bias tensor([-2.2352e-08])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[ 0.2990,  0.1330],<br>                    [-0.2335, -0.1387]],<br>                    [[-0.1399,  0.1262],<br>                    [-0.2014,  0.2233]]]]])<br>layer1.0.bias tensor([-6.7055e-08])<br>layer2.0.weight None<br>layer2.0.bias None</p></blockquote><h1 id="1个网络，2个loss，梯度如何回传？"><a href="#1个网络，2个loss，梯度如何回传？" class="headerlink" title="1个网络，2个loss，梯度如何回传？"></a>1个网络，2个loss，梯度如何回传？</h1><p><img src="/medias/pic_md/MyResearch/net.png" alt></p><ol><li>loss1只会优化net1;</li><li>loss2优化net1和net2。</li><li>loss1+loss2一起回传也遵循以上原则。</li></ol><p>公共代码部分：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        layer2 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>layer1<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1<span class="token punctuation">,</span>layer2loss1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>net <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span></code></pre><h3 id="2个loss单独回传"><a href="#2个loss单独回传" class="headerlink" title="2个loss单独回传"></a>2个loss单独回传</h3><pre class=" language-python"><code class="language-python">net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>output1<span class="token punctuation">,</span>output2 <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>loss_output1 <span class="token operator">=</span> loss1<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> target1<span class="token punctuation">)</span>loss_output2 <span class="token operator">=</span> loss2<span class="token punctuation">(</span>output2<span class="token punctuation">,</span> target2<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output1<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.1199,  0.1322],<br>                    [ 0.3313,  0.2889]],<br>                    [[-0.2830,  0.0982],<br>                    [ 0.2318,  0.4600]]]]])<br>layer1.0.bias tensor([-5.2154e-08])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[-0.1710,  0.0898],<br>                    [ 0.0150, -0.0648]],<br>                    [[ 0.0969,  0.2731],<br>                    [ 0.1348,  0.1892]]]]])<br>layer1.0.bias tensor([-5.4948e-08])<br>layer2.0.weight tensor([[[[[0.0403, 0.0771],<br>                    [0.2339, 0.4653]],<br>                    [[0.2246, 0.4523],<br>                    [0.1780, 0.3113]]]]])<br>layer2.0.bias tensor([-4.0978e-08])</p></blockquote><h3 id="2个loss加和一起回传"><a href="#2个loss加和一起回传" class="headerlink" title="2个loss加和一起回传"></a>2个loss加和一起回传</h3><pre class=" language-python"><code class="language-python">net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>output1<span class="token punctuation">,</span>output2 <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>loss_output1 <span class="token operator">=</span> loss1<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> target1<span class="token punctuation">)</span>loss_output2 <span class="token operator">=</span> loss2<span class="token punctuation">(</span>output2<span class="token punctuation">,</span> target2<span class="token punctuation">)</span>loss_output <span class="token operator">=</span> loss_output1<span class="token operator">+</span>loss_output2optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output1<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.0622,  0.1044],<br>                    [ 0.0046,  0.0056]],<br>                    [[ 0.0011, -0.1298],<br>                    [ 0.0423, -0.0172]]]]])<br>layer1.0.bias tensor([-1.8626e-09])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[ 0.0438,  0.0806],<br>                    [ 0.0495, -0.0116]],<br>                    [[ 0.0808, -0.0380],<br>                    [ 0.0780,  0.0077]]]]])<br>layer1.0.bias tensor([1.1176e-08])<br>layer2.0.weight tensor([[[[[ 0.2026,  0.1759],<br>                    [-0.0217,  0.1291]],<br>                    [[ 0.0584,  0.1224],<br>                    [ 0.0403,  0.1459]]]]])<br>layer2.0.bias tensor([3.2596e-09])</p><p>layer1.0.weight tensor([[[[[ 0.1061,  0.1850],<br>                    [ 0.0541, -0.0060]],<br>                    [[ 0.0819, -0.1678],<br>                    [ 0.1203, -0.0095]]]]])<br>layer1.0.bias tensor([3.7253e-09])<br>layer2.0.weight tensor([[[[[ 0.2026,  0.1759],<br>                    [-0.0217,  0.1291]],<br>                    [[ 0.0584,  0.1224],<br>                    [ 0.0403,  0.1459]]]]])<br>layer2.0.bias tensor([3.2596e-09])</p></blockquote><h1 id="综上所述："><a href="#综上所述：" class="headerlink" title="综上所述："></a>综上所述：</h1><p>使用cascade net+2个loss, 为了方便单独load已经训练好的模型或者冻结某个网络的参数，推荐使用2个单独的网络，1个优化器，2个loss加和一起回传。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Net1</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1<span class="token keyword">class</span> <span class="token class-name">Net2</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1loss1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>net1 <span class="token operator">=</span> Net1<span class="token punctuation">(</span><span class="token punctuation">)</span>net2 <span class="token operator">=</span> Net2<span class="token punctuation">(</span><span class="token punctuation">)</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># since no param of frozen net2 need to be optimized</span>net1<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>net2<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>output1 <span class="token operator">=</span> net1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>output2 <span class="token operator">=</span> net2<span class="token punctuation">(</span>output1<span class="token punctuation">)</span>loss_output1 <span class="token operator">=</span> loss1<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> target1<span class="token punctuation">)</span>loss_output2 <span class="token operator">=</span> loss2<span class="token punctuation">(</span>output2<span class="token punctuation">,</span> target2<span class="token punctuation">)</span>loss_output <span class="token operator">=</span> loss_output1<span class="token operator">+</span>loss_output2optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MyResearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>见不得光的生命</title>
      <link href="/2019/12/28/Diary/2019-12-28-%E8%A7%81%E4%B8%8D%E5%BE%97%E5%85%89%E7%9A%84%E7%94%9F%E5%91%BD/"/>
      <url>/2019/12/28/Diary/2019-12-28-%E8%A7%81%E4%B8%8D%E5%BE%97%E5%85%89%E7%9A%84%E7%94%9F%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<p>昨夜依旧失眠，想了许多不该想的事，流了许多莫须有的眼泪。</p><p>我们的相遇，该从那一天中午说起。小学，某个中午回家吃午饭的时候，看到屋后的邻居鬼鬼祟祟往麦垛里放了一个东西，我当然很好奇，于是邻居前脚刚走，我随后走过去一探究竟。</p><p>麦堆里，是哼哼唧唧不知所措的你，一只略掺杂色的小白狗。我就这样自然而然把你抱回家据为己有了，因为可爱的东西，大家都想拥有。</p><p>吃过午饭，我该上学了，姨说你是瘸子，怪不得没人要呢，顺带让我立马扔掉，我舍不得，故意推脱到我下午放学后再解决。</p><p>下午的第一堂课上，老师让我们列举一下见义勇为的事迹，我大言不惭地说：我捡了一只狗，然后抱回了家。我仍然记得老师那放光地双眼，毫无遮掩地写着：我想要这只狗。然后我话风一转：可惜它是个瘸子。老师地表情瞬间凝固了，开始了一个人的表演。</p><p>我整个下午大概都没好好上课，在同情你的无辜和无助，也在思考放学后的我该如何护你周全。</p><p>你的何去何从问题一直持续到晚饭结束，全家投票决定把你扔出去，当然除却我那黯然失色的一票。就这样，趁着夜黑风高，你回到了白天我抱走你的地方。</p><p>那一晚，我大概没有睡好，在想着如何安得两全法，护你周全不受伤。<br>第二天，我早早起了床，趁着没人注意我的时候，跑过去偷看了你一眼，你还在睡梦里。</p><p>然后，我飞快地蹦回物色好的地方，开始徒手挖坑，挖到容你有余的尺度，垫上草屑和坐垫，把你安顿进去，上面盖一块大石板，天知地知，你知我知。</p><p>从那之后的每一天里，照顾你，成了我每天最大的责任和幸福。我常常在吃饭的时候，抱着没吃完的饭就溜走了，溜到大门外的街角上，嚼碎了喂给你。</p><p>我不知道这样的偷偷摸摸会持续到某年某月，因为我从未预料，终点会突然出现。就在那一天清晨，我起床去看你，没有哼哼唧唧的撒娇，我掀开石板，而你是真的睡去了，倔强地离开了这个自私的世界，再也不愿意为自己的无辜受挫。</p><p>我很难过，装作若无其事的样子对妈妈说：它走了。还好没有哭出来。我知道你所有的家当被一张铁锨抄到了垃圾堆里，但我没有勇气去看。</p><p>从那以后，青石板下没了你的肉体，却永远住着你的灵魂，阳光刺眼的午后，我走过街角，会闻到你的气息，那是我偷牛奶喂你时，留下的味道。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>往事如风,留在心中</title>
      <link href="/2019/12/20/Diary/2019-12-20-%E5%BE%80%E4%BA%8B%E5%A6%82%E9%A3%8E/"/>
      <url>/2019/12/20/Diary/2019-12-20-%E5%BE%80%E4%BA%8B%E5%A6%82%E9%A3%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记忆里的酸枣仁</p></blockquote><p>中午休息时想起来的，想起了小时候的蹦蹦跳跳。小时候常跟着姨去田里，恍惚间已经好多年没有去过了，就连那些颇有创意的地名，也只能想起一个：鼻梁骨。</p><p>鼻梁骨的鼻梁上有一片野果灌木，我姨说那是“吃厘子”，以至于第一次在超市里看到“车厘子”的时候，我以为那是从荒野草丛里盗走的美味。</p><p>在我的记忆里，它算是荒野水果中的贵族，为了尝到第一颗熟透的红果，我足足等了好多年，直到那一片灌木日益茁壮，足以抚育丰满的硕果。</p><p>鼻梁骨的另一端，是惊悚的落崖，落崖上肆意地长满了各种奇珍异树，我种在花园里的红叶树，就是这个落崖上的土著。</p><p>因为鲜有人不顾性命去找落崖的麻烦，此处最壮硕的酸枣树，就生在落崖边上。中午和姨回家，瞅见了那颗挂满酸枣的酸枣王，姨停下脚步，拿起镰刀就拽走了大王的半个脑袋，我在一旁看的目瞪口呆。</p><p>当年的姨，还很年轻，会陪我把北山上的大石头拖着带回家，那真的是货真价实的红石头。姨父说，哥哥也有这样的癖好，把四处搜来的滑石用车载回家。而我呢，四处搜罗奇形怪状的风化石，让姨帮我拉回家。这样，姨家的磨盘下，就成了我的石头山。有两块石头，的确是绝精美的，去年过年的时候想找回来，可惜没寻到。</p><p>姨喜欢养花，家里全是花，“吃的买回来，吃完了就没了，花买回来还可以看呢“ 除了爱花的姨，谁也说不出这样的经典。</p><p>姨把我写过的墨迹视若珍宝，世间再也找不出第二个对我如此用心的人。哪怕是我丢弃的半张纸条，姨也会捡回来，和我确认好，生怕我弃用了不该丢的东西。而现在，自己在家里，已经塞进垃圾桶的东西从来没有心情去翻看第二遍，哪怕丢错了东西，也就认为遗失而已。</p><p>姨是一个自带浪漫的人，你能想到吗？周末的我时常赖床，叫醒我的，会是姨的清晨一吻。现在偶尔在家里赖个床，大多不会被人理会。只要屋外有人，我从来不会出去，但凡听不到其余的声响，出去呷一口桌上的饭菜，再回来继续躺着。</p><p>心灵手巧，除了姨，我再也想不出第二个更适合这个词的人，像刺绣这种精巧的东西，姨一看就会。姨会勾花，会绣花，会把剪纸塞满旧书。我脚下的某一双鞋垫，肯定出自姨的手笔，记得有一次回去，鞋子不合适，姨把自己刚做的鞋垫剪了一圈留给了我，这种毫无保留的给与和温暖，不是任何人都给得了的。</p><p>记忆里，最后一个不是一个人过得生日，肯定是在姨家过的，真的好巧，我的生日，竟然可以恰巧在姨家度过，香煎带鱼，羊肉汤。。。最大的幸福是没有孤单和虚伪，就那种自由自在，无拘无束的滋味，不是在自己家就可以轻易找到的。</p><p>每次去开一开那个近乎和我一样高的小白门，老妈说我还没有记忆的小时候，曾把手塞进了它的门缝里。</p><p>直到去年过年，从相聚到离开，不过短短的半天，那一天的我还买了零食，从小学一年级开始恋上的点心摊，竟然还在那里，只不过当年的叔叔阿姨已经有点白发苍苍。要离开时，姨站在最高的路口上送我回家，我坐在姨父的车上看见和我挥手的姨，在我的远去里变成了模糊的影子。我打那一刻，开始懂得用心画画的意义，开始懂得把生命融进画中，我想画那一副画，我想定格那一瞬间，我想让所以时光，都停留在昨天，所有我爱的人，都不会因为我的成长，而慢慢老去。</p><p>那一刻，我有多害怕离去。你能预料，哪一次离别不会成为永别？离开的是影子，关上的是门，你能料到，下一秒会发生什么？</p><p>回来的路上，哭够了眼泪，是我那一天干的事，后来妈妈上班的时候，从楼梯上看不见身影开始，我会迅速关上门，从餐厅、厨房的窗台上一直追到西面的杂物间。</p><blockquote><p>明天考研, 如果你曾做过研狗, 一路上的风景, 你懂得.<br>眼前的生活总是喜忧参半, 但消逝的过往总能充满美好。<br>想一想美好的过往, 怎舍得辜负半点当下; 往昔所有艰难都已过往, 未来又怎会无法逾越?</p></blockquote><p><img src="/medias/pic_md/Diary/RainyDay.jpg" alt="RainyDay"><br>那时的自己对自己还相当苛刻, 时常与自己过不去, 还不懂得, 宽以待己, 试着原谅自己.<br>自己经常’犯错’, 所以时常惩罚自己,<br>某一年的国庆, 早上刷了一眼建模获奖名单，没有我，意料之中，却还是略带后悔，心有不甘。<br>于是，此后的一天里，都在一发不可收拾的自责和自虐中度过，因为我没有完成既定的目标，犯了不该犯的错。<br>一个人坐在E楼404最后一排的角落里，200人的大教室里只有我一个人，确切地说，那一层，就只有我一个人。<br>窗外下着雨，没完没了地烘托着我心情，我就拍下了这张照片，希望自己永远记得这一天，记得失败之后的失落，尤其是开心到忘乎所以的时候，提醒自己尝一尝失败的滋味。<br>另一张照片是桌上的苹果，灿黄的金帅，连同桌上白色的桌布，都是我每天四处游走寻找自习室的标配。我在固定桌布的胶带上写下了这句话：沉下心来，珍惜身边的爱和温暖。<br>我懂得当时心内的滋味，被孤单沉默的味道，还有面对失败的彷徨。我唯一的对策就是沉下心来，重新面对未来。而“爱和温暖”，对我来说，从来都是稀缺的字眼，可遇而不可求的奢侈，得之我幸，失之我命。<br><img src="/medias/pic_md/Diary/Apple.jpg" alt></p><p><img src="/medias/pic_md/Diary/MyBed.jpg" alt="MyBed"><br>支教时的境况，挣扎，无奈，我行我素。<br>我不擅长处理人际关系，最致命的缺点在这段时光里崭露无遗。<br>我一个人待在一人的办公室里，度过下雪的周末，期待雪晴的日子永远不会到来。<br>为了一点委屈独自一人窝在被窝里落泪，都是在所难免的事情。<br>每天晨昏跑到屋后的篮球场上跑圈，是唯一放飞自我的时刻。<br>同一批的室友去炒大锅菜，我就端着一个小煮锅，自己给自己开小灶，那个时候的自己，就是这样的作风，受不了众口难调的麻烦，能自己解决的事情绝不会麻烦别人。<br>同住的舍友希望早休息，早于我的日常11点，直到有一天，毫无预兆地公然把我所在了门外，就有了我的地铺。<br>吃过晚饭把铺盖卷搬到实验室，学累了倒头就睡，第二天肯定是第一个醒来的人，铺盖卷就挂在晾绳上，毫无违和感。<br>第二批舍友喜欢夜生活，日常K歌秀舞晚于我的11点，我依旧住在机房里。<br>就这样，一共四个月，除了自己之外，没有人知晓谁会每天晒被褥，更不会猜到有人谁在机房里。可我就是这样，宁愿一个人孤独，也不想一起庸俗，四张小板凳就可以搭起地铺上的小蚊帐，我生来就擅长生活，可以享受锦绣华服，也不排斥布裙荆钗，没有什么是我不可面对的生活。</p><p><img src="/medias/pic_md/Diary/BaoMing.jpg" alt></p><p>考研报名的数字，那曾经是我遇见的，世界上最美丽的一串数字。</p><p>我也会永远记得，报名当天，在天桥上和妈妈吵了一架，然后把头发剪短到了极点，自己窝在宿舍里边哭边刷网页，浪费了大半天的时光，结果报名失败，晚上TT从图书馆回来，给我报的名。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><img src="/medias/pic_md/Diary/Jiudian.jpg" alt></td><td><img src="/medias/pic_md/Diary/NuanPing.jpg" alt></td><td><img src="/medias/pic_md/Diary/%E9%85%92%E5%BA%972.jpg" alt></td></tr></tbody></table><p>考研时住的宾馆，第一次住如此奢华的宾馆，第一次自己订宾馆，但仍然没有打破自己打车的特例。</p><p>和TT在一起的时候，出门考试也好，比赛也好，何时出发，怎么出发，住在哪里，从来都不用我操心，我真的是那个被朋友宠坏了的人，连下雨天，几乎不会打伞的自己，也从来不会带伞，但TT，永远会多带一把伞。</p><p>出乎意料地发现，住宾馆的那天，我竟然依旧带着标配的暖瓶，就像平时上自习一样，脚边总会放一把暖瓶，或蓝色，或粉色。</p><p>还记得第一晚，我们一起出门吃饺子，把附近的小店逛了一遍，搜罗了两天的粮草，然后回来躺在床上分享人生，遥想一起北漂的约定。</p><p>晚上的我照旧失眠，一直到凌晨一点，悄悄地出门打电话，妈妈秒接，大概是知道我逢考试必失眠地旧习，把电话放在了枕头边：“妈，我睡不着。”，我忘记了妈妈后来说了什么，但回来就睡着了，唯一后悔的是当时没有早一点打电话。</p><p>第二天回来，依旧是TT打车，到宿舍楼下，已是夜色弥漫，拖着行李箱上五楼，回到阔别了两个夜晚的宿舍，好似离开了整个世纪。打开灯才发现宿舍里空荡荡的没有一个人，打开行李箱，看到码齐的书本，刹那间泪如雨下。风里雨里，披星戴月的日子里，陪我走过四年的书本呀，突然发现有一天要和你说再见，你知道我有多留恋吗？</p><p>从那之后的三天里，没有睡过觉，和哥哥要了vip账号，看完了《漂洋过海来看你》，看完了《欢乐颂》。。。逮住了每一个可以落泪的剧情，好不吝啬地挥霍着廉价的眼泪。</p><p>三天之后下床，恍如另一个生命，开始新的生活，做的第一件事，是和大学里唯一一个暗恋过三年之久的人说了一句：我曾经爱过你。</p><p>而今，往事如梦，消逝风中，过去的不愿再提，记忆也懒得去拾起。唯一怀念的，是当时的潇洒和如今的不在乎，如此，过去的，就真的过去了。</p><h1 id="有你真好，让我所有的努力充满意义。"><a href="#有你真好，让我所有的努力充满意义。" class="headerlink" title="有你真好，让我所有的努力充满意义。"></a>有你真好，让我所有的努力充满意义。</h1><p><img src="/medias/pic_md/Diary/home.jpg" alt><br>图片是18年夏天在家拍的，母亲早上着急上班，让我把发酵好的面做成烙饼。我做了油饼和发面饼，一共8张，各有形状，我最喜欢的就是这张名副其实的手抓饼。<br>转眼间已经一年多没有回家了，偶尔也会想家，但忙起来就淡忘了。<br>我和母亲故事，足够写一本百页的小说，我们就是这样一对母女，经历着世间鲜有的生活，却依然可以幸福安逸。哪怕淡忘了跌跌撞撞的曾经，但骨子里的烙印仍然会提醒我，用心去生活，别对不起昨天的自己。<br>小时候是我坐在夕阳里数挂历，翘首期盼下一次团聚的时间，而现在，是目前不停地提醒我，别忘了买回家的火车票。从我7岁到如今的24岁，我们就像聚少离多的平行线，依靠电话和视频感受彼此的温度。<br>我知道母亲对我最大的期盼，就是一生快乐。可是我时常错解知足常乐的含义，总以为自己喜欢压力，迷恋步履匆忙的日子，习惯不轻易放过自己，也做过自己折磨自己的傻事。我会为了一个小小的比赛错过搬家，会为了几个没有做完的实验错过回家。</p><p>我今天才突然想到把所能想到的，关于母亲的一切都慢慢写下来，为了对抗遗忘，为了收藏温度，为了提醒自己懂得宠你的意义。</p><p>2020/2/11</p><p>醒来看到一条消息，好难过，突然意料到要面对我很排斥的现实。我还是老毛病，不管遇到什么，第一时间想到的是自己的过错，而不是别人的过分。</p><p>心不在焉地看着论文，正好母亲的视频弹了出来。我说我好难过。。。这一次，我才懂得，母亲的信条，就是对女儿好的都是对的，否则全是错的；我才突然预料到，偌大的世界里，也就这一个人，不分时间地点和缘由地宠着我，没有条件地信任着我。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界上懂我的你</title>
      <link href="/2019/12/18/Diary/2019-12-18-%E4%B8%96%E7%95%8C%E4%B8%8A%E6%87%82%E6%88%91%E7%9A%84%E4%BD%A0/"/>
      <url>/2019/12/18/Diary/2019-12-18-%E4%B8%96%E7%95%8C%E4%B8%8A%E6%87%82%E6%88%91%E7%9A%84%E4%BD%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我的世界流转变化<br>你却没时差<br>啦啦啦啦 我亲爱的你呀<br>我的心事纷乱复杂<br>你却能解码<br>啦啦啦啦 我亲爱的你呀</p></blockquote><p>我们的故事应该从何说起?</p><p>从见到你第一眼起, 我还在小学里, 而后相继转学, 彼此杳无音讯.</p><p>后来, 中学合校, 我竟会在一个班里看见你. 从那时起, 做过同桌, 一起愉快地度过平凡的周末, 一起做作业, 听海风吹打窗棂的奇妙.一起回归每一个新的周一, 睡在相邻的通铺上, 听你给我讲红楼梦, 讲漂亮朋友, 讲许多许多的睡前故事, 在你乐此不疲的声音里安然入睡. 我们 一起去过我阔别了十多年的老地方, 那是我一个人永远没有勇气和理由回去的地方, 我们看过珍珠鸡, 赏过小鸳鸯, 你送给了我唯一一根孔雀毛, 也是我此生第一次见到货真价实的孔雀毛;  调皮的我们还捡过河蚌, 那是我此生第一次, 也是迄今为止唯一一次尝过如此独特的美味. 我们偷偷爬过人家的杏花树, 在桃花林中寻找春天的味道. </p><p>后来, 我们在一个高中里, 一起开学, 一起去找新的班级和宿舍, 一起开始新的生活. 受了委屈的我, 还会跑到楼上, 和你哭大半个早上.  可你知道吗? 除你之外, 和我从初中到高中的同学, 还没有第二个人见过我的眼泪, 我爱哭, 但很少卸下铠甲真的哭出来.</p><p>后来, 我们一起上大学了, 分别去了不同的地方, 匆忙的四年里, 我别无选择, 若无其事地过着只有自己可以承受的生活, 我知道你的闪耀时刻, 你清楚我奋斗过的旅程, 比我自己更清楚自己, 直到你说我曾一天学习过14h, oh my god, 那是我吗?<br>幸运如我们, 经历了不同的雕琢, 我们有了近乎同样的色彩, 我崇拜那个满身灿烂的你, 那个四年里一直拿第一的你, 不管是成绩还是各种比赛.</p><p>后来, 我们怎么可以如此同步? 我们一起走过支教生活, 只不过我在山东,你在南疆; 我们一起进过辅导班, 你教语文, 我教化学;  但那个把各种offer拿到手软的你呀, 还能让我再仰望一些吗? 我在偷偷自恋, 此生怎可以如此幸运, 天上掉下个天才, 恰巧落到我身边.</p><p>你知道吗? 我从来不敢奢望的, 不敢奢望能有一个陪我走过大半生的你.<br>此生无数波折和转折, 来来回回没有固定的居所. 而我们, 却可以兜兜转转走到一起. 我该如何去感谢上苍的厚爱, 感谢会陪我走完余生的你.</p><p>我们从小学就在一起耶, 天下几人能有此番幸运?<br>而你知道我所有的经历, 无需回忆; 懂我每一个决定, 无需解释.</p><p>其实大学四年里, 我们几乎没有联系的对吗? 纵使经历了不同的风雨,  但我们从未有过时差.<br>回想这过去的半年里,<br>我在操场的屋顶上, 和你说我想要的未来; 在宿舍的走廊里, 和你说我暗恋的他, 满心欢喜听你说我的傻里傻气; 和你在中心花园里, 说我到底有多爱无情的他, 说我会在沉默里爱他直到十年以后. 和你在中教一层, 絮絮叨叨, 没完没了, 有说有笑, 消磨大半个晚上.<br>我们会想起旧时的同窗, 现在大都别番模样, 而我们却和当初一样.<br>我们会期许一个美好的未来, 隐居在荒山野林中, 一起开车出去兜风.<br>那个倔强而又优秀的你呀, 总能在自己的小圈子里做到最好, 就像水到渠成, 无需刻意, 毫不费力.</p><p>我喜欢灿若星辰的你, 带我一起优秀; 喜欢和你聊天时的自己, 轻松自在, 无所顾忌; 喜欢有你的我, 此生不会惧怕孤单, 回家不会百无聊赖, 你知道吗? 你会成为我回家的动力. 如果我妈看到我的偏心和执拗, 不知道会不会吃醋, 她养了20多年的女儿, 好似无牵无挂的过客. 如果我回家后还会一个人孤单, 还会一个人散步, 还会一个人把眼泪留给剧情, 总可以去找你, 看一看不一样的世界.</p><p>你一定知道我是写给你的, 歌词是你告诉我的, 我们刚刚通过电话.<br>我心疼和我一样倔强而又不服输的你, 知道你此刻仍然在寒夜里苦读, 所以我捧起书本, 去了自己该去的地方, 陪你一起感受奋斗的力量.<br>我等你, 等你来到我身边, 我会陪你走一走我疯跑过的操场, 指着9楼上的一扇窗告诉你, 看那个像城堡的地方, 我会每晚9点出现在那里, 一点一点靠近我的梦想, 拥抱我们想要的未来.</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读写pdf：茫茫辞海里，寻找我想要的你</title>
      <link href="/2019/12/09/Tools/Python%E8%AF%BB%E5%86%99pdf%EF%BC%9A%E8%8C%AB%E8%8C%AB%E8%BE%9E%E6%B5%B7%E9%87%8C%EF%BC%8C%E5%AF%BB%E6%89%BE%E6%88%91%E6%83%B3%E8%A6%81%E7%9A%84%E4%BD%A0/"/>
      <url>/2019/12/09/Tools/Python%E8%AF%BB%E5%86%99pdf%EF%BC%9A%E8%8C%AB%E8%8C%AB%E8%BE%9E%E6%B5%B7%E9%87%8C%EF%BC%8C%E5%AF%BB%E6%89%BE%E6%88%91%E6%83%B3%E8%A6%81%E7%9A%84%E4%BD%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>需要从某个顶会的pdf论文集中寻找和自己研究方向相关的论文，但是挨个pdf去ctrl+F太浪费生命了。我们尽量用最快捷的办法，解决低秩繁琐的事情，能让程序做的事情，拒绝暴力手工。<br>流程：按照关键词搜索并保存相关页面，这样，我可以顺便读一下摘要，筛选真正想读的论文。</p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>pdfminer3k读取pdf</p><pre class=" language-python"><code class="language-python">pip install pdfminer3k</code></pre><p>PyPDF2保存pdf</p><pre class=" language-python"><code class="language-python">pip install PyPDF2</code></pre><h2 id="走起我的小程序"><a href="#走起我的小程序" class="headerlink" title="走起我的小程序"></a>走起我的小程序</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfinterp <span class="token keyword">import</span> PDFResourceManager<span class="token punctuation">,</span> PDFPageInterpreter<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>converter <span class="token keyword">import</span> PDFPageAggregator<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>layout <span class="token keyword">import</span> LAParams<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfdevice <span class="token keyword">import</span> PDFDevice<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfparser <span class="token keyword">import</span> PDFParser<span class="token punctuation">,</span> PDFDocument<span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span> PdfFileWriter<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">PDFseeker</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span>savedName<span class="token punctuation">,</span>keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#解析目标关键词</span>    fp<span class="token operator">=</span>open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>    parser<span class="token operator">=</span>PDFParser<span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个与文档关联的解释器</span>    doc<span class="token operator">=</span>PDFDocument<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#PDf文档的对象</span>    resource<span class="token operator">=</span>PDFResourceManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建PDF资源管理器</span>    laparam<span class="token operator">=</span>LAParams<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#参数分析器</span>    device<span class="token operator">=</span>PDFPageAggregator<span class="token punctuation">(</span>resource<span class="token punctuation">,</span>laparams<span class="token operator">=</span>laparam<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个聚合器</span>    interpreter<span class="token operator">=</span>PDFPageInterpreter<span class="token punctuation">(</span>resource<span class="token punctuation">,</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建PDF页面解释器</span>    <span class="token comment" spellcheck="true">#链接解释器和文档对象</span>    parser<span class="token punctuation">.</span>set_document<span class="token punctuation">(</span>doc<span class="token punctuation">)</span>    doc<span class="token punctuation">.</span>set_parser<span class="token punctuation">(</span>parser<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#抓取目标页面</span>    pageindex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> doc<span class="token punctuation">.</span>get_pages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#处理每一页</span>        interpreter<span class="token punctuation">.</span>process_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用页面解释器来读取</span>        layout <span class="token operator">=</span> device<span class="token punctuation">.</span>get_result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用聚合器来获得内容</span>        <span class="token keyword">for</span> out <span class="token keyword">in</span> layout<span class="token punctuation">:</span>            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">'get_text'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#鉴于PDF既有text也有图片等等，为了确保不出错先判断对象是否具有 get_text()方法</span>                <span class="token keyword">if</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>out<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    pageindex<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#保存目标页面</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>pageindex<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        pdfWriter <span class="token operator">=</span> PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>        pdfReader <span class="token operator">=</span> PdfFileReader<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> pageindex<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#获取pdf共用多少页</span>            pdfWriter<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdfReader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将一个 PageObject 加入到 PdfFileWriter</span>        final_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>savedName<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>final_path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            pdfWriter<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>keyWord<span class="token punctuation">,</span><span class="token string">'is not found in'</span><span class="token punctuation">,</span>fileName<span class="token punctuation">)</span>    fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    fileName <span class="token operator">=</span> <span class="token string">"./Test.pdf"</span>      savedName <span class="token operator">=</span> <span class="token string">"./final.pdf"</span>     keyWord <span class="token operator">=</span> <span class="token string">"Huiyu Li"</span>     PDFseeker<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> savedName<span class="token punctuation">,</span> keyWord<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Time {:.3f} min'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y/%m/%d-%H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Conference and Journal of Medical Image</title>
      <link href="/2019/12/04/Medical%20Image/The%20Conference%20and%20Journal%20of%20Medical%20Image/"/>
      <url>/2019/12/04/Medical%20Image/The%20Conference%20and%20Journal%20of%20Medical%20Image/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="My short-term dream is ..." />    <label for="pass">My short-term dream is ...</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Medical Image </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conference and Journal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Past Life of Segmentation</title>
      <link href="/2019/12/01/MyResearch/The%20Past%20Life%20of%20Segmentation/"/>
      <url>/2019/12/01/MyResearch/The%20Past%20Life%20of%20Segmentation/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="My short-term goal is ..." />    <label for="pass">My short-term goal is ...</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> MyResearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Segmentation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的医学图像阅读器</title>
      <link href="/2019/12/01/Tools/2019-12-1-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2019/12/01/Tools/2019-12-1-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="RadiAnt"><a href="#RadiAnt" class="headerlink" title="RadiAnt"></a><a href="https://www.radiantviewer.com/en/" target="_blank" rel="noopener">RadiAnt</a></h1><p>中文主页：<a href="http://www.radiantviewer.com/zh/。" target="_blank" rel="noopener">http://www.radiantviewer.com/zh/。</a></p><p>专业的<strong>DICOM阅读器</strong>, 灵活、简单、快速, 读入CT图片后可以自动调节窗宽窗位.</p><h1 id="ITKsnap"><a href="#ITKsnap" class="headerlink" title="ITKsnap"></a><a href="http://www.itksnap.org/pmwiki/pmwiki.php" target="_blank" rel="noopener">ITKsnap</a></h1><p>相较于RadiAnt, ITKsnap可以识别多种类型的医学图像, 可以进行病灶的勾画和标注.</p><p>官网有详细的<a href="http://www.itksnap.org/pmwiki/pmwiki.php?n=Documentation.SNAP3" target="_blank" rel="noopener">配套教程</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Medical Image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Distance Transform</title>
      <link href="/2019/11/29/Knowledge/2019-11-29-Distance-Map/"/>
      <url>/2019/11/29/Knowledge/2019-11-29-Distance-Map/</url>
      
        <content type="html"><![CDATA[<p>写在前面：近几天研究处于卡壳状态，疯狂地Coding，无奈的失败。。。<br>感觉老师说得特别对。一项研究开始之前，要不断地思考，先明确它的物理意义，然后再去动手实现。而不是像我这样，不管三七二十一，先去实现，结果不好，废铜烂铁。<br>一场有深度，有价值的思考，可以给自己接下来的实验省去许多不必要的麻烦。一个新的想法，如果理论上说不通，基本上没什么存活的意义。遇事多问为什么？<br>我为什么要这这样做？<br>它的作用是什么？<br>它的物理意义是什么？</p><h1 id="Distance-Transform"><a href="#Distance-Transform" class="headerlink" title="Distance Transform"></a>Distance Transform</h1><p>先了解一下什么是Distance Transform？它的物理意是什么？<br><a href="https://blog.csdn.net/weixin_44058333/article/details/100186066" target="_blank" rel="noopener">Distance transform(距离变换)</a></p><h1 id="Matlab-计算Distance-Transform"><a href="#Matlab-计算Distance-Transform" class="headerlink" title="Matlab 计算Distance Transform"></a>Matlab 计算Distance Transform</h1><p>bwdist()会将前景置零，计算背景像素点的Distance Transform。</p><pre class=" language-malab"><code class="language-malab">input = [[0,1,1,1,1,0];         [0,1,1,1,1,0];         [0,0,0,1,1,0];         [0,0,0,1,1,0];         [0,0,0,1,1,0]];output = bwdist(input);disp(output);</code></pre><p>output：默认计算背景的Distance Transform</p><blockquote><p>1.0000         0         0         0         0    1.0000<br>1.0000         0         0         0         0    1.0000<br>1.4142    1.0000    1.0000         0         0    1.0000<br>2.2361    2.0000    1.0000         0         0    1.0000<br>3.0000    2.0000    1.0000         0         0    1.0000</p></blockquote><h1 id="Python-计算Distance-Transform"><a href="#Python-计算Distance-Transform" class="headerlink" title="Python 计算Distance Transform"></a>Python 计算Distance Transform</h1><p><a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.ndimage.morphology.distance_transform_edt.html" target="_blank" rel="noopener">distance_transform_edt</a>会将背景置零，计算前景的Distance Transform（和matlab的计算结果正好相反）。使用np.logical_not()可以得到前景的Distance Transform。</p><pre class=" language-pytho"><code class="language-pytho">from scipy.ndimage import distance_transform_edtimport numpy as npimport matplotlib.pyplot as pltinput = np.array([[0,1,1,1,1,0],                   [0,1,1,1,1,0],                   [0,0,0,1,1,0],                   [0,0,0,1,1,0],                   [0,0,0,1,1,0]])out0 = distance_transform_edt(np.logical_not(input))out1 = distance_transform_edt(input)print(out0)print(out1)</code></pre><p>out0:背景的Distance Transform</p><blockquote><p>[[1.         0.         0.         0.         0.         1.        ]<br>[1.         0.         0.         0.         0.         1.        ]<br>[1.41421356 1.         1.         0.         0.         1.        ]<br>[2.23606798 2.         1.         0.         0.         1.        ]<br>[3.         2.         1.         0.         0.         1.        ]]</p></blockquote><p>out1:默认计算前景的Distance Transform</p><blockquote><p>[[0.         1.         2.         2.         1.         0.        ]<br>[0.         1.         1.         1.41421356 1.         0.        ]<br>[0.         0.         0.         1.         1.         0.        ]<br>[0.         0.         0.         1.         1.         0.        ]<br>[0.         0.         0.         1.         1.         0.        ]]</p></blockquote><p>out0+out1</p><blockquote><p>[[1.         1.         2.         2.         1.         1.        ]<br>[1.         1.         1.         1.41421356 1.         1.        ]<br>[1.41421356 1.         1.         1.         1.         1.        ]<br>[2.23606798 2.         1.         1.         1.         1.        ]<br>[3.         2.         1.         1.         1.         1.        ]]</p></blockquote><table><thead><tr><th><img src="/medias/pic_md/Knowledge/DistanceMap2.png" alt="binaryMap"></th><th><img src="/medias/pic_md/Knowledge/DistanceMap3.png" alt="binaryMap"></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>综上，前景和背景的Distance Transform不可共存，到底选用哪一款，当然看你的实验需要。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Distance Transform </tag>
            
            <tag> Matlab </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activation and Loss</title>
      <link href="/2019/11/28/MyResearch/2019-11-28-Activation,%20Label%20and%20Loss/"/>
      <url>/2019/11/28/MyResearch/2019-11-28-Activation,%20Label%20and%20Loss/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="My short-term goal is ..." />    <label for="pass">My short-term goal is ...</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> MyResearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Segmentation </tag>
            
            <tag> Regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玉言又止</title>
      <link href="/2019/11/27/Diary/2019-11-27-%E7%8E%89%E8%A8%80%E5%8F%88%E6%AD%A2/"/>
      <url>/2019/11/27/Diary/2019-11-27-%E7%8E%89%E8%A8%80%E5%8F%88%E6%AD%A2/</url>
      
        <content type="html"><![CDATA[<p>我习惯选择性失忆，而且容易沉落阴霾。<br>所以，我想把自己喜欢的东西都放在这里，等心碎了，回来疗伤。<br>这里写下的，都是某个时刻，关于某次遇见，恰到好处的突发奇想，承载了我日常的可遇而不可求。</p><blockquote><p>用心，是开启一切的钥匙。<br>有一个未来目标，总能让我欢欣鼓舞，只知道，确定了就义无反顾/<br>就像飞向火光的灰蛾，甘愿做烈焰的俘虏/<br>在一往情深的日子里，要输就输给追求，要嫁就嫁给幸福。</p></blockquote><blockquote><p>人生很重要的是态度，处事的态度，待人的态度。暂且不去想手头的某件事能给自己带来什么，首先要有做下去的意义，要有说服自己的理由。<br>如果能时刻保持清醒，不轻易随波逐流，不强迫自己去适应某些不舒服不正常的环境，自是人生一大幸事。就像慢慢地我们会懂得，一时的新鲜感会随着时间的推移产生厌恶，一时赚足眼球的事物时间久了会褪色。就像你升学，升职，登上了某一个更高的舞台，并不意味着段位越高就越顺利，平台越低就越难生存，事在人为，所有的一切都永远都掌握在自己手中。<br>月有阴晴圆缺，人有旦夕祸福。没有永恒的幸福和痛苦，颠峰和低估。没有必要为了闪耀的星光灼伤眼睛，也没有必要对暗夜中的萤火冷嘲热讽，不以物喜，不以己悲，宁静透彻，方为佳选。</p></blockquote><blockquote><p>是寻一座灯塔聊做依傍，还是相信心中的光芒？<br>是缺少遇见未来的力量，还是不敢坚持孤独的向往？<br>不止为何缘故，想到了Monet，也许是我迷上了其中的色彩，也许是因为Titanic中Rose的一句话，也许是因为说不出来的其他原因。<br>深夜里，想到了蔚蓝星空下的坠树；想到了金色余晖下的森林；想到了穷困的画家和平凡的建筑系学生一起追逐梦想的故事；想到了放手去追逐，去勾勒，去寻找自己真正喜欢的东西；想到了西装，剧本，音乐，绘画的未知殿堂。<br>老师说，人生就像loss寻优，如果不能到达最优，次优也是好的。<br>如果我不能去追逐自己想要的东西，认真做好当下的事，大概也是好的。<br>我也喜欢去相信，越努力，越幸运。</p></blockquote><blockquote><p>每一个当下，都有值得去追逐，去付出的东西。不知道远方在哪里，就先把脚下的路做到最好。<br>斯人若彩虹，遇上方知有。还是那句话，去遇见彩虹一样的灵魂，去成为这样的彩虹，以后要培养这样的彩虹。<br>登山之路千万条，你不是要走最光彩照人的那一条，而是要走最适合自己的那一条。</p></blockquote><blockquote><p>睡前在纠结要不要考博，梦里一个女孩把一片沙漠种成了绿洲，想风一样快乐：“我喜欢把不确定的事，变得确定一些。”我想这大概就是她想和我说的话。</p></blockquote><blockquote><p>如果你对未知未来充满恐惧和担心，可能是你对无法handle当下的影射，与其焦虑并不太可能发生的祸患，倒不如用心走好当先。如果每一个当下你都可以完美应对，未来还有什么好担心的。</p></blockquote><blockquote><p>人生在世，怎么可能不经历几场大的磨难，也许是天灾，也许是人祸，无法避免也好，尽量规避也罢，你都得学会勇敢面对。</p></blockquote><blockquote><p>人生最安全的方式，就是无论何时何地，都能过得精彩绝伦。</p></blockquote><blockquote><p>有很多你没有经历的事，显得很孤独，告诉自己，这是一件很平常的事情。如果有一个人能做到，你一定也可以做到，如果没有人做到，你就去做第一个。</p></blockquote><blockquote><p><strong>自己的路自己走，一个人去面对所有。</strong>所谓钱可以解决的问题，从来都不是问题，所谓朋友的帮助可以度过的难关，从来都不是难关。<br>一个人，走着走着，总要遇见一些困难，足够的金钱和朋友的帮助都无济于事。<br>首先告诉自己，这很正常，是个人总要遇见。<br>然后，自己一个人安安静静，平平稳稳地度过这些磨难。<br>不论遇见什么，都要看到阳光的那一面，用最快的时间找到正确的打开方式。</p></blockquote><blockquote><p><em>不轻易去麻烦别人，是应有的修养之一。*</em>每个人的时间和精力都很宝贵，每个人在自私的同时，要懂得去尊重别人的自由和安排。<br>为人处世最好不要精打细算，考虑着每一份付出都要获得应有的回报，这样自己会心累，甚至会心碎；每个人都不傻，当别人看穿你的“交易”，当是转身离去的时刻。</p></blockquote><blockquote><p><strong>真正的快乐，从来和金钱无关，最宝贵的，从来都是时间。</strong>金钱买不来快乐，也守不住真正的安全感，不要让金钱成为枷锁。拮据的时候就过紧凑的日子，富有的时候去享受可及的奢华，任何时候，都享受和拥抱当下的生活。</p></blockquote><blockquote><p><strong>时间的沉淀可以帮你甄别好坏。</strong>有些灰暗的模糊，不要着急去下定义，有些灿烂的心动，不要着急去奋不顾身，迟钝一些，可以交给时间的东西就不要着急去做决断。</p></blockquote><blockquote><p>*<em>希望你有所爱，有所期待。 *</em></p></blockquote><blockquote><p>*<em>不要认为自己很惨，惊喜，很可能就在下一秒。 *</em></p></blockquote><blockquote><p><strong>就当所有的困难都是为了遇见你，所必须经历的旅程。</strong>我知道你也会迷茫，也会恐惧，也会担心，告诉自己 ，这些都很正常。看一看窗前有故事的栀子花，欣欣然绿意渐浓，似乎没有什么可以阻挡成长和繁盛的脚步。</p></blockquote><blockquote><p>一个人身上珍贵的品质是善良，她可以愚钝，但绝不可以不择手段；<br>一个人身上闪光的特质是追求，目标清晰，爱己所爱，无怨无悔，那最好不过。</p></blockquote><blockquote><p>人与人之间最大的区别，是思想的错位。</p></blockquote><blockquote><p>常说目光要长远，殊不知，每一步的脚踏实地，才是长远之道的根本。</p></blockquote><blockquote><p>“U” are master of your own world. 所以，自己的事情靠自己去主宰，自己的问题靠自己去寻找出路，其他的一切，都只能是辅助。</p></blockquote><blockquote><p>不要妄想去读最好的书，以最快的方式滋养灵魂。接触高质量的东西的确可以在一定程度上减少生命的浪费，却并不意味着生命的成长，因为生命的成长需要你的“独立思考”，所以，食糟粕不一定成侏儒，享精华未必能成巨人。</p></blockquote><blockquote><p>我会懂得这个世界的残酷，也愿意去相信美好依然存在。</p></blockquote><blockquote><p>总是当局者迷，尤其是在黑白交错的灰色地带，没有绝对的对与错，也许应该相信我认为，我认为正确的事情就去追，不管结局如何，起码收获成长。</p><p>任何事情，都可能有“例外”不是吗？也许大千世界平平无奇，偏偏唯独这一件会成为例外。</p></blockquote><blockquote><p>许多的人和事，真正的放下不过是三个字“不在乎”。从此我的脑海里，不再有你的专属领地，从此你的存在对我来说平淡无奇。我不再手足无措，也不会故作冷漠。</p></blockquote><p>我喜欢的词句——每一句话都有故事</p><p>《定风波·南海归赠王定国侍人寓娘》：宋-苏轼<br>常羡人间琢玉郎，天应乞与点酥娘。尽道清歌传皓齿，风起，雪飞炎海变清凉。<br>万里归来颜愈少，微笑，笑时犹带岭梅香。试问岭南应不好，却道：此心安处是吾乡。</p><blockquote><p>那一天读论文，像乌龟一样逐字逐句的耐心品味，那一刻，时间的奢侈以及内心的宁静，赋予了内心强大的安全感。就在那一瞬间，我相信，不会再有外物可以伤害到我，哪怕是在空闲时间里占满我心灵的Scarecrow。</p></blockquote><blockquote><p>那一刻，慢慢懂得，所谓世间宁静，不若心灵的安静，人生在世，总能寻一方心灵的净土，感受时间停滞的永恒。</p></blockquote><blockquote><p>是谁说，世间没有永恒？差点让我相信了这诡异的谎言。</p></blockquote><blockquote><p>“此心安处，便是吾乡”。料想柔奴定是人间佳丽，得遇王巩；人品高洁，方成佳话。再附一曲，聊表思绪：</p></blockquote><p>云伯《颐道堂文集》中，有《与姬人采鸾书》云：“十年以前，慕君之色；十年以后，爱君之才。经岁以来，感君之情；一夕之谈，重君之德。湖山之友，闺房之侣，向惟鸥波，今则停云，不图此生，乃兼二妙。新诗在袖，别泪在襟，言念君子，如何勿思？奉别以来，风餐水宿，舟行六日，始达邗江，小住浃旬，当至袁浦。小诗一律，聊志别怀。花气侵人，不宜起早，月痕感梦，莫爱眠迟。寒暖自珍，起居无恙。临楮怅怅，不知所云。”</p><p>《喜欢一个人》吴桂君<br>伤害你的不是对方的绝情，而是你心存幻想的坚持。<br>爱情永远是两个人的努力，而不是一个人的委屈求全。<br>喜欢一个人，<br>始于颜值，陷于才华，<br>忠于人品，痴于肉体，<br>迷于声音，醉于深情。<br>这样在一起，<br>才是嫁给了爱情，<br>愿你遇到一个成熟的爱人，<br>愿你执迷不悟时少受点伤，<br>愿你幡然醒悟时还赶得上。</p><p>多谢你如此精彩耀眼，做我平淡岁月里星辰</p><p>我们首先要明白这么一件事，在自由恋爱，信息对称的当下，每个人都喜欢择优而从之。你喜欢的人，一般不会只有你才喜欢，而有一个喜欢你的人说明你很幸运。</p><p>《为学》彭端淑<br>天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。人之为学有难易乎？学之，则难者亦易矣；不学，则易者亦难矣。<br>吾资之昏，不逮人也，吾材之庸，不逮人也；旦旦而学之，久而不怠焉，迄乎成，而亦不知其昏与庸也。吾资之聪，倍人也，吾材之敏，倍人也；屏弃而不用，其与昏与庸无以异也。圣人之道，卒于鲁也传之。然则昏庸聪敏之用，岂有常哉？<br>蜀之鄙有二僧：其一贫，其一富。贫者语于富者曰：“吾欲之南海，何如？”富者曰：“子何恃而往？”曰：“吾一瓶一钵足矣。”富者曰：“吾数年来欲买舟而下，犹未能也。子何恃而往！”越明年，贫者自南海还，以告富者，富者有惭色。<br>西蜀之去南海，不知几千里也，僧富者不能至而贫者至焉。人之立志，顾不如蜀鄙之僧哉?是故聪与敏，可恃而不可恃也；自恃其聪与敏而不学者，自败者也。昏与庸，可限而不可限也；不自限其昏与庸，而力学不倦者，自力者也。</p><p>送东阳马生序》明-宋濂<br>余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。</p><p>既加冠，益慕圣贤之道，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p><p>当余之从师也，尝负笈曳屣，行深山巨谷中。穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四肢僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴珠缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，煜然若神人。余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p><p>今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵《诗》《书》，无奔走之劳矣；有司业、博士为之师，未有问而不告、求而不得者也；凡所宜有之书，皆集于此，不必若余之手录、假诸人而后见也。其业有不精、德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p><p>东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达；与之论辩，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知余者哉！</p><p>战国时期荀子的《劝学》 唐代韩愈的《师说》 清代彭端的《为学》</p><blockquote><p>我本期望此生得以早些遇见最大的伤害，如此余生便不再畏惧，其实，当自己的心底有了真正的勇气，同样可以无惧人任何伤害。</p></blockquote><blockquote><p>我希望可以永远保持住自己的骨气和纯净，因为那是我独树一帜的底气。</p></blockquote><blockquote><p>慢慢地了解自己，学会和自己相处<br>我希望你可以尊重自己内心，做自己喜欢的事情，包括科研。爱自己喜欢的人。</p></blockquote><blockquote><p>Sunry,我发现自己成长了许多，我还记得去年的0510，拐弯去二食堂的路上，你问我喜不喜欢现在的方向。我当时坚信任何一个方向往深了走，都会遇见困难；我喜欢日久生情，每一个方向，时间久了，付出的心血多了，我都会喜欢上它。所以，对我来说，没有特殊的喜好，选择哪个一并不重要，我会等，等到某个方向向我走来。<br>而现在呢，开始学着照顾自己的特殊偏好，希望未来的自己有足够的能力，去保护和尊重内心最真实的想法，做自己最喜欢的事情，爱自己最喜欢的人。</p></blockquote><blockquote><p>既然喜欢仍在，就好好去爱。<br>不管是为一个人，还是对一件事，只需要这唯一理由，就不要轻言放弃。<br>能如此执着的爱上一个人，这本身恐怕就是件了不起的事。——村上春树</p></blockquote><p>作家柏邦妮曾采访袁泉，并评价说：“她有绝顶的才华，绝顶的敏感，也有绝顶的骄傲，这些东西揉合在一起，她的一生不会是容易的。十年之后，她好像还像我初见她的时候一样，始终没有大红大紫，却是沉金冷玉那样的女演员，她每次出场，哪怕只有一个镜头，却如此隽永难忘。她的柔弱和强韧，就像一株风中的芦苇，随时都会折断，却永远不。她的冷香和热毒，就像一味珍稀的丸药，你可以治好自己，但舍不得。”</p><blockquote><p>认真，永远不失真<br>认真对待有关自己的每个决定，对自己的行为负责，独自承担所有后果。</p></blockquote><p>心将流水同清净，身与浮云无是非</p><p>胜，不妄喜；败，不遑馁；胸有激雷而面如平湖者，可拜上将军。</p><p>世上没有最正确无误的决定，所谓正确的决定，一定是“亦余心之所善兮”的向往。</p><p>扎扎实实地做好当下的事，是治愈迷茫最好的方式</p><p>川北悦吏子曾说，生命不必每时每刻都要冲刺，低沉时就当作放了一个悠长的假期。</p><p>爱上一个人，愿意为其倾尽所有；爱上一件事，愿意为它熬尽所有的心血。这时，这件事不仅仅是职业，更是事业。<br>心灵不在它生活的地方，而在它所爱的地方。</p><blockquote><p>夜空中，总有一颗最亮的星辰，对不同的人而言有着独特的意义。<br>中学时代，我发现了这个秘密，就一颗星，镶在我窗框里，陪我度过每一个孤单而又无助的夜晚。<br>高中时代，搬家到千里之外，书桌前的窗框里，依旧只有一颗星，陪我收藏点点滴滴的努力，度过跌跌撞撞的日子。<br>大学毕业，搬家到马路的那一边，闺房的窗框里，还是那颗最闪亮的星，陪我度过每一段思念和忧伤，迎接意想不到的惊喜。<br>读研时代，校园的上空，就是那颗最亮的星辰，见证我的每一段绝望，无助，痛苦，开心，以及成长，在我肆意奔跑的时候，在我夜归的路上。<br>我知道，夜空中，总有一颗最亮的星辰，对不同的人而言有着独特的意义。对我而言，My Brilliant Start， 它意味着跨越生死界限的陪伴，给我无声的守护和永恒的支持。<br>当我找到我爱的他，我会跑到星空之下告诉你，我相信的美好依然存在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heartbeats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让谷歌搜索到自己在GitHub上的博客</title>
      <link href="/2019/11/27/Tools/2019-11-27-%E8%AE%A9%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1%E5%86%8DGitHub%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/27/Tools/2019-11-27-%E8%AE%A9%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1%E5%86%8DGitHub%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>许久不写博客了，假借CSDN的便捷和随性，其实是因为自己的懒伞，打算从今天起重新拾起自己的私人博客。<br>还是那句话，因为喜欢就好好去爱。不管是为一个人，还是对一件事，很多时候我们贪恋的，都是当初那份恰如其分的感觉，时间走过，当初的那份记忆和感觉，便很难再找回来了。世间有太多的可遇而不可求对吗？下一秒会发生什么，我们都无法预料。<br>期望自己能够早日拥有让自己真心喜欢的博文。</p><h2 id="Step0-why"><a href="#Step0-why" class="headerlink" title="Step0: why ?"></a>Step0: why ?</h2><p>网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，因为搜索引擎不会去检索你的Github仓库。遇到这个问题怎么办呢？本文教你用Hexo在Github Pages上搭建的博客如何能被Google搜索到。</p><h2 id="Step1-验证网站是否被Google收录"><a href="#Step1-验证网站是否被Google收录" class="headerlink" title="Step1: 验证网站是否被Google收录"></a>Step1: 验证网站是否被Google收录</h2><p>打开谷歌搜索，在搜索框中输入</p><p>site:<a href="https://Huiyu-Li.github.io/">https://Huiyu-Li.github.io/</a> ( 注意将Huiyu-Li替换为你自己的)</p><p>如果提示说：找不到和您查询的“site:<a href="https://maxwellyue.github.io”" target="_blank" rel="noopener">https://maxwellyue.github.io”</a> 相符的内容或信息，说明未被收录。</p><p>如果搜索结果的第一条就是你的博客站点，说明已被收录，不用再继续看下面的内容了。</p><h2 id="Step2-提交谷歌搜索"><a href="#Step2-提交谷歌搜索" class="headerlink" title="Step2:提交谷歌搜索"></a>Step2:提交谷歌搜索</h2><p>进入Google Web Master <a href="https://search.google.com/search-console?hl=zh-CN&utm_source=wmx&utm_medium=deprecation-pane&utm_content=home&resource_id=https://huiyu-li.github.io/" target="_blank" rel="noopener">Search Console</a>，登录之后提交你的博客网址：<br><img src="/medias/pic_md/Tools/SubmitGoogle1.png" alt="SubmitGoogle1"><br>这里需要验证网站所有权，网站给我们提示了一个推荐验证方法是通过在你的网站上添加一个它提供的HTML文件来验证，按照步骤依次操作即可。在设置中看到下图所示场景，即为验证成功。<br><img src="/medias/pic_md/Tools/SubmitGoogle2.png" alt="SubmitGoogle2"></p><h2 id="Step3-添加站点地图"><a href="#Step3-添加站点地图" class="headerlink" title="Step3:添加站点地图"></a>Step3:添加站点地图</h2><p>站点地图(Site Map)是用来注明网站结构的文件，我们希望搜索引擎的爬虫了解我们的网站结构，以便于高效爬取内容，快速建立索引。</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>首先为Hexo安装hexo-generator-sitemap和hexo-generator-baidu-sitemap插件，在Hexo博客目录下运行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save</code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开博客根目录下的_config.yml文件，添加如下字段:</p><pre class=" language-bash"><code class="language-bash">sitemap:    path: sitemap.xml</code></pre><p>然后重新生成博客文件，运行<br>hexo clean<br>hexo g<br>此时应该可以在public目录下看到sitemap.xml文件了。</p><h4 id="添加-测试站点地图"><a href="#添加-测试站点地图" class="headerlink" title="添加/测试站点地图"></a>添加/测试站点地图</h4><p>回到之前提交搜索资源的页面，在左边侧边栏找到“站点地图”,点击“添加/测试站点地图”，将<a href="https://xxxx.github.io/sitemap.xml" target="_blank" rel="noopener">https://xxxx.github.io/sitemap.xml</a> 提交并刷新，就可以看到博客的网站结构了。<br>如果没有什么问题的话，到这里就结束了，但是现在用Google还不能立即查到博客的内容，要等到搜索引擎下一次更新检索时才会有显示。</p><p>参考：<br><a href="https://blog.csdn.net/weixin_44058333/article/details/100165245" target="_blank" rel="noopener">让Google搜索到GitHub上的个人博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传统的图像分割方法</title>
      <link href="/2019/08/05/Knowledge/%E4%BC%A0%E7%BB%9F%E7%9A%84%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/05/Knowledge/%E4%BC%A0%E7%BB%9F%E7%9A%84%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>图像分割(image segmentation)是指将图像分成若干具有相似性质的区域的过程.传统的图像分割方法主要有:</p><h4 id="1-基于阈值的分割"><a href="#1-基于阈值的分割" class="headerlink" title="1. 基于阈值的分割"></a>1. 基于阈值的分割</h4><p>阈值法的基本思想是基于图像的灰度特征来计算一个或多个灰度阈值，并将图像中每个像素的灰度值与阈值相比较，最后将像素根据比较结果分到合适的类别中。因此，该类方法最为关键的一步就是按照某个准则函数来求解最佳灰度阈值。</p><p>阈值法特别适用于目标和背景占据不同灰度级范围的图。</p><p>图像若只有目标和背景两大类，那么只需要选取一个阈值进行分割，此方法成为单阈值分割；但是如果图像中有多个目标需要提取，单一阈值的分割就会出现作物，在这种情况下就需要选取多个阈值将每个目标分隔开，这种分割方法相应的成为多阈值分割。</p><p>阀值分割方法的优缺点：</p><p>计算简单，效率较高；</p><p>只考虑像素点灰度值本身的特征，一般不考虑空间特征，因此对噪声比较敏感，鲁棒性不高。</p><p>从前面的介绍里我们可以看出，阈值分割方法的最关键就在于阈值的选择。若将智能遗传算法应用在阀值筛选上，选取能最优分割图像的阀值，这可能是基于阀值分割的图像分割法的发展趋势。</p><h5 id="1-1-固定阈值分割"><a href="#1-1-固定阈值分割" class="headerlink" title="1.1 固定阈值分割"></a>1.1 固定阈值分割</h5><p>固定某像素值为分割点。</p><h5 id="1-2-直方图双峰法："><a href="#1-2-直方图双峰法：" class="headerlink" title="1.2 直方图双峰法："></a>1.2 直方图双峰法：</h5><p>Prewitt 等人于六十年代中期提出的直方图双峰法(也称 mode 法) 是典型的全局单阈值分割方法。</p><p>该方法的基本思想是：假设图像中有明显的目标和背景，则其灰度直方图呈双峰分布，当灰度级直方图具有双峰特性时，选取两峰之间的谷对应的灰度级作为阈值。如果背景的灰度值在整个图像中可以合理地看作为恒定，而且所有物体与背景都具有几乎相同的对比度，那么，选择一个正确的、固定的全局阈值会有较好的效果.</p><p>算法实现：找到第一个峰值和第二个峰值,再找到第一和第二个峰值之间的谷值，谷值就是那个阀值。</p><h5 id="1-3-迭代阈值图像分割"><a href="#1-3-迭代阈值图像分割" class="headerlink" title="1.3 迭代阈值图像分割:"></a>1.3 迭代阈值图像分割:</h5><p>Step 1．统计图像灰度直方图,求出图像的最大灰度值和最小灰度值，分别记为$Z_{max}$和$Z_{min}$，令初始阈值$T_0 =  (Z_{min}+Z_{max})/2$；</p><p>Step 2． 根据阈值$T_k$将图象分割为前景和背景，计算小于$T_k$所有灰度的均值$Z_{min}$，和大于$T_k$的所有灰度的均值$Z_{max}$。</p><p>Step 3． 求出新阈值$T_{k+1} = (Z_{min}+Z_{max})/2$；</p><p>Step 4． 若$T_k == T_{k+1}$，则所得即为阈值；否则转2，迭代计算。</p><h5 id="1-4-自适应阈值图像分割"><a href="#1-4-自适应阈值图像分割" class="headerlink" title="1.4 自适应阈值图像分割:"></a>1.4 自适应阈值图像分割:</h5><p>有时候物体和背景的对比度在图像中不是处处一样的，普通阈值分割难以起作用。这时候可以根据图像的局部特征分别采用不同的阈值进行分割。只要我们将图像分为几个区域，分别选择阈值，或动态地根据一定邻域范围选择每点处的阈值，从而进行图像分割。</p><h5 id="1-5-大津法OTSU-最大类间方差法-："><a href="#1-5-大津法OTSU-最大类间方差法-：" class="headerlink" title="1.5 大津法OTSU (最大类间方差法)："></a>1.5 大津法OTSU (最大类间方差法)：</h5><p>日本学者大津在1979年提出的自适应阈值确定方法。 按照图像的灰度特性，将图像分为背景和目标两部分。背景和目标之间的类间方差越大,说明构成图像的2部分的差别越大,当部分目标错分为背景或部分背景错分为目标都会导致2部分差别变小。因此,使类间方差最大的分割意味着错分概率最小。</p><h5 id="1-6-均值法"><a href="#1-6-均值法" class="headerlink" title="1.6 均值法:"></a>1.6 均值法:</h5><p>把图像分成m*n块子图，求取每一块子图的灰度均值, 将所有像素灰度值之和除以像素点的数量，这个均值就是阈值了。这种方法明显不比大津法好，因为均值法和大津法都是从图像整体来考虑阈值的，但是大津法找了一个类间方差最大值来求出最佳阈值的；这两种方法子图越多应该分割效果会好一点，但效率可能会变慢。</p><h5 id="1-7-最佳阈值"><a href="#1-7-最佳阈值" class="headerlink" title="1.7 最佳阈值:"></a>1.7 最佳阈值:</h5><p>阈值选择需要根据具体问题来确定，一般通过实验来确定。如对某类图片，可以分析其直方图等。</p><h4 id="2-基于边缘的分割方法"><a href="#2-基于边缘的分割方法" class="headerlink" title="2. 基于边缘的分割方法"></a>2. 基于边缘的分割方法</h4><p>图像中两个不同区域的边界线上连续的像素点的集合，是图像局部特征不连续性的反映，体现了灰度、颜色、纹理等图像特性的突变。通常情况下，基于边缘的分割方法指的是基于灰度值的边缘检测，它是建立在边缘灰度值会呈现出阶跃型或屋顶型变化这一观测基础上的方法。阶跃型边缘两边像素点的灰度值存在着明显的差异，而屋顶型边缘则位于灰度值上升或下降的转折处。如果将图片从空间域通过傅里叶变换到频率域，边缘就对应着高频部分，这是一种非常简单的边缘检测算法。最简单的边缘检测方法是微分算子法，即使用一阶导数的极值与二阶导数的零点来确定边缘，具体实现时可以使用<strong>图像与模板进行卷积</strong>来完成。</p><p>   边缘检测的优缺点：</p><ol><li>边缘定位准确；</li><li>速度快；</li><li>不能保证边缘的连续性和封闭性；</li><li>在高细节区域存在大量的碎边缘，难以形成一个大区域，但是又不宜将高细节区域分成小碎片；</li></ol><p>由于上述的3,4两个难点，边缘检测只能产生边缘点，而非完整意义上的图像分割过程。这也就是说，在边缘点信息获取到之后还需要后续的处理或者其他相关算法相结合才能完成分割任务。<br>在以后的研究当中，用于提取初始边缘点的自适应阈值选取、用于图像的层次分割的更大区域的选取以及如何确认重要边缘以去除假边缘将变得非常重要。</p><p>边缘角点和兴趣点的检测器有：</p><h5 id="2-1-Canny边缘检测器："><a href="#2-1-Canny边缘检测器：" class="headerlink" title="2.1 Canny边缘检测器："></a>2.1 Canny边缘检测器：</h5><p>将图像P模糊化，然后与一堆正交微分滤波器（如Prewitt滤波器）做<strong>卷积</strong>生成分别包括水平和垂直方向上的导数的图像H和V，对像素(i,j)计算其梯度方向和幅度。若幅度超过临界值就分配一条边缘（此处称为阈值法，但效果不佳）。canny使用非极大抑制的方法对那些不需要响应的进行删除。</p><h5 id="2-2-Harris角点检测器："><a href="#2-2-Harris角点检测器：" class="headerlink" title="2.2 Harris角点检测器："></a>2.2 Harris角点检测器：</h5><p>对每个点周围的水平方向垂直方向的据ubu梯度进行考虑。目的在于找到图像中亮度在两个方向上均发生变化的点，而非一个方向（一条边缘）或者零个方向（平坦区域）。Harris角点检测器是基于对图像结构张量的决策。</p><h5 id="2-3-SIFT检测器"><a href="#2-3-SIFT检测器" class="headerlink" title="2.3 SIFT检测器:"></a>2.3 SIFT检测器:</h5><p>尺度不变特征转换，检测是用来识别兴趣点的第二中方法。不同与Harris角点检测器，SIFT将尺度和方向与结果中的兴趣点相关联。为了找到兴趣点，交替使用多种算子。</p><h5 id="2-4-SURF检测器"><a href="#2-4-SURF检测器" class="headerlink" title="2.4 SURF检测器"></a>2.4 SURF检测器</h5><p>SIFT的改进版。</p><h5 id="基于小波分析和小波变换的图像分割方法"><a href="#基于小波分析和小波变换的图像分割方法" class="headerlink" title="基于小波分析和小波变换的图像分割方法"></a>基于小波分析和小波变换的图像分割方法</h5><p>小波变换是近年来得到的广泛应用的数学工具，也是现在数字图像处理必学部分，它在时间域和频率域上都有量高的局部化性质，能将时域和频域统一于一体来研究信号。而且小波变换具有多尺度特性，能够在不同尺度上对信号进行分析，因此在图像分割方面的得到了应用。</p><p>二进小波变换具有检测二元函数的局部突变能力，因此可作为图像边缘检测工具。图像的边缘出现在图像局部灰度不连续处，对应于二进小波变换的模极大值点。通过检测小波变换模极大值点可以确定图像的边缘小波变换位于各个尺度上，而每个尺度上的小波变换都能提供一定的边缘信息，因此可进行多尺度边缘检测来得到比较理想的图像边缘。</p><p>另外，将小波和其他方法结合起来处理图像分割的问题也得到了广泛研究，比如一种局部自适应阈值法就是将Hilbert图像扫描和小波相结合，从而获得了连续光滑的阈值曲线。</p><h4 id="3-基于区域的分割方法"><a href="#3-基于区域的分割方法" class="headerlink" title="3. 基于区域的分割方法"></a>3. 基于区域的分割方法</h4><p>基于区域的分割方法是以直接寻找区域为基础的分割技术，基于区域提取方法有两种基本形式：一种是区域生长，从单个像素出发，逐步合并以形成所需要的分割区域；另一种是从全局出发，逐步切割至所需的分割区域。</p><h5 id="3-1-种子区域生长法"><a href="#3-1-种子区域生长法" class="headerlink" title="3.1 种子区域生长法"></a>3.1 种子区域生长法</h5><p>区域生长是从一组代表不同生长区域的种子像素开始，接下来将种子像素邻域里符合条件的像素合并到种子像素所代表的生长区域中，并将新添加的像素作为新的种子像素继续合并过程，直到找不到符合条件的新像素为止，该方法的关键是选择合适的初始种子像素以及合理的生长准则。最早的区域生长图像分割方法是由Levine等人提出。</p><p>区域生长算法需要解决的三个问题：</p><ol><li>选择或确定一组能正确代表所需区域的种子像素；</li><li>确定在生长过程中能将相邻像素包括进来的准则；</li><li>指定让生长过程停止的条件或规则。</li></ol><h5 id="3-2-区域分裂合并法"><a href="#3-2-区域分裂合并法" class="headerlink" title="3.2 区域分裂合并法"></a>3.2 区域分裂合并法</h5><p>区域分裂合并法（Gonzalez，2002）可以说是区域生长的逆过程，从整幅图像出发，确定分裂合并的准则，然后将图像任意分成若干互不相交的区域，按准则对这些区域进行分裂合并。</p><p>四叉树分解法就是一种典型的区域分裂合并法，基本算法如下：</p><ol><li>对于任一区域，如果$H(R_i)=FALSE$就将其分裂成不重叠的四等分；</li><li>对相邻的两个区域$R_i$和$R_j$，它们也可以大小不同（即不在同一层），如果条件$H(R_iUR_j)=TURE$满足，就将它们合并起来；</li><li>如果进一步的分裂或合并都不可能，则结束。</li></ol><p>区域分裂合并算法优缺点：</p><ol><li>对复杂图像分割效果好；</li><li>算法复杂，计算量大；</li><li>分裂有可能破怪区域的边界。</li></ol><p>在实际应用当中通常将区域生长算法和区域分裂合并算法结合使用，该类算法对某些复杂物体定义的复杂场景的分割或者对某些自然景物的分割等类似先验知识不足的图像分割效果较为理想。</p><h5 id="3-3-分水岭法"><a href="#3-3-分水岭法" class="headerlink" title="3.3 分水岭法"></a>3.3 分水岭法</h5><p>分水岭分割方法，是一种基于拓扑理论的数学形态学的分割方法，其基本思想是把图像看作是测地学上的拓扑地貌，图像中每一点像素的灰度值表示该点的海拔高度，每一个局部极小值及其影响区域称为集水盆，而集水盆的边界则形成分水岭。分水岭的概念和形成可以通过模拟浸入过程来说明。在每一个局部极小值表面，刺穿一个小孔，然后把整个模型慢慢浸入水中，随着浸入的加深，每一个局部极小值的影响域慢慢向外扩展，在两个集水盆汇合处构筑大坝，即形成分水岭。</p><p>分水岭对微弱边缘具有良好的响应，图像中的噪声、物体表面细微的灰度变化都有可能产生过度分割的现象，但是这也同时能够保证得到封闭连续边缘。同时，分水岭算法得到的封闭的集水盆也为分析图像的区域特征提供了可能。</p><h4 id="4-基于图论的分割方法"><a href="#4-基于图论的分割方法" class="headerlink" title="4. 基于图论的分割方法"></a>4. 基于图论的分割方法</h4><p>此类方法基于图论的方法利用图论领域的理论和方法，将图像映射为带权无向图，把像素视作节点，将图像分割问题看作是图的顶点划分问题，利用最小剪切准则得到图像的最佳分割。此类方法把图像分割问题与图的最小割(MIN-CUT)问题相关联，通常做法是将待分割的图像映射为带权无向图G=(V，E)，其中, $V={ v_{1} ，…， v_{n} }$是顶点的集合，E为边的集合。图中每个节点N∈V对应于图像中的每个像素，每条边∈E连接着一对相邻的像素，边的权值$w( v_{i}，v_{j} )$，其中$ (v_{i}，v_{j})∈E$，表示了相邻像素之间在灰度、颜色或纹理方面的非负相似度。而对图像的一个分割S就是对图的一个剪切，被分割的每个区域C∈S对应着图中的一个子图。</p><p>分割的原则就是使划分后的子图在内部保持相似度最大，而子图之间的相似度保持最小。我们以一个两类的分割为例，把G = (V,E) 分成两个子集A,B,另：$ A\cup B=V$，$A\cap B=\phi$ ，$CUT(A,B) = \Sigma_{\mu\in A，v\in B}w(\mu,v) $, 其中 $w(\mu,v) $, 是权重(weight), 最小割就是让上式的值最小的分割。</p><p>基于图论的代表有NormalizedCut，GraphCut和GrabCut等方法.</p><h5 id="4-1-NormalizedCut"><a href="#4-1-NormalizedCut" class="headerlink" title="4.1 NormalizedCut"></a>4.1 NormalizedCut</h5><p>最小化分割解决了把权重图G分成两部分的任务，但是问题来了，如下图所示，想要的结果是中间实线表示的分割，但是最小化切割却切掉了最边缘的角。这中情况很容易理解，因为最小化切割就是让CUT(A,B)的值最小的情况，而边缘处CUT值确实是最小，因此我们输最小化切割时会有偏差的(bias)。如何去除这种偏差就要引入Normalized Cut算法了。</p><p><img src="/medias/pic_md/Knowledge/ConventioanlSegmentation1.png" alt="Conventioanl Segmentation1"><br>思路很简单，将Cut normalize一下，除以表现顶点集大小的某种量度(如 vol A = 所有A中顶点集的度之和，含义是A中所有点到图中所有点的权重的和)， 也就是$NormalizeCut(A, B) = Cut(A, B) / volA + Cut(A, B) / volB$，通过公式可以很清晰的看到NormalizeCut在追求不同子集间点的权重最小值的同时也追求同一子集间点的权重和最大值。</p><h5 id="4-2-GraphCut-图割"><a href="#4-2-GraphCut-图割" class="headerlink" title="4.2 GraphCut (图割)"></a>4.2 GraphCut (图割)</h5><p>Graph Cuts图是在普通图的基础上多了2个顶点，这2个顶点分别用符号”S”和”T”表示，称为终端顶点。其它所有的顶点都必须和这2个顶点相连形成边集合中的一部分，所以Graph Cuts中有两种顶点，也有两种边，第一种普通顶点对应于图像中的每个像素。每两个邻域顶点的连接就是一条边。这种边也叫n-links。除图像像素外，还有另外两个终端顶点，叫S源点和T汇点。每个普通顶点和这2个终端顶点之间都有连接，组成第二种边,这种边也叫t-links，如下图所示。</p><p><img src="/medias/pic_md/Knowledge/ConventioanlSegmentation2.png" alt="ConventioanlSegmentation2"><br>Graph Cuts中的Cuts是指这样一个边的集合，这些边集合包括了上面定义的2种边，该集合中所有边的断开会导致残留“S”和“T”图的分开，所以就称为“割”。如果一个割，它的边的所有权值之和最小，那么这个就称为最小割，也就是图割的结果。根据网络中最大流和最小割等价的原理，将图像的最优分割问题转化为求解对应图的最小割问题。由Boykov和Kolmogorov发明的max-flow/min-cut算法[1，4]就可以用来获得S-T图的最小割，这个最小割把图的顶点划分为两个不相交的子集S和T，其中s ∈S，t∈ T和S∪T=V 。这两个子集就对应于图像的前景像素集和背景像素集，那就相当于完成了图像分割。</p><h5 id="4-3-GrabCut-分割和抠图"><a href="#4-3-GrabCut-分割和抠图" class="headerlink" title="4.3 GrabCut 分割和抠图"></a>4.3 GrabCut 分割和抠图</h5><p>Graph Cuts 算法利用了图像的像素灰度信息和区域边界信息，代价函数构建在全局最优的框架下，保证了分割效果。但Graph Cuts 是NP 难问题，且分割结果更倾向于具有相同的类内相似度。Rother 等人提出了基于迭代的图割方法，称为Grab Cut 算法。该算法使用高斯混合模型对目标和背景建模，利用了图像的RGB 色彩信息和边界信息，通过少量的用户交互操作得到非常好的分割效果。</p><p>Graph Cuts是Graphcut的改进版，是迭代的GraphCut。改进包括：</p><ol><li>将基于灰度分布的模型替换为高斯混合模型（Gaussian Mixture Model，GMM）以支持彩色图片;</li><li>将能一次性得到结果的算法改成了『强大的』迭代流程；将用户的交互简化到只需要框选前景物体即可。</li></ol><p>与Graph Cut不同处：</p><ol><li>Graph Cut的目标和背景的模型是灰度直方图，Grab Cut取代为RGB三通道的混合高斯模型GMM;</li><li>Graph Cut的能量最小化（分割）是一次达到的，而Grab Cut取代为一个不断进行分割估计和模型参数学习的交互迭代过程;</li><li>Graph Cut需要用户指定目标和背景的一些种子点，但是Grab Cut只需要提供背景区域的像素集就可以了。也就是说你只需要框选目标，那么在方框外的像素全部当成背景，这时候就可以对GMM进行建模和完成良好的分割了。即Grab Cut允许不完全的标注（incomplete labelling）。彩色像素值的稀疏问题比灰度图要严重得多（256 vs 17M），所以，继续使用histogram是不现实的，需要信息压缩得更好一点的模型，作者在这里参考前人，对前景和背景各建了K=5的高斯混合模型。</li><li>GrabCut是按颜色分布和边缘对比度来分割图片的，对一些常见的与此原则相悖的图片，效果确实不好。比如前景人物的帽子、鞋、墨镜，通常颜色跟前景主体有较大区别；再如前景中的孔，有可能由于颜色区分和边缘的对比度不足，导致边缘的惩罚占上风，而没有扣出来背景。所以，GrabCut还是保留了人工修正的操作，定义了两种标记：绝对是背景和可能是前景。对分割错误人工修正后，分割还是可以比较准确的。对自然场景图片的分割，比Bayes matte等方法得到的边缘明显看起来舒服得多。</li></ol><h4 id="5-基于能量泛函的分割方法"><a href="#5-基于能量泛函的分割方法" class="headerlink" title="5. 基于能量泛函的分割方法"></a>5. 基于能量泛函的分割方法</h4><p>该类方法主要指的是活动轮廓模型（active contour model）以及在其基础上发展出来的算法，其基本思想是使用连续曲线来表达目标边缘，并定义一个能量泛函使得其自变量包括边缘曲线，因此分割过程就转变为求解能量泛函的最小值的过程，一般可通过求解函数对应的欧拉(Euler．Lagrange)方程来实现，能量达到最小时的曲线位置就是目标的轮廓所在。</p><p>活动轮廓模型逐渐形成了不同的分类方式，较常见的是根据曲线演化方式的不同，将活动轮廓模型分为基于边界、基于区域和混合型活动轮廓模型。</p><p>按照模型中曲线表达形式的不同，活动轮廓模型可以分为两大类：参数活动轮廓模型（parametric active contour model）和几何活动轮廓模型（geometric active contour model）。</p><h5 id="5-1-参数主动轮廓模型（parametric-active-contour-model）"><a href="#5-1-参数主动轮廓模型（parametric-active-contour-model）" class="headerlink" title="5.1 参数主动轮廓模型（parametric active contour model）:"></a>5.1 参数主动轮廓模型（parametric active contour model）:</h5><p>参数活动轮廓模型基于Lagrange框架，将曲线或曲面的形变以参数化形式表达，最具代表性的是由Kasset a1(1987)所提出的Snake模型。该类模型在早期的生物图像分割领域得到了成功的应用，但其存在着分割结果受初始轮廓的设置影响较大以及难以处理曲线拓扑结构变化等缺点，此外其能量泛函只依赖于曲线参数的选择，与物体的几何形状无关，这也限制了其进一步的应用。</p><p>Snake模型: Michael Kass et al. Snakes: Active contour models. International Journal of Computer Vision, pages 321-331, 1987.</p><p>Snake定义为能量极小化的样条曲线，它在来自曲线自身的内力和来自图像数据的外力的共同作用下移动到感兴趣的边缘，内力用于约束曲线形状，而外力则引导曲线到特征此边缘。参数主动轮廓模型的特点是将初始曲线置于目标区域附近，无需人为设定曲线的的演化是收缩或膨胀，其优点是能够与模型直接进行交互，且模型表达紧凑，实现速度快；其缺点是难以处理模型拓扑结构的变化。比如曲线的合并或分裂等。而使用水平集（level set）的几何活动轮廓方法恰好解决了这一问题。</p><p>基本Snakes模型的能量函数由三项组成，弹性能量和弯曲能量合称内部能量（内部力），用于控制轮廓线的弹性形变，起到保持轮廓连续性和平滑性的作用。而第三项代表外部能量，也被称为图像能量，表示变形曲线与图像局部特征吻合的情况。内部能量仅仅跟snake的形状有关，而跟图像数据无关。而外部能量仅仅跟图像数据有关。在某一点的α和β的值决定曲线可以在这一点伸展和弯曲的程度。最终对图像的分割转化为求解能量函数Etotal(v)极小化（最小化轮廓的能量）。在能量函数极小化过程中，弹性能量迅速把轮廓线压缩成一个光滑的圆，弯曲能量驱使轮廓线成为光滑曲线或直线，而图像力则使轮廓线向图像的高梯度位置靠拢。基本Snakes模型就是在这3个力的联合作用下工作的。</p><p>snake相对于经典的特征提取方法有以下优点：</p><ol><li>通过正确设置和项前系数，可交互方式控制snake;</li><li>容易操控，因为图像力是以直观的方式表现;</li><li>在寻找最小能量状态的时候它们是自主的和自适应的;</li><li>可以通过在图像能量函数中加入高斯平滑而对图像尺度敏感;</li><li>可以用于跟踪时间或者空间维度上的动态目标。</li></ol><p>snake的缺点：</p><ol><li>初始位置不同使得结果不同;</li><li>经常陷入局部最小状态，这也许可以通过使用模拟退火技术来克服，代价就是计算时间增加;</li><li>在最小化整个轮廓路径上的能量过程中经常忽略微小特征;</li><li>精度由能量最小化技术中使用的收敛标准控制；更高的精度要求更严格的收敛标准，因此需要更长的计算时间。</li></ol><h5 id="5-2-ASM-Active-Shape-Model-主动形状模型"><a href="#5-2-ASM-Active-Shape-Model-主动形状模型" class="headerlink" title="5.2 ASM(Active Shape Model)主动形状模型"></a>5.2 ASM(Active Shape Model)主动形状模型</h5><p>Cootes T F, Taylor C J. Active Shape Models — ‘Smart Snakes’[M]// BMVC92. Springer London, 1992:266–275.</p><p>ASM（主动形状模型）是建立在PDM（点分布模型）的基础上，通过训练图像样本获取训练图像样本的特征点分布的统计信息，并且获取特征点允许存在的变化方向，实现在目标图像上寻找对应的特征点的位置。训练样本需要手动的标记所有的特征点的位置，记录特征点的坐标，并且计算每一个特征点对应的局部灰度模型作为局部特征点调整用的特征向量。在将训练好的模型放在目标图像上，寻找每一个特征点的下一个位置的时候，采用局部灰度模型寻找在当前特征点指定方向上局部灰度模型马氏距离最小的特征点作为当前特征点即将移动到的位置，称为suggested point, 找到所有的suggested points就可以获得一个搜索的suggested shape, 然后将当前的模型通过调整参数使得当前的模型最可能相似的调整到suggest shape，重复迭代直到实现收敛。</p><h5 id="5-3-AAM-Active-Appearance-Models"><a href="#5-3-AAM-Active-Appearance-Models" class="headerlink" title="5.3 AAM(Active Appearance Models)"></a>5.3 AAM(Active Appearance Models)</h5><p>Cootes T F, Edwards G J, Taylor C J. Active Appearance Models[C]// European Conference on Computer Vision. Springer Berlin Heidelberg, 1998:484-498.</p><p>ASM是基于统计形状模型的基础上进行的，而AAM则是在ASM的基础上，进一步对纹理（将人脸图像变形到平均形状而得到的形状无关图像）进行统计建模，并将形状和纹理两个统计模型进一步融合为表观模型。</p><p>AAM模型相对于ASM模型的改进为：</p><ol><li>使用两个统计模型融合 取代 ASM的灰度模型。</li><li>主要对特征点的特征描述子进行了改进，增加了描述子的复杂度和鲁棒性</li></ol><h5 id="5-4-CLM-Constrained-local-model-有约束的局部模型"><a href="#5-4-CLM-Constrained-local-model-有约束的局部模型" class="headerlink" title="5.4 CLM(Constrained local model)有约束的局部模型"></a>5.4 CLM(Constrained local model)有约束的局部模型</h5><p>CLM是有约束的局部模型，ASM也属于CLM的一种。CLM通过初始化平均脸的位置，然后让每个平均脸上的特征点在其邻域位置上进行搜索匹配来完成人脸点检测。整个过程分两个阶段：模型构建阶段和点拟合阶段。模型构建阶段又可以细分两个不同模型的构建：</p><p>形状模型构建: 对人脸模型形状进行建模，说白了就是一个ASM的点分布函数（PDM），它描述了形状变化遵循的准则.</p><p>Patch模型构建: 对每个特征点周围邻域进行建模，也就说建立一个特征点匹配准则，怎么判断特征点是最佳匹配.</p><h5 id="5-5-GAC-geometric-active-contour-model-几何主动轮廓模型"><a href="#5-5-GAC-geometric-active-contour-model-几何主动轮廓模型" class="headerlink" title="5.5 GAC(geometric active contour model)几何主动轮廓模型:"></a>5.5 GAC(geometric active contour model)几何主动轮廓模型:</h5><p>S.Osher,J.A.Sethian,Fronts propagating with curvature dependent speed:algorithms basedon Hamilton-Jacobi formulations.Journal of Computational Physics,1988,79:12—49</p><p>几何活动轮廓模型的曲线运动过程是基于曲线的几何度量参数而非曲线的表达参数，因此可以较好地处理拓扑结构的变化，并可以解决参数活动轮廓模型难以解决的问题。而水平集（Level Set）方法（Osher，1988）的引入，则极大地推动了几何活动轮廓模型的发展，因此几何活动轮廓模型一般也可被称为水平集方法。</p><p>几何活动轮廓模型是以曲线演化理论和水平集方法为理论基础,继参数活动轮廓模型后形变模型的又一发展,是图像分割和边界提取的重要工具之一。相对于参数活动轮廓模型,几何活动轮廓模型具有很多优点,如可以处理曲线的拓扑变化、对初始位置不敏感、具有稳定的数值解等.</p><p>几何活动轮廓模型又可分为基于边界的活动轮廓模型、基于区域的活动轮廓模型。基于边界的活动轮廓模型主要依赖图像的边缘信息控制曲线的运动速度。在图像边缘强度较弱或是远离边缘的地方，轮廓曲线运动速度较大，而在图像边缘强度较强的地方，轮廓曲线运动速度较小甚至停止，使得最终的轮廓曲线运动到边缘位置.</p><h4 id="6-基于遗传算法的图像分割"><a href="#6-基于遗传算法的图像分割" class="headerlink" title="6. 基于遗传算法的图像分割"></a>6. 基于遗传算法的图像分割</h4><p>遗传算法（Genetic Algorithms，简称GA）是1973年由美国教授Holland提出的，是一种借鉴生物界自然选择和自然遗传机制的随机化搜索算法。是仿生学在数学领域的应用。其基本思想是，模拟由一些基因串控制的生物群体的进化过程，把该过程的原理应用到搜索算法中，以提高寻优的速度和质量。此算法的搜索过程不直接作用在变量上，而是在参数集进行了编码的个体，这使得遗传算法可直接对结构对象（图像）进行操作。整个搜索过程是从一组解迭代到另一组解，采用同时处理群体中多个个体的方法，降低了陷入局部最优解的可能性，并易于并行化。搜索过程采用概率的变迁规则来指导搜索方向，而不采用确定性搜索规则，而且对搜索空间没有任何特殊要求（如连通性、凸性等），只利用适应性信息，不需要导数等其他辅助信息，适应范围广。</p><p>遗传算法擅长于全局搜索，但局部搜索能力不足，所以常把遗传算法和其他算法结合起来应用。将遗传算法运用到图像处理主要是考虑到遗传算法具有与问题领域无关且快速随机的搜索能力。其搜索从群体出发，具有潜在的并行性，可以进行多个个体的同时比较，能有效的加快图像处理的速度。但是遗传算法也有其缺点：搜索所使用的评价函数的设计、初始种群的选择有一定的依赖性等。要是能够结合一些启发算法进行改进且遗传算法的并行机制的潜力得到充分的利用，这是当前遗传算法在图像处理中的一个研究热点。</p><h4 id="7-基于聚类的图像分割"><a href="#7-基于聚类的图像分割" class="headerlink" title="7. 基于聚类的图像分割"></a>7. 基于聚类的图像分割</h4><p>基于聚类的图像分割将图像分割问题转化为模式识别的聚类分析。  K均值、模糊C-均值算法(Fuzzy C-Means,简称FCM)是最常用的聚类算法。</p><p>K均值算法先选K个初始类均值，然后将每个像素归入均值离它最近的类并计算新的类均值。迭代执行前面的步骤直到新旧类均值之差小于某一阈值。</p><p>模糊C均值算法是在模糊数学基础上对K均值算法的推广，是通过最优化一个模糊目标函数实现聚类，它不像K均值聚类那样认为每个点只能属于某一类，而是赋予每个点一个对各类的隶属度，用隶属度更好地描述边缘像素亦此亦彼的特点，适合处理事物内在的不确定性。利用模糊C均值(FCM)非监督模糊聚类标定的特点进行图像分割，可以减少人为的干预，且较适合图像中存在不确定性和模糊性的特点。</p><p>聚类方法应注意几个问题：</p><ol><li>聚类的类数如何确定。</li><li>怎样确定聚类的有效性准则。</li><li>聚类中心的位置和特性事先不清楚时，如何设置初始值。</li><li>运算的开销。</li></ol><p>并且FCM算法对初始参数极为敏感，有时需要人工干预参数的初始化以接近全局最优解，提高分割速度。另外，传统FCM算法没有考虑空间信息，对噪声和灰度不均匀敏感。</p><p>参考:<br><a href="https://zhuanlan.zhihu.com/p/30732385" target="_blank" rel="noopener">图像分割 传统方法 整理</a><br><a href="https://www.jishuwen.com/d/2Ddq" target="_blank" rel="noopener">最全综述 | 图像分割算法</a><br><a href="https://juejin.im/entry/5bea5e7ef265da61553a5e28" target="_blank" rel="noopener">图像分割技术介绍</a><br>《计算机视觉：模型、学习和推理》</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Segmentation </tag>
            
            <tag> Conventional method </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 LiTS Winning algorithmic properties</title>
      <link href="/2019/08/04/Medical%20Image/2017%20LiTS%20Winning%20algorithmic%20properties/"/>
      <url>/2019/08/04/Medical%20Image/2017%20LiTS%20Winning%20algorithmic%20properties/</url>
      
        <content type="html"><![CDATA[<h4 id="1-U-Net-based-architecture"><a href="#1-U-Net-based-architecture" class="headerlink" title="1. U-Net-based architecture"></a>1. U-Net-based architecture</h4><h4 id="2-Cascaded-approach"><a href="#2-Cascaded-approach" class="headerlink" title="2. Cascaded approach"></a>2. Cascaded approach</h4><h4 id="3-Residual-connections"><a href="#3-Residual-connections" class="headerlink" title="3. Residual connections"></a>3. Residual connections</h4><h4 id="4-Ensemble-learning"><a href="#4-Ensemble-learning" class="headerlink" title="4. Ensemble learning"></a>4. Ensemble learning</h4><ul><li><p><strong>train 3 different U-Net derived networks on resampled axial, sagittal and coronal slices, respectively for liver segmentation and combines them via the aforementioned small 3D network.</strong>This allows each network to view lesions and learn distinguishing features along a different coordinate axis and then combine its individual knowledge with the other networks to yield a more holistic multi axes aware classifier. </p></li><li><p><strong>employ a shape-invariant model fusion approach by providing multiple network with differently rescaled input data and then averaging the results.</strong> This allows to more easily detect formerly small lesions in its enlarged form by one network while<br>simultaneous letting another network identify the exact image boundaries in images without additional resize-induced blurring. </p></li><li><p>averaging over results from the four flip orientations as well as a slightly different model<br>architecture. </p></li><li><p><strong>5-fold cross validation combined with a bagging ensemble technique<br>to fuse the results of 6 individual models.</strong></p></li><li><p>Zou as MICCAIs winning method relies heavily on ensemble learning using it in both the liver segmentation and the tumor segmentation step as the first part and second part of a cascaded approach. Each of these two parts are further divided into two subparts, one of which using 2D slice-wise and the other 2.5D stack-wise inputs to train multiple networks each. These networks are each implemented with different architecture such as a varying depth, width, number of feature maps or the existence of additional drop-out layers and combine to form one segmentation mask via intersections. The two intersection masks of the slice-input networks and the stack-input networks are the fused via a union operation to generate the final liver or tumor segmentation mask of the cascaded pipeline. This multi-layered ensemble techniques not only allows to detect a large number of different features due to the sheer number of different networks but also applies them at varying levels of granularity along the segmentation pipeline while simultaneously increasing its flexibility by employing different fusion techniques.</p><h4 id="5-Pre-processing"><a href="#5-Pre-processing" class="headerlink" title="5. Pre-processing"></a>5. Pre-processing</h4></li><li><p><strong>HU-value clipping</strong> to only consider a range of relevant liver-related values.</p></li><li><p><strong>data normalization</strong> to simplify the networks learning task by providing more easily comparable images as input.</p></li><li><p><strong>filtered out very small lesions</strong> as noise before training to prevent the network from learning non-realistic tumor structures and potentially produce many false positives.</p></li><li><p>resampled input images for liver segmentation to a fixed resolution of 1x1x2.5mm since the liver region is not as susceptible to resizing induced blurring as lesions due to its size and the network can therefore profit from the easier comparability of inputs due to their homogeneous resolution.</p></li></ul><h4 id="6-Higher-dimensionality"><a href="#6-Higher-dimensionality" class="headerlink" title="6. Higher dimensionality"></a>6. Higher dimensionality</h4><h4 id="7-Data-augmentation"><a href="#7-Data-augmentation" class="headerlink" title="7. Data augmentation"></a>7. Data augmentation</h4><ul><li><p><strong>standard geometric transformations</strong> such as shifting, flipping, rotating, scaling or cropping.</p></li><li><p><strong>elastic deformation</strong></p></li><li><p><strong>random contrast normalization</strong> to each images input channels.</p></li></ul><h4 id="8-Loss-function"><a href="#8-Loss-function" class="headerlink" title="8. Loss function"></a>8. Loss function</h4><ul><li><p><strong>Weighted cross entropy</strong> to mitigate the effects of high class imbalance.</p></li><li><p><strong>Dice loss and Jaccard loss</strong> allows the network to directly optimize its parameters according to the actual final evaluation metric  and thereby also implicitly incorporate class imbalance in its learning process without the explicit introduction of class specific weights other class re-balancing techniques. The Jaccard loss has the additional benefit that its corresponding metric fulfills the triangle inequality and is therefore considered a true distance metric.</p></li><li><p><strong>hard pixel mining learning</strong> and only uses the 10% of voxels with the highest misclassification rate in loss calculations to force the network to focus on minimizing the error of the up until that point most difficult voxels.</p></li></ul><h4 id="9-Activation-function"><a href="#9-Activation-function" class="headerlink" title="9. Activation function"></a>9. Activation function</h4><ul><li>Han’s winning ISBI method applied <strong>PReLU</strong> activation instead of the more common ReLu allowing the network to also learn the optimal leakage coefficient of the activation function.</li></ul><h4 id="10-Post-processing"><a href="#10-Post-processing" class="headerlink" title="10. Post-processing"></a>10. Post-processing</h4><h6 id="noisy-data"><a href="#noisy-data" class="headerlink" title="noisy data"></a>noisy data</h6><ul><li><p><strong>removing lesions as noise</strong> if they have relatively large size in one slice but simultaneously a very small size in an adjacent slice. </p></li><li><p><strong>remove or cut off lesions</strong> not fully contained within the liver boundaries. </p></li><li><p><strong>connected component labeling</strong></p><h6 id="incorrect-holes"><a href="#incorrect-holes" class="headerlink" title="incorrect holes"></a>incorrect holes</h6></li><li><p><strong>filling lesion hole</strong> that relies on the lesion volumes of adjacent slice (based on the observasion that lesion size will increase for each slice starting from the first lesion containing slice until the maximum lesion size slice and then decrease in a similar way until no lesion remains).</p></li><li><p><strong>morphological filtering</strong></p></li></ul><h6 id="small-lesion-segmentation"><a href="#small-lesion-segmentation" class="headerlink" title="small lesion segmentation"></a>small lesion segmentation</h6><ul><li><strong>tackle small lesion detection</strong>by implementing a special residual network with small lesion containing patches as input and remove lesions with less than 40% overlap.</li></ul><h6 id="filtering-false-positives"><a href="#filtering-false-positives" class="headerlink" title="filtering false positives"></a>filtering false positives</h6><ul><li><p><strong>Random Forest classifier</strong></p></li><li><p>calculating the maximal lesion probability value of a connected lesion component and removing the lesion if this value is below an empirically determined threshold of 0.8.</p></li></ul><p>参考：<br>Summary: The Liver Tumor Segmentation Benchmark (LiTS), Patrick Bilic et al. 201901 <a href="https://arxiv.org/abs/1901.04056" target="_blank" rel="noopener">(arxiv)</a></p>]]></content>
      
      
      <categories>
          
          <category> Medical Image </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LiTS </tag>
            
            <tag> Winning methods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRF as RNN</title>
      <link href="/2019/07/15/Knowledge/CRF%20as%20RNN/"/>
      <url>/2019/07/15/Knowledge/CRF%20as%20RNN/</url>
      
        <content type="html"><![CDATA[<p><strong>条件随机场(CRF )的概率函数</strong>为$P(X = x|I) = \frac{1}{z}\exp ( - E(x|I))$</p><p><strong>CRF 的能量函数为</strong>$E(x) = \sum\limits_i{\psi_u}({x_i})+\sum\limits_{i&lt;j}{\psi_p}({x_i},{x_j})$<br>其中第一项为数据项，第二项为平滑项，其定义为若干个高斯函数的和，如下公式所示。数据项约束每个像素尽可能分类正确，平滑项约束相邻像素之间的灰度值差异要尽可能小。<br>$$<br>{\psi_p}({x_i},{x_j}) = u({x_i},{x_j})\sum\limits_{m=1}^M{\omega ^{(m)}}{k^{(m)}}({f_i},{f_j}))<br>$$<br><img src="/medias/pic_md/Knowledge/CRFasRNN3.png" alt><br><img src="/medias/pic_md/Knowledge/CRFasRNN2.jpg" alt=" A mean-field iteration as a CNN"><br>参考：<br><a href="https://blog.csdn.net/taigw/article/details/51794283" target="_blank" rel="noopener">CRF as RNN的原理及Caffe实现</a><br><a href="https://www.cv-foundation.org/openaccess/content_iccv_2015/html/Zheng_Conditional_Random_Fields_ICCV_2015_paper.html" target="_blank" rel="noopener">2015_Conditional Random Fields as Recurrent Neural Networks_ICCV</a></p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRF </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水平集-Level Set</title>
      <link href="/2019/07/10/Knowledge/%E6%B0%B4%E5%B9%B3%E9%9B%86Level%20Set/"/>
      <url>/2019/07/10/Knowledge/%E6%B0%B4%E5%B9%B3%E9%9B%86Level%20Set/</url>
      
        <content type="html"><![CDATA[<h2 id="水平集（Level-Set）"><a href="#水平集（Level-Set）" class="headerlink" title="水平集（Level Set）"></a>水平集（Level Set）</h2><h4 id="曲线演化的直观解释"><a href="#曲线演化的直观解释" class="headerlink" title="曲线演化的直观解释"></a>曲线演化的直观解释</h4><p>   假设$X(t)$表示一平面曲线，$T$表示切线，$N$表示法线。因为切向量$T$和法向量$N$互相垂直，所以平面上任何曲线都可以用曲线上任何一点的$T$和$N$的线性组合来表示：<br>$$\frac{\partial X}{\partial t} = \alpha T + \beta N$$<br>   如果只考虑几何形状的变化，则曲线变化只跟法线方向的变化有关系:<br>$$\frac{\partial X}{\partial t} = \beta N$$<br>   假设我们有一个3D surface和一个2D plane，如下所示，<br>Knowledge/<img src="/medias/pic_md/Knowledge/LevelSet1.png" alt="Level Set1"><br>   我们通过surface与plane的关系来描述curve（surface与plane的交线），通过调整surface来实现curve的变化，这就是level set的基本思想。<br><img src="/medias/pic_md/Knowledge/LevelSet2.png" alt="Level Set2"></p><h4 id="Level-set-的数学定义及运动表示"><a href="#Level-set-的数学定义及运动表示" class="headerlink" title="Level set 的数学定义及运动表示"></a>Level set 的数学定义及运动表示</h4><p>   假设隐函数$φ(X(t),t)$表示一个高维空间的surface，程其在低维空间上的接触面为$φ(X(t),t)=0$<br>   我们按如下方式跟踪surface和curve的演化过程。<br>$$\frac{\partial X}{\partial t} = V(k)N$$<br>其中,$V(k)$称为<strong>速度方程</strong>，$k$表示曲率，$t$表示时间，$N =  - \frac{\nabla \phi }{\left| {\nabla \phi } \right|}$表示surface的内法线。<br>然后对surface对t进行级联求导，<br>$$\phi (X(t),t) = 0$$<br>$$\Rightarrow \nabla \phi {X_t} + {\phi _t} = 0$$<br>$$\Rightarrow {\phi _t} = V(k)\left| {\nabla \phi } \right|$$<br>   由此可知，给定初始的surface$ φ(X(t),t)$以及速度方程$V(k)$，便可以得到任意时刻的surface $φ$。</p><h4 id="Level-Set的数值解法"><a href="#Level-Set的数值解法" class="headerlink" title="Level Set的数值解法"></a>Level Set的数值解法</h4><p>   熟知机器学习同学可能会发现，surface φ的演化过程酷似神经网络中的参数利用梯度下降更新过程。<br>$$\frac{\partial {\phi _t}}{\partial t} = \frac{\phi (X(t),t + \Delta t) - \phi (X(t),t)}{\Delta t}$$<br>$$\Rightarrow \phi (X(t),t + \Delta t) = \phi (X(t),t) + {\phi _t}\Delta t$$<br>$$\Rightarrow \phi (X(t),t + \Delta t) = \phi (X(t),t) + V(k)\left| {\nabla \phi } \right|\Delta t$$<br>$$\Leftrightarrow {\phi ^{t + \Delta t}} = {\phi ^t} + V(k)\left| {\nabla \phi } \right|\Delta t$$<br>参考：<br>[1] <a href="https://wiseodd.github.io/techblog/2016/11/05/levelset-method/" target="_blank" rel="noopener">“Level Set Method Part I: Introduction”</a></p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Level Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业季有感</title>
      <link href="/2019/06/26/Diary/2019-06-26-%E6%AF%95%E4%B8%9A%E5%AD%A3%E6%9C%89%E6%84%9F/"/>
      <url>/2019/06/26/Diary/2019-06-26-%E6%AF%95%E4%B8%9A%E5%AD%A3%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>第一次遇到BIT的毕业季，颇为壮观，因此感觉异常新鲜和惊奇，毕业竟然可以和入学有着相似的热闹，就像洗礼和葬礼有着相似的仪式感，虽然昭示着截然不同的起点和终点；还有生命中段的婚礼，人生遇到新鲜事，总是可喜可贺的事情。</p><blockquote><p>成长，总在不停地和过去告别，同时去迎接新鲜的未来。</p></blockquote><p> 若想对过去少些遗憾和抱歉，对未来多些确定和希冀。最重要的是确保每时每刻都有一个充实当下。</p><blockquote><p>你认真走过的一点一滴，会让你和不得不离开的昨天有一个体面的告别，和随即到来的明天有个无所畏惧的拥抱。<br>无论何时，无论何地，不遗余力，用心努力。</p></blockquote><p> 要知道，已经走过的，无法回头，对错与否，如果不能化作前进的动力，一切毫无意义。<br> 当下和未来的每一段时光，也会在转瞬即逝中成为过去，所以，在没有机会后悔的世界里，聪明的你要学会和过去和解，选择最聪明的做法：走好当下。</p><ul><li>我希望，在见证别人走进又离开的过程中，你可以懂得珍惜当下的意义。</li><li>我希望，明年或者后年，你可以用自己的努力，去换来一个值得拥抱的未来，让过去的一段时光收获应有的结局。</li><li>我知道，不管未来面对怎样的Next Step，你仍会紧张，仍会忐忑不安，但是没关系的，一个值得拥抱的未来会给你微笑告别过去的勇气，会给你一个崭新的未来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heartbeats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dust Page</title>
      <link href="/2019/01/09/Diary/2020-1-9-%E5%B0%98%E5%B0%81%E5%BE%80%E4%BA%8B/"/>
      <url>/2019/01/09/Diary/2020-1-9-%E5%B0%98%E5%B0%81%E5%BE%80%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="The birthday of Cerry and Sunry." />    <label for="pass">The birthday of Cerry and Sunry.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Miss Scarecrow </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
