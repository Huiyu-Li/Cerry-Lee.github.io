<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>法国记忆</title>
      <link href="/2021/09/14/Diary/2021-9-14-%E6%B3%95%E5%9B%BD%E8%AE%B0%E5%BF%86/"/>
      <url>/2021/09/14/Diary/2021-9-14-%E6%B3%95%E5%9B%BD%E8%AE%B0%E5%BF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>谨以此文为天地，记录我在法国的点点滴滴，也感恩这些经历，像长居夜空的远辰，教会我如何更好地生活。</p><p>我感恩此生的幸运，也感谢自己的执着，能让我在不算晚的年纪里，换一个国度，经历一段全新的生活。不管未来阴晴圆缺，我只知道，我会成长很多，会懂得保护自己，温暖他人。</p></blockquote><h2 id="20191001"><a href="#20191001" class="headerlink" title="20191001"></a>20191001</h2><p>今天抱回了一把尤克里里，截止到目前，被子和尤克里里，两个可以曲线相遇的载体，都被我抱回了家。哈哈，今天又去团长家蹭了一顿饭。<br>回来的马路上，夜月星空，光影婆娑，掏出小琴，当即开了一场音乐party，也是够可以的。当然，蚊子也发现，有音乐助兴，咬人都格外带劲。<br>此后的许多记忆，照片和细节，适合装进另一个channel, 等到阳光满怀的某一天，送给故事的主角。<br>如果你们发现我零度的外表下依然有颗温热的心，那是因为有人予我温暖呵护，有人替我遮风挡雨。如果你发现我时常予人玫瑰，那只不过是我借花献佛，在你承接温暖的同时，不让忘记对照顾我的人说一声感谢。</p><h2 id="20190930"><a href="#20190930" class="headerlink" title="20190930"></a>20190930</h2><p>今天，送走了Jaume（我的第一位同办公室的同事），而我加入了一个新的大家庭。离别难免会有些伤感，因为Jaume实在太好了。哈哈，我的手机里还留了一张这位暖男的帅照。<br>回想一下从初见到熟悉，这一个月发生了好多变化。我刚来的时候，右手边的工位是空的，但我知道是有人存在的。突然有一天，工位的主人出现了，除了say hello, 并没有太多交流。因为初到陌生的世界，我似乎还不太适应。后来某一天，我对Jaume说，My boss is so busy。。。Jaume教会了我看老板的calendar。再后来，师姐说，Jaume人很好，我对师姐的信任，以及师姐对Jaume的认可，让我对Jaume的信任瞬间攀升。Jaume也的确帮过我很多，我在Jaume身上看到的那份耐心，让我学到很多。Santi是Jaume的好哥们，经常过来找Jaume喝咖啡。刚开始，我总是say no， 感谢Santi不厌其烦地邀请，让我很快融入了这个世界。虽然Santi的幽默我还是只能搞懂一半，但stone的故事真的把我给笑懵了。一转眼之间，我们三个在露台上喝咖啡的场景成了暖阳下一去不复返的光影。还记得在师兄的答辩聚会上，Jaume现场给大家来了个高阶汉语。全场惊呆，嗯，原来你是这样的Jaume。</p><p>晚上去打球了，脱胎换骨，唯有运动。<br>我好久没有这样剧烈运动过了，也好久没有这样玩的这样开心了。<br>虽然只有一场球的缘分，和法国小姐姐的遇见都充满了美好。</p><h2 id="20190929"><a href="#20190929" class="headerlink" title="20190929"></a>20190929</h2><p>昨天师兄的毕业晚会，今天师姐的华丽亮相。<br>师兄说：“看你师姐这法语，就和法国人一样”。我这文盲，着实羡慕。<br>实验室有师兄师姐一唱一和，每天无限欢乐。</p><h2 id="20190925"><a href="#20190925" class="headerlink" title="20190925"></a>20190925</h2><p>生命中有太多可遇不可求的遇见，就像蛛网晨露，仅在清晨的那一刻，阳光正好，白露未晞，沉寂了一夜的蛛网，裹满了闪闪发光的璎珞。<br>我在等待所有不期而遇，也在和所有美好双向奔赴。<br>今天是第一个没有宅在家里的周末，Not a Gloomy Sunday, It’s a Wonderful Saturday.<br>早上，爱乐乐团团长开车载我去尼斯，从Nick Factory Store到CAP3000，沿途经过蔚蓝色海岸。那一瞬间，我想有辆车，每周带好友去看海。<br>逛街最开心的两件事，是帮团长找到了心仪的外套，而我抱走了仅有的一双粉色鞋子。看，买东西，从来都要靠缘分。<br>听团长将乐团的故事，我满是惊讶，一个人可以和自己的爱好一起，把平凡的日子过成诗，大概就是这个样子。往昔用心走过的所有时光，遇见的所有人，这一生，都会是难以忘怀的。<br>回到家，看到团长做饭，是我货真价实的惊呆时刻。<br>葱姜花椒熟油，漏斗过滤，我此刻还能记得那份香气。</p><p>师姐说下午炖好羊排等我们回来，但我们没有安排好时间，错过了师姐的羊排。师姐送上来了两个蒜香鸡翅和尤克里里的调音器。师姐和团长，每一句话都是满满的段子。<br>感谢师姐替我想到了所有的细节，能在新的开始里，遇见师姐，是我此前无法奢求的幸运。<br>团长说，照顾不好师姐的学妹，都过不了师姐这一关。师姐对我这么好，连团长都嫉妒了。</p><p>我想说，我好久没有遇到这样舒服的聊天了。</p><h2 id="20190921"><a href="#20190921" class="headerlink" title="20190921"></a>20190921</h2><p>我本以为今天会过的很惨。恰逢团圆节，而我独自一个人在异乡，你说凄凉不凄凉？<br>果不其然，早上第一件事，是面条煮了一半，遭遇了停电。我很聪明地打开了门口的电箱，却发现开关全是开着的，懵了。<br>早饭没吃，上学去了。这一个中秋，注定难以忘怀。<br>下午，看到师姐发的邮件，很是感动。我没想过今天可以吃到月饼，更何况，是如此好吃的月饼。<br>阳光午后，初秋佳节，美味相约。<br>我知道也许常被细节感动的我总是太过认真，也许我的感恩一文不值，但我贪恋把美好留在心中的温暖，我总相信是这些细小的美好，装点了宜居世界，温暖了冰封的心灵。</p><p>也是下午，开小差点开了“爱乐乐团”团长的朋友圈，很独特，很执著，很是震撼。在这个摇滚年代里，已经很难遇见执著而又遵从自己内心的人了。能用心喜欢一件事，有一片心灵的净土，是一件很幸福的事情。但我更相信，是一个把人生活成自我的人，才更有能量。当然，我对人家的了解并不深刻，以上也只是我的感受。</p><blockquote><p>我也曾固执地写过这样的话：我感恩遇到的每一个人，经历的每一件事，受到的每一点触动。<br>也许事情的本来面目并非我所感受到的模样，但它在我心底留下的印记，弥足珍贵。<br>我不想细究事情本来的样子，也不想理解背后的错综复杂，它曾到访过我的生命，并留下些许动动，给我带来改变的缘由，让我拥有许多新鲜感受，抑或是重新起步的勇气，已经足够。</p></blockquote><p>我不怕犯错，也不怕被欺骗，我记不住不愉快，只能记得住温暖，哪怕现实打碎了我的水晶球，我还会再住进新的童话，你说我执迷不悟也好，说我年少无知也罢，我喜欢温暖与阳光，贪恋美好与幸福，我不在乎对与错，只在乎明天过的好不好。</p><p>我想说，不要轻易放弃一个留下美好的机会，你的一点温暖，也许足以照亮整个冬天。如果你也喜欢被爱，被温暖，要相信，很多人都喜欢，留一份美好，大家可以相互取暖。</p><h2 id="20190915"><a href="#20190915" class="headerlink" title="20190915"></a>20190915</h2><p>听到法语版的《追忆似水年华》，从前奏，到正文，我真的沉醉了。<br>只可惜，目前的我还一句也听不懂，只能当作催眠曲。<br>不过，为了一本书，学会一门新的语言，这种冲动的带来的意外，我完全可以做到。</p><p>20190919，今天第一次下山，山下好热闹。好想在某个夏夜里，去海边吹吹晚风，或在某个夕阳下，去街角散步。<br>有人说，未来找工作，必须要学好法语，我突然感觉自己做不到，面对未来，有些焦虑，也有些畏惧。<br>但转念一想，我可以为了看《似水年华》，而把法语学得很棒。没有那么多功利心，内心总会充满很多勇气和自信。所以呀，从小到大沉迷小说里的虚幻世界，也许就是太渴望现实中追寻不到的温暖阳光了。戒不掉的习惯，是疗伤的养心殿。</p><h2 id="20210914"><a href="#20210914" class="headerlink" title="20210914"></a>20210914</h2><p>想开辟这份记录的缘由，是20210914这一天，碰巧赶上毕业师兄的答辩。老板在师兄的presentation结束之后，几乎一页一页地和师兄校对PPT. 从来只在乎细节地我，对此格外感触深刻。我喜欢老板这份认真的态度！！反观自己也一样，不管是做哪一件事，既然选择了，就认真地走下去吧，要不然，浪费的可是自己地时光呢。</p><h2 id="20210910"><a href="#20210910" class="headerlink" title="20210910"></a>20210910</h2><p>第一次参加 Jounal Club, 会议结束末尾，NA带头鼓掌，一如既往地呆萌，身处大boss的段位，绝对是暖男的剧本。<br>我第一被他萌到是面试的时候，被问到法签大概多久可以办好，一无所知的我随口说了句：six month. NA立马摸了摸自己的小心脏。<br>再次被萌到是走廊里遇见这位大忙人，很不乐意地带上口罩，出门去接水。</p><h2 id="20210909"><a href="#20210909" class="headerlink" title="20210909"></a>20210909</h2><p>20210909，上午是Newcomers Seminar。I‘m completely new! No frends, no aquiantance, so when I show myself at the seminar, lonely makes my feel uncomfortable. but it just ok, let’s try to talk with someone.<br>我转头看了一下右边的男孩，他似乎和我一样形单影只，无所适从。他是我认识的第一个newcomer, Teo. 事实证明，他是一位非常可靠的队友， I feel so glad to meet him.<br>Teo会说法语，英语和一点spanish, 喜欢做饭，音乐和政治。我们都想当老师，都喜欢badminton。<br>最刺激的部分是team quiz，我们的名次除了稳居第一，也会上下浮动。如果你最近参加过team activity，你一定记得作为一个team荣誉与共的幸福和激动。最wonderful的部分，是我们最终赢得了冠军，It incredible and unbelivable, right? We need to foot on the stage! Teo从手机上调出了一首胜利的歌曲，瞬间嗨翻全场。<br>每个winners的礼物抱在怀中，今天我们四个萍水相逢的小伙伴，是全场最亮的仔！</p><p>下午，和HR LV见面。很显然，她清楚地记得我们地约定，当我在打印室遇见她地时候，她已经知道我在找她，这种被确认的感觉让人很舒服。<br>初次见面，她问我时候记得她。当然印象深刻，因为她在我的赴法行程中帮过我很多，让我很是感激。<br>不到一个小时的聊天，她的条理，细致和耐心让我印象深刻。逐条地过我合同，备忘录，耐心地解答我的疑问，反复核对。这也许就是法式工作的温暖之处吧，慢工出细活，不急躁，免除错。像我这样的急性子，这绝对是锻炼心智的好地方。</p><h2 id="20210907"><a href="#20210907" class="headerlink" title="20210907"></a>20210907</h2><p>周一没有逮到老板，周二逮了一上午，近乎崩溃。我发现老板的电话，可以打到你永远等不到结束。Crazy!<br>还好老板在会议结束后找了我，我们利用10分钟的空隙，把我所有的疑问过了一遍。这是我对老板好感攀升的转折点，一个人在学术思维上的清晰和独特，最令人震撼。</p><h2 id="20210903"><a href="#20210903" class="headerlink" title="20210903"></a>20210903</h2><p>第一次见到 Jauma, 和我同office的小伙伴，Spanish，热心，开朗，细致。教会我许多最基本的生活知识，充卡，看老板的日程，租房，关窗。。。<br>很幸运能认识一位法国小能手。<br>Jauma形影不离的小伙伴Sandiago，是个开朗幽默的大男孩，是师兄卸任以后最后Chairman特质的人，喜欢串门，喜欢打招呼，喜欢微笑。从实验室门口骑自行车到校门，碰到几位熟人，就可以停下几次，或者索性唠嗑结束再启程。</p><h2 id="20210902"><a href="#20210902" class="headerlink" title="20210902"></a>20210902</h2><p>第一次见到师兄师姐，幸运的是三届同盟了。<br>师兄是Chairman, social达人，乐于助人，活跃气氛。以行云流水的速度帮我约医生，真的非常感谢。<br>师姐陪我跑步，送我回家，陪我逛超市，教会我许多省钱技能。<br>能在遥远的异乡遇见你们，难得而又幸运。</p><h2 id="20210830"><a href="#20210830" class="headerlink" title="20210830"></a>20210830</h2><p>第一次见到老板真人，令我印象深刻地当然是被夸的那句，你英语很好。哈哈，just ok. 不过被夸当然会心情很好。<br>老板 just show me around, 很明显，他很少逛校园，看到新的咖啡亭，像发现了新大陆。<br>20210902，第一天上班，再次见到老板，很耐心地帮我组装电脑。<br>“You don’t want to jont me for lunch?” 这样的邀请我哪好意思拒绝，自然是follow了。<br>先是去accept office拿了工卡。但我身上没带钱，老板又陪我回实验室去了钱包。但意外的是，我的卡充不了钱。更意外的是，餐厅不收现金。所以我的第一顿饭，折腾来，折腾去，还是老板请客。老板很official地说了一句，You need to pay me back. Oh, my god, 我惊呆了。<br>不过到现在，我也没找到机会Pay back，哈哈哈，先欠着吧，某个良辰吉日再说。</p><p>第一个显示器没反应，第二个显示器用了一周就坏了，第三个显示器还没用足5分钟，就冒烟了。。。第四个显示器，是个小方屏。but it’s just Ok, I don’t care. Maybe i will have a new one in other days.<br>老板依旧亲历亲为，很有耐心，让我学到很多。能想到把所有钥匙拿出来，试一遍，这种耐心也不是一般人会有的。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NICE to meet you</title>
      <link href="/2021/08/21/Diary/2021-8-21-NICE-to-meet-you/"/>
      <url>/2021/08/21/Diary/2021-8-21-NICE-to-meet-you/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Your license plate number." />    <label for="pass">Your license plate number.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米10S Google Play 安装手记</title>
      <link href="/2021/05/06/Knowledge/2021-5-6-GooglePlay%E5%AE%89%E8%A3%85/"/>
      <url>/2021/05/06/Knowledge/2021-5-6-GooglePlay%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要为了帮助出国旅行或读书的小伙伴。<br>本文虽然很短，但我却被一张Google Map虐了3h。。。我太难了。。。</p></blockquote><h2 id="出国流量问题"><a href="#出国流量问题" class="headerlink" title="出国流量问题"></a>出国流量问题</h2><p>出国的旅途中，建议使用<strong>小米全球上网</strong>。<br>到达目的地后，买当地的电话卡。</p><h2 id="Google-Play"><a href="#Google-Play" class="headerlink" title="Google Play"></a>Google Play</h2><p>虽然网上有很多教程，但基本原理就是安装 <strong>Google 服务框架、Google Play Service、Google Play 商店</strong>三件套。<br>小伙伴们遇到最多的问题大概是，小米应用商店可以直接下载Google Play，但是打开之后却是<strong>无法连接服务器</strong>。<br>明明我的手机&gt;设置&gt;（搜索）<strong>谷歌基础服务</strong>已经打开了呀？<br>明明我的<strong>网络</strong>没有问题呀？<br>可怎么就是<strong>无法连接服务器</strong>呢！！！</p><h4 id="Step1-手机也需要VPN支持"><a href="#Step1-手机也需要VPN支持" class="headerlink" title="Step1: 手机也需要VPN支持"></a>Step1: 手机也需要VPN支持</h4><p>推荐使用蓝灯安卓版，有免费流量。</p><h4 id="Step2-Google服务框架-Google-Play-Service-Google-Play-Store"><a href="#Step2-Google服务框架-Google-Play-Service-Google-Play-Store" class="headerlink" title="Step2:  Google服务框架+ Google Play Service+ Google Play Store"></a>Step2:  Google服务框架+ Google Play Service+ Google Play Store</h4><p>强烈安利这个<a href="https://github.com/hideuvpn/android-google-play-store" target="_blank" rel="noopener">网址</a></p><h4 id="Step3-手机重启，登录Google-Play"><a href="#Step3-手机重启，登录Google-Play" class="headerlink" title="Step3: 手机重启，登录Google Play"></a>Step3: 手机重启，登录Google Play</h4><p>现在，就可以从Google Play下载应用了，比如，Google Map。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google Play </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unconditional Love</title>
      <link href="/2021/04/26/Diary/2021-4-26-UnconditionalLove/"/>
      <url>/2021/04/26/Diary/2021-4-26-UnconditionalLove/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="The birthday of Cerry." />    <label for="pass">The birthday of Cerry.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
            <tag> Fiction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流体力学</title>
      <link href="/2021/01/20/Knowledge/2021-1-20-%E6%B5%81%E4%BD%93%E5%8A%9B%E5%AD%A6/"/>
      <url>/2021/01/20/Knowledge/2021-1-20-%E6%B5%81%E4%BD%93%E5%8A%9B%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="流体运动规律"><a href="#流体运动规律" class="headerlink" title="流体运动规律"></a>流体运动规律</h1><p>即流体流动所遵循的物理规律，它们是建立流体力学方程组的依据。<br>　　<strong>质量守恒定律</strong>　确定的流体，其质量在运动过程中不变。反映质量守恒定律的方程都称为连续性方程。<br>　　<br>　　<strong>动量变化定律 （牛顿运动定律）</strong>　确定的流体，其总动量变化率等于作用于其上的体力和面力的总和。<br>　　<br>　　<strong>能量守恒定律 (热力学第一定律)</strong>　确定的流体，其总能量（包括动能和内能）变化率等于外力（包括体力和面力）单位时间所做的功与单位时间自外部给予流体的热量之和。<br>　　<br>　　<strong>热力学第二定律 **　存在状态函数熵，用它可指出可逆运动过程的条件以及不可逆过程的方向。在可逆绝热过程中熵保持不变；而不可逆绝热过程只能朝熵增加的方向变化。<br>　　<br>　　**傅里叶传热定律</strong> 　热流密度矢量与温度梯度大小成正比而方向相反。</p><h1 id="流体力学的三大基本方程"><a href="#流体力学的三大基本方程" class="headerlink" title="流体力学的三大基本方程"></a>流体力学的三大基本方程</h1><p><strong>连续方程</strong><br><strong>动量方程</strong><br><strong>能量方程</strong><br>三大基本方程遵循着对应的守恒原理，分别为质量守恒、动量守恒和能量守恒。</p><p>参考：</p><p><a href="http://gr.xjtu.edu.cn/c/document_library/get_file?p_l_id=21242&folderId=29549&name=DLFE-2167.pdf" target="_blank" rel="noopener">第二章流体力学的基本方程 - 西安交通大学</a></p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fluid Mechanics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给24岁的自己</title>
      <link href="/2020/04/27/Diary/2020-4-27-%E5%86%99%E7%BB%9924%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
      <url>/2020/04/27/Diary/2020-4-27-%E5%86%99%E7%BB%9924%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<p>再过一个多月，我就要24岁了，或者已经25了。如果我能活到50岁，刚好一半，可如果我能活到100岁呢，才1/4那么长。<br>显然，现在已经不是第一次看懂言情剧的年代了，那时候的我才11岁，刘品言17岁，整个世界里的大人们都很大，而我也很渴望长大，希望自己不用走太久，就能见到25岁的自己。那时候的我以为，25岁的自己会像山东青年杂志的封底女郎一样潇洒，或许只是一个自由撰稿人，但起码经济独立哦，我可以去买好多书，或者去海边吹吹风，看一看书本里的世界。<br>可是我真的要25喽，开始有些害怕，因为我还是很喜欢追剧，只不过当年陪我长大的威廉们，都已经退出荧屏了，取而代之的，是比我还小的他们。93还好，96也凑合，97，98就太可怕了。突然感觉数字真的好刺眼，19，20已经成了我无法企及的字眼。<br>但是，我还是很会安慰自己。</p><blockquote><p>不要害怕对数字敏感，你才24岁，每个10年以后的你都会艳羡这样的今天：原来10年前的我是如此年轻。每个今天都是10年以后的昨天，所以你一直都很年轻。</p></blockquote><blockquote><p>当你看了一部好电影，读了一本好书，遇见了一个好人，不要因为太美好而害怕失去之后的伤感，勇敢去寻找下一次遇见。</p></blockquote><blockquote><p>你会慢慢懂得，世间无所谓永恒，没有哪一次陪伴长达终生，你要勇敢说再见，也要学会说你好。生命本没有意义，所有未来充满未知和期待，白纸上的意义依靠你去装点。万事别苛求完美，完美的背后是死亡。</p></blockquote><blockquote><p>欣赏一部新电影，打开一本新书，认识一位陌生人，每一次新的遇见，都需要用时间去培养感情，你的付出，决定了一段感情的深浅。</p></blockquote><blockquote><p>生命很短，如果可以遇见照亮心灵的萤火，就不要宁静地守候漆黑的夏夜。当然，你也要学着去做这样的萤火，点亮别人的夏夜。</p></blockquote><blockquote><p>永远不要把成功定义为人生的奋斗目标，你要去做自己最喜欢做的事。那些我们所追捧的成功人士，只是做了自己想做的事的事，仅此而已。</p></blockquote><blockquote><p>如果你有梦想，用心去呵护她。哪怕她与现世格格不入，没关系，她有你就足够。</p></blockquote><blockquote><p>以后的路还很长，你会经历很多，有温暖和阳光，也难免接受伤害，甚至跌落黑暗。世事的变迁在悄无声息地改变着每一个人，但我还是希望你能保护好自己。<br>要知道，你所看见的伤害，不是教你如何去刺杀别人，而是让你懂的，受伤的感觉很痛，你要学会体谅别人，照顾弱小。<br>很多时候，点亮一个灰色的世界，让所有充满意义，只需要一个暖心的细节，比如一句恰如其分对的鼓励，或者自己告诉自己：我相信你。<br>给自己多一点耐心，予未来多一点期待。</p></blockquote><blockquote><p>永远不要轻易否定别人的梦想，你没有这个权利，梦碎之后是扎心的黑暗；也绝不允许别人轻易打碎你的未来。每一条路认真走下去，结果都不会太差。</p></blockquote><blockquote><p>用心去理解这个世界，如果你还在依靠头衔，地位，金钱来定位一个人，那只能说明你对自己的判断力毫无自信，或者你根本没有属于自己的判断力。</p></blockquote><blockquote><p>我知道你是一个赌徒，可以允许自己失败一万次，也不想放弃哪怕万分之一的希望。所以，勇敢去赌，开启赌局是你的问题，即使输了又不代表失败，万一又赢了了呢，岂不是皆大欢喜。</p></blockquote><blockquote><p>物依稀为贵，亘古不变的真理。当大家都去保研，直博，转博的时候，考博的人就是很帅。当大家都去经历爱情的时候，为了自己的相信，永不将就的人就是很温暖。当大家都略施粉黛的时候，不会化妆的素颜反而是难得的风景线。</p></blockquote><blockquote><p>去经历，去追寻，去接受所有改变和未知，直到云卷云舒，淡定自如。<br>愿你的努力配得上你的执着，经得起时间的封藏，静心期待生命的惊喜。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heartbeats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用正确的方式打开生命</title>
      <link href="/2020/04/03/Diary/2020-4-3-%E7%94%A8%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E7%94%9F%E5%91%BD/"/>
      <url>/2020/04/03/Diary/2020-4-3-%E7%94%A8%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E7%94%9F%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Gloomy-Sunday-Ein-Lied-von-Liebe-und-Tod"><a href="#Gloomy-Sunday-Ein-Lied-von-Liebe-und-Tod" class="headerlink" title="Gloomy Sunday - Ein Lied von Liebe und Tod"></a>Gloomy Sunday - Ein Lied von Liebe und Tod</h1><p>美好与残酷，忧郁和神秘。如果文艺的中包含着两种温度，那一定是冰火两重天。<br>在虚构的世界里短暂的游离，一半是为了逃避现实，一半是为了寻找无法到达的远方，一半是为了愉悦自己。其实，每个人的生活都像时空里的平行线，我们不在乎别人喜欢什么，也无法和另一个人交换人生，所做的一切，最终不过是为了愉悦自己。<br>有的人可能喜欢不拘小节，有的人可能喜欢精雕细琢，反正每个人有每个人的活法。有生之年，把值得记忆的事情刻进骨子里，是需要花费些时间，但路途中的感受总让人难忘。<br>每个人心中都有一个桃花源，但所需的旅途大概各有不同。</p><p>我发现忧伤和文艺，有个神秘的约定。幸福的日子里，显然拥有更多平实与安稳。</p><h1 id="North-amp-South"><a href="#North-amp-South" class="headerlink" title="North &amp; South"></a>North &amp; South</h1><p>Today, I’d like to enjoys the authentic British Accent, so i found the British television series named “North and South”. At first, it seems like anohter “Pride and Prejudice”, the old-fashioned love story between a wealthy man and a beautiful young woman.  But when I landed on the ending part, I changed my mind. The love between Magarate Hale and John Thornton is pure, warm, and respectful, not very smooth but with happy ending.<br>It made me realize that brave and kind might be the two most important thing in the world. I look forward to that man, who is not the lucky guy in the world, but he can undertand what i have went through and we can share our past as well the future together.<br>I am a little women out of cage, who are you come from mistery?<br><img src="/medias/pic_md/Diary/NorthandSouth.jpg" alt="NorthandSouth"></p><h1 id="Start-Over"><a href="#Start-Over" class="headerlink" title="Start Over"></a>Start Over</h1><p>《遇见王沥川》教会我很多事，2016年7月31日上映的好剧，我一定听过这个名字，当时却没有机会，没有心情，没有时间去停留，去品味。今年是2020年，浅尝被拒绝，被忽略的痛苦，面对未来毫无定数的恐惧，一个人躲在被窝里的孤单，把所有没有借口付诸行动的泪水都交付给了《遇见王沥川》。<br>沥川的善良，温暖，体贴；认真，低调，谦和，大概已成为当今时代的稀缺。<br>很多时候，对自己多一点耐心，对未来多一点期待，已经成了我做不到的奢求。<br>如今停下手头的工作，静下心来装点博客，已是不可多得的享受。<br>更不用说，半夜里把32开的笔记本裁开，粘成88个琴键的长度；水粉刷描上黑键；徒手折出无线谱；画好所有的唱名和音高。冲动是魔鬼，也是不惧疲惫的热情，不是吗？<br>为何不勇敢一点，在红尘客梦的高墙外，留一点空白，送自己一份自由自在。<br><img src="/medias/pic_md/Diary/StartOver.png" alt="StartOver"></p><h1 id="当幸福来敲门"><a href="#当幸福来敲门" class="headerlink" title="当幸福来敲门"></a>当幸福来敲门</h1><p>哪怕经历一万次失败，也不要放弃万分之一的希望。（2020年3月4日晚，我流着眼泪，看着镜子中的自己，奢求有人告诉我，我是对的）<br>永远不要打碎别人的梦，否定别人的未来，世界上没有哪一条路是完全行不通的，修改别人的梦想是残忍的。<br><img src="/medias/pic_md/Diary/Happyness.jpg" alt="Happyness"></p><h1 id="一生有你：小王子"><a href="#一生有你：小王子" class="headerlink" title="一生有你：小王子"></a>一生有你：小王子</h1><p>我很幸福，因为我的心里一直都有一个小王子。<br>我爱过许多人，也爱过很多事，有些已经消逝，有些依然握在手里，但它们在我心里都有属于自己的位置。<br>我经历过许多幸福，也品尝过些许苦楚，有些已经忘记，有些依然留在心底。那些永远住进脑海里的片段，不是因为他们有多重要，不能忘记。而是因为它们曾经带给我别样的体验，让我舍不得忘记。<br>不要总是用实用主义去揣摩整个世界，很多东西，曾经以为重要的，却经不起时间的洗礼；有些事情，曾经以为无足轻重的，却承载了最真挚的回忆。<br><img src="/medias/pic_md/Diary/TheLittlePrince.png" alt="TheLittlePrince"></p><h1 id="小美人鱼"><a href="#小美人鱼" class="headerlink" title="小美人鱼"></a>小美人鱼</h1><p>我想告诉我未来的女儿，现在的自己，以及所有喜欢童话的小女生，如果你是小美人鱼，就不要把自己的鱼尾巴变成人类的双腿。</p><h1 id="一个陌生女人的来信"><a href="#一个陌生女人的来信" class="headerlink" title="一个陌生女人的来信"></a><a href="https://pan.baidu.com/s/1rrdsdH-fLYesG4cJ4bd35w" target="_blank" rel="noopener">一个陌生女人的来信</a></h1><p>我从未想过, 有人会和我一样, 做过同样的傻事, 单是某些只言片语, 就已经收走了我的灵魂.</p><blockquote><p>我的一生确实是从我认识你的那一天才开始的。</p><p>这个世界只因为和你有关才存在.</p></blockquote><blockquote><p>我把这一切都告诉你, 亲爱的, 把这一切琐碎的简直可笑的事情喋喋不休地说给听,为了让你明白,你从一开始就对我这个生性腼腆, 胆怯羞涩地女孩子具有这样巨大的力量. 你自己还没有进入我的生活, 你的身边就出现了一个光圈.</p><p>我的心始终为你而紧张, 为你而颤动; 可是你对此毫无感觉, 就行你口袋里装了怀表, 你对它地紧绷的发条没有感觉一样. 这根发条在暗中耐心地数着你的钟点, 计算着你的时间, 以它听不见的心跳陪着你东奔西走, 而你在那滴答不停地几百万秒当中, 只有一次向它匆匆瞥了一眼. </p></blockquote><blockquote><p>我没有想到, 我对你的心灵来说, 无论是相隔无数地山川峡谷, 还是说在你和我那抬头仰望地目光之间只相隔你窗户的一层玻璃, 其实都是同样的遥远.</p></blockquote><blockquote><p>我是有自尊心的, 我要你一辈子想到我的时候, 心里没有忧愁. 我宁可独自承担一切后果, 也不愿变成你的累赘. 我希望你想起我来, 总是怀着爱情, 怀着感激. 在这点上, 我愿意在你结交的所有女人当中, 成为独一无二的一个. 可是当然啰, 你从来也没有想过我, 你已经把我忘得一干二净.</p></blockquote><p>你唯一能给我的，唯一给过我的，唯一让我忘不掉的，是勇气。</p><p>让我如何否定你，否定自己做过的一切，否定独自规划好的未来。</p><h2 id="后记：此栏目的前世今生"><a href="#后记：此栏目的前世今生" class="headerlink" title="后记：此栏目的前世今生"></a>后记：此栏目的前世今生</h2><blockquote><p>2019-12-12， 累了，孤单了，受伤了，我们一起去读书吧，用别人的眼睛和自己的心灵触碰世界。</p></blockquote><p>我们都渴望被爱，但时常忘记体谅别人。愿你在失去中懂得珍惜，在受伤中学会保护自己。<br>每个人都是自私的，但在自私之外，最起码要有真正的尊重、理解和支持。<br>如果可以的话，用透明的心灵，去感受平凡眼睛看不到的远方。</p><blockquote><p>2019-11-30， 每当我想你时，我会去做一件有意义的事，这是我做过的最浪漫的决定，也是对自己最大的宽慰。</p></blockquote><blockquote><p>2019/12/11，平凡的日子里，去做一件有意义的事，自己去遇见惊喜。</p></blockquote><p>今天将是我重生的日子。往昔，不留恋，不回头，不心动。<br>希望你有足够的勇气和毅力，每一天都可以不遗余力，不要着急去问值不值得，用心去付出，时间会给你最好的回答。<br>我想告诉你，不论何时何地，不管是为一个人，为一件事，还是为一个梦想，只要你想<strong>奋不顾身</strong>，不需要任何理由，也没有必要瞻前顾后。<br>抄一首诗，弹一首曲子，看一本书，画一幅画，写一点小说，听一首歌，寻找一点新鲜的遇见。。。我希望此后做的每一件事，都能静心，用心，不再是自己的人生里匆忙的过客。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>果腹不只为充饥</title>
      <link href="/2020/04/01/Diary/2020-4-1-%E6%9E%9C%E8%85%B9%E4%B8%8D%E5%8F%AA%E4%B8%BA%E5%85%85%E9%A5%A5/"/>
      <url>/2020/04/01/Diary/2020-4-1-%E6%9E%9C%E8%85%B9%E4%B8%8D%E5%8F%AA%E4%B8%BA%E5%85%85%E9%A5%A5/</url>
      
        <content type="html"><![CDATA[<p>我喜欢健康的生活，几乎不喝饮料，从不乱吃零食，每天一定会做三件事：午休，吃水果，喝茶。<br>今天盘点一下一年四季适宜入口的水果吧，纵使塑料大棚一直都在，还是推荐大家多吃应季水果。</p><h1 id="春宵一刻值千金，花有清香月有阴"><a href="#春宵一刻值千金，花有清香月有阴" class="headerlink" title="春宵一刻值千金，花有清香月有阴"></a>春宵一刻值千金，花有清香月有阴</h1><h3 id="水果"><a href="#水果" class="headerlink" title="水果"></a>水果</h3><p>草莓、樱桃、桑葚、菠萝、山竹、榴莲。</p><h3 id="蔬菜"><a href="#蔬菜" class="headerlink" title="蔬菜"></a>蔬菜</h3><p>春笋 </p><h1 id="绿树阴浓夏日长，楼台倒影入池塘。"><a href="#绿树阴浓夏日长，楼台倒影入池塘。" class="headerlink" title="绿树阴浓夏日长，楼台倒影入池塘。"></a>绿树阴浓夏日长，楼台倒影入池塘。</h1><h3 id="水果-1"><a href="#水果-1" class="headerlink" title="水果"></a>水果</h3><p>西瓜、提子、桃子、李子，杏、苹果、番茄、圣女果、荔枝、百香果、芒果、石榴、龙眼、百香果、椰子、蓝莓、龙眼、哈密瓜、木瓜、葡萄、无花果、猕猴桃。</p><h1 id="深秋帘幕千家雨，落日楼台一笛风。"><a href="#深秋帘幕千家雨，落日楼台一笛风。" class="headerlink" title="深秋帘幕千家雨，落日楼台一笛风。"></a>深秋帘幕千家雨，落日楼台一笛风。</h1><h3 id="水果-2"><a href="#水果-2" class="headerlink" title="水果"></a>水果</h3><p>火龙果、梨、紫薯、红薯、南瓜、柿子、葡萄、提子、</p><h1 id="晨起开门雪满山，雪晴云淡日光寒。"><a href="#晨起开门雪满山，雪晴云淡日光寒。" class="headerlink" title="晨起开门雪满山，雪晴云淡日光寒。"></a>晨起开门雪满山，雪晴云淡日光寒。</h1><h3 id="水果-3"><a href="#水果-3" class="headerlink" title="水果"></a>水果</h3><p>橘子、橙子、丑柑、香蕉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cascade Net的训练</title>
      <link href="/2020/01/04/MyResearch/2020-1-4-Cascade%20Net%E7%9A%84%E8%AE%AD%E7%BB%83/"/>
      <url>/2020/01/04/MyResearch/2020-1-4-Cascade%20Net%E7%9A%84%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>本文主要分析Cascade Net（级联网络）的训练情况。</p><h1 id="2个网络，2个loss，梯度如何回传？"><a href="#2个网络，2个loss，梯度如何回传？" class="headerlink" title="2个网络，2个loss，梯度如何回传？"></a>2个网络，2个loss，梯度如何回传？</h1><p><img src="/medias/pic_md/MyResearch/net1net2.png" alt></p><ol><li>loss1只会优化net1;</li><li>loss2优化net1和net2。</li><li>推荐使用1个优化器，优化一个loss(loss1+loss2), 方便简洁.</li></ol><p>公共代码部分：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Net1</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1<span class="token keyword">class</span> <span class="token class-name">Net2</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1loss1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>net1 <span class="token operator">=</span> Net1<span class="token punctuation">(</span><span class="token punctuation">)</span>net2 <span class="token operator">=</span> Net2<span class="token punctuation">(</span><span class="token punctuation">)</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2个优化器独立优化2个Net，两个loss独立回传"><a href="#2个优化器独立优化2个Net，两个loss独立回传" class="headerlink" title="2个优化器独立优化2个Net，两个loss独立回传"></a>2个优化器独立优化2个Net，两个loss独立回传</h3><pre class=" language-python"><code class="language-python">optimizer1<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output1<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer2<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.1047, -0.0668],<br>                    [ 0.1183,  0.0265]],<br>                    [[ 0.0277,  0.1389],<br>                    [-0.0696,  0.1308]]]]])<br>layer1.0.bias tensor([-4.6566e-09])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[ 0.1112, -0.0436],<br>                    [ 0.0883,  0.0262]],<br>                    [[ 0.0384,  0.1336],<br>                    [-0.1178,  0.1256]]]]])<br>layer1.0.bias tensor([-2.7940e-09])<br>layer2.0.weight tensor([[[[[ 0.0079,  0.0407],<br>                    [-0.0628,  0.0299]],<br>                    [[-0.0284, -0.0627],<br>                    [ 0.0145,  0.0101]]]]])<br>layer2.0.bias tensor([1.1642e-09])</p></blockquote><h3 id="1个优化器优化2个Net"><a href="#1个优化器优化2个Net" class="headerlink" title="1个优化器优化2个Net"></a>1个优化器优化2个Net</h3><pre class=" language-python"><code class="language-python">optimizer1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span></code></pre><h3 id="1个优化器优化2个Net，2个loss加和回传"><a href="#1个优化器优化2个Net，2个loss加和回传" class="headerlink" title="1个优化器优化2个Net，2个loss加和回传"></a>1个优化器优化2个Net，2个loss加和回传</h3><pre class=" language-python"><code class="language-python">optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span>net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span>net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>net1<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>net2<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>output1 <span class="token operator">=</span> net1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>output2 <span class="token operator">=</span> net2<span class="token punctuation">(</span>output1<span class="token punctuation">)</span>loss_output1 <span class="token operator">=</span> loss1<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> target1<span class="token punctuation">)</span>loss_output2 <span class="token operator">=</span> loss2<span class="token punctuation">(</span>output2<span class="token punctuation">,</span> target2<span class="token punctuation">)</span>loss_output <span class="token operator">=</span> loss_output1<span class="token operator">+</span>loss_output2optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output1<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net1<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.0281,  0.0501],<br>                    [-0.0897,  0.1292]],<br>                    [[ 0.1451,  0.0634],<br>                    [-0.0040,  0.0151]]]]])<br>layer1.0.bias tensor([9.9535e-09])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[ 0.0686,  0.0366],<br>                    [ 0.0078,  0.0646]],<br>                    [[ 0.0461,  0.0027],<br>                    [-0.0182, -0.0114]]]]])<br>layer1.0.bias tensor([-1.6298e-09])<br>layer2.0.weight tensor([[[[[0.3400, 0.2140],<br>                    [0.2509, 0.2214]],<br>                    [[0.3691, 0.2921],<br>                    [0.3126, 0.2221]]]]])<br>layer2.0.bias tensor([-6.5425e-08])</p><p>layer1.0.weight tensor([[[[[ 0.0966,  0.0867],<br>                    [-0.0819,  0.1939]],<br>                    [[ 0.1912,  0.0661],<br>                    [-0.0222,  0.0037]]]]])<br>layer1.0.bias tensor([-6.0536e-09])<br>layer2.0.weight tensor([[[[[0.3400, 0.2140],<br>                    [0.2509, 0.2214]],<br>                    [[0.3691, 0.2921],<br>                    [0.3126, 0.2221]]]]])<br>layer2.0.bias tensor([-6.5425e-08])</p></blockquote><h3 id="冻结net2的参数"><a href="#冻结net2的参数" class="headerlink" title="冻结net2的参数"></a>冻结net2的参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>optimizer1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">.</span>requires_grad<span class="token punctuation">,</span> net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1 = torch.optim.Adam(net1.parameters(), lr=0.001)# since no param of frozen net2 need to be optimized, so this one is equal to the above optimizer.</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.1854,  0.0710],<br>                    [-0.0503, -0.0730]],<br>                    [[ 0.0512,  0.0873],<br>                    [-0.1704,  0.0965]]]]])<br>layer1.0.bias tensor([-2.2352e-08])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[ 0.2990,  0.1330],<br>                    [-0.2335, -0.1387]],<br>                    [[-0.1399,  0.1262],<br>                    [-0.2014,  0.2233]]]]])<br>layer1.0.bias tensor([-6.7055e-08])<br>layer2.0.weight None<br>layer2.0.bias None</p></blockquote><h1 id="1个网络，2个loss，梯度如何回传？"><a href="#1个网络，2个loss，梯度如何回传？" class="headerlink" title="1个网络，2个loss，梯度如何回传？"></a>1个网络，2个loss，梯度如何回传？</h1><p><img src="/medias/pic_md/MyResearch/net.png" alt></p><ol><li>loss1只会优化net1;</li><li>loss2优化net1和net2。</li><li>loss1+loss2一起回传也遵循以上原则。</li></ol><p>公共代码部分：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        layer2 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>layer1<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1<span class="token punctuation">,</span>layer2loss1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>net <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span></code></pre><h3 id="2个loss单独回传"><a href="#2个loss单独回传" class="headerlink" title="2个loss单独回传"></a>2个loss单独回传</h3><pre class=" language-python"><code class="language-python">net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>output1<span class="token punctuation">,</span>output2 <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>loss_output1 <span class="token operator">=</span> loss1<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> target1<span class="token punctuation">)</span>loss_output2 <span class="token operator">=</span> loss2<span class="token punctuation">(</span>output2<span class="token punctuation">,</span> target2<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output1<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.1199,  0.1322],<br>                    [ 0.3313,  0.2889]],<br>                    [[-0.2830,  0.0982],<br>                    [ 0.2318,  0.4600]]]]])<br>layer1.0.bias tensor([-5.2154e-08])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[-0.1710,  0.0898],<br>                    [ 0.0150, -0.0648]],<br>                    [[ 0.0969,  0.2731],<br>                    [ 0.1348,  0.1892]]]]])<br>layer1.0.bias tensor([-5.4948e-08])<br>layer2.0.weight tensor([[[[[0.0403, 0.0771],<br>                    [0.2339, 0.4653]],<br>                    [[0.2246, 0.4523],<br>                    [0.1780, 0.3113]]]]])<br>layer2.0.bias tensor([-4.0978e-08])</p></blockquote><h3 id="2个loss加和一起回传"><a href="#2个loss加和一起回传" class="headerlink" title="2个loss加和一起回传"></a>2个loss加和一起回传</h3><pre class=" language-python"><code class="language-python">net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>output1<span class="token punctuation">,</span>output2 <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>loss_output1 <span class="token operator">=</span> loss1<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> target1<span class="token punctuation">)</span>loss_output2 <span class="token operator">=</span> loss2<span class="token punctuation">(</span>output2<span class="token punctuation">,</span> target2<span class="token punctuation">)</span>loss_output <span class="token operator">=</span> loss_output1<span class="token operator">+</span>loss_output2optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output1<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer1.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># optimizer2.step()</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>param<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><p>output:</p><blockquote><p>layer1.0.weight tensor([[[[[ 0.0622,  0.1044],<br>                    [ 0.0046,  0.0056]],<br>                    [[ 0.0011, -0.1298],<br>                    [ 0.0423, -0.0172]]]]])<br>layer1.0.bias tensor([-1.8626e-09])<br>layer2.0.weight None<br>layer2.0.bias None</p><p>layer1.0.weight tensor([[[[[ 0.0438,  0.0806],<br>                    [ 0.0495, -0.0116]],<br>                    [[ 0.0808, -0.0380],<br>                    [ 0.0780,  0.0077]]]]])<br>layer1.0.bias tensor([1.1176e-08])<br>layer2.0.weight tensor([[[[[ 0.2026,  0.1759],<br>                    [-0.0217,  0.1291]],<br>                    [[ 0.0584,  0.1224],<br>                    [ 0.0403,  0.1459]]]]])<br>layer2.0.bias tensor([3.2596e-09])</p><p>layer1.0.weight tensor([[[[[ 0.1061,  0.1850],<br>                    [ 0.0541, -0.0060]],<br>                    [[ 0.0819, -0.1678],<br>                    [ 0.1203, -0.0095]]]]])<br>layer1.0.bias tensor([3.7253e-09])<br>layer2.0.weight tensor([[[[[ 0.2026,  0.1759],<br>                    [-0.0217,  0.1291]],<br>                    [[ 0.0584,  0.1224],<br>                    [ 0.0403,  0.1459]]]]])<br>layer2.0.bias tensor([3.2596e-09])</p></blockquote><h1 id="综上所述："><a href="#综上所述：" class="headerlink" title="综上所述："></a>综上所述：</h1><p>使用cascade net+2个loss, 为了方便单独load已经训练好的模型或者冻结某个网络的参数，推荐使用2个单独的网络，1个优化器，2个loss加和一起回传。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">Net1</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1<span class="token keyword">class</span> <span class="token class-name">Net2</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ConvTranspose3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm3d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token keyword">return</span> layer1loss1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SmoothL1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>net1 <span class="token operator">=</span> Net1<span class="token punctuation">(</span><span class="token punctuation">)</span>net2 <span class="token operator">=</span> Net2<span class="token punctuation">(</span><span class="token punctuation">)</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>target2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> param <span class="token keyword">in</span> net2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># since no param of frozen net2 need to be optimized</span>net1<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>net2<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>output1 <span class="token operator">=</span> net1<span class="token punctuation">(</span>input<span class="token punctuation">)</span>output2 <span class="token operator">=</span> net2<span class="token punctuation">(</span>output1<span class="token punctuation">)</span>loss_output1 <span class="token operator">=</span> loss1<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> target1<span class="token punctuation">)</span>loss_output2 <span class="token operator">=</span> loss2<span class="token punctuation">(</span>output2<span class="token punctuation">,</span> target2<span class="token punctuation">)</span>loss_output <span class="token operator">=</span> loss_output1<span class="token operator">+</span>loss_output2optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_output<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MyResearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>见不得光的生命</title>
      <link href="/2019/12/28/Diary/2019-12-28-%E8%A7%81%E4%B8%8D%E5%BE%97%E5%85%89%E7%9A%84%E7%94%9F%E5%91%BD/"/>
      <url>/2019/12/28/Diary/2019-12-28-%E8%A7%81%E4%B8%8D%E5%BE%97%E5%85%89%E7%9A%84%E7%94%9F%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<p>昨夜依旧失眠，想了许多不该想的事，流了许多莫须有的眼泪。</p><p>我们的相遇，该从那一天中午说起。小学，某个中午回家吃午饭的时候，看到屋后的邻居鬼鬼祟祟往麦垛里放了一个东西，我当然很好奇，于是邻居前脚刚走，我随后走过去一探究竟。</p><p>麦堆里，是哼哼唧唧不知所措的你，一只略掺杂色的小白狗。我就这样自然而然把你抱回家据为己有了，因为可爱的东西，大家都想拥有。</p><p>吃过午饭，我该上学了，姨说你是瘸子，怪不得没人要呢，顺带让我立马扔掉，我舍不得，故意推脱到我下午放学后再解决。</p><p>下午的第一堂课上，老师让我们列举一下见义勇为的事迹，我大言不惭地说：我捡了一只狗，然后抱回了家。我仍然记得老师那放光地双眼，毫无遮掩地写着：我想要这只狗。然后我话风一转：可惜它是个瘸子。老师地表情瞬间凝固了，开始了一个人的表演。</p><p>我整个下午大概都没好好上课，在同情你的无辜和无助，也在思考放学后的我该如何护你周全。</p><p>你的何去何从问题一直持续到晚饭结束，全家投票决定把你扔出去，当然除却我那黯然失色的一票。就这样，趁着夜黑风高，你回到了白天我抱走你的地方。</p><p>那一晚，我大概没有睡好，在想着如何安得两全法，护你周全不受伤。<br>第二天，我早早起了床，趁着没人注意我的时候，跑过去偷看了你一眼，你还在睡梦里。</p><p>然后，我飞快地蹦回物色好的地方，开始徒手挖坑，挖到容你有余的尺度，垫上草屑和坐垫，把你安顿进去，上面盖一块大石板，天知地知，你知我知。</p><p>从那之后的每一天里，照顾你，成了我每天最大的责任和幸福。我常常在吃饭的时候，抱着没吃完的饭就溜走了，溜到大门外的街角上，嚼碎了喂给你。</p><p>我不知道这样的偷偷摸摸会持续到某年某月，因为我从未预料，终点会突然出现。就在那一天清晨，我起床去看你，没有哼哼唧唧的撒娇，我掀开石板，而你是真的睡去了，倔强地离开了这个自私的世界，再也不愿意为自己的无辜受挫。</p><p>我很难过，装作若无其事的样子对妈妈说：它走了。还好没有哭出来。我知道你所有的家当被一张铁锨抄到了垃圾堆里，但我没有勇气去看。</p><p>从那以后，青石板下没了你的肉体，却永远住着你的灵魂，阳光刺眼的午后，我走过街角，会闻到你的气息，那是我偷牛奶喂你时，留下的味道。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>往事如风,留在心中</title>
      <link href="/2019/12/20/Diary/2019-12-20-%E5%BE%80%E4%BA%8B%E5%A6%82%E9%A3%8E/"/>
      <url>/2019/12/20/Diary/2019-12-20-%E5%BE%80%E4%BA%8B%E5%A6%82%E9%A3%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每次误入阴霾的时候，只是翻看一下曾经的日记，已经足以让我满心欢喜。<br>我知道不是每个昨天都充满快乐，但是我把所有的欢乐都装进了日记里。<br>谢谢笔耕不辍的自己，在这个摇滚年代里依然保持着手写日记的习惯。<br>那些过往但被记忆的曾经，感动着难免感伤的自己，温润了时常受伤的心，守护着一份永远相信温暖的执著，给我继续前行的勇气和力量。<br>经历过多少快乐并不重要，是那些用心珍惜过的瞬间，让昨日充满了温暖和怀念。</p></blockquote><p>回首过去的读博路，大概已经忘记得差不多了。</p><blockquote><p>今天，我更新了天气预报列表，一个是我住的城市，一个是老妈所在的城市。</p></blockquote><p>我想开始攒钱了，想和老妈出去走一走，也许是绿色的森林，也许是热闹的街市。老妈曾说要带我去爬山，可是我们计划了许多年，都未能成行。老妈也曾去过我的学校，但我们一起走过的路却寥寥无几。我不想后悔，也害怕留不住光阴，也担心意外会夺走我爱的人，或者抹去老妈对我的记忆。<br>家里的水电费，每年的保险费，要归于自己的预算了。<br>如果还有余钱，请给自己买架电子琴吧，我已经喜欢好久了。</p><blockquote><p>Unconditioanal Love——请珍惜这段有她陪伴的时光。<br>如果有一天，我身无分文，却依然富有，那一定是我爱的人，相伴左右。</p></blockquote><p>我已经有两年没有回家了，如果不是聪明的妈妈提醒我，回家的路上有凉亭，还有一个石磨，永远也记不住楼号的我，大概已经忘记回家的路。</p><p>我依稀记得上次离家的场景，老妈会提醒我，该买票了。如今的我依稀有些懂得，当老妈说出这句话时，也在提醒自己，女儿又要离家远行了。<br>每当放假临近，老妈也会提醒我，该买票了。如今的我却总说再等等，老妈也会慢慢懂得，再等等，大概会等很长一段时光。</p><p>我很难想象，如果没有那么多意外和曲折，我们的生活会是怎样一番模样。我也很难去计算，如今25岁的我，和老妈在一起的时光，会有10年那么长吗？<br>但所有天灾和人祸掺杂在一起，也许已经注定了，当初的路，必须那样走。世间没有雪中送炭的圣人，我们也没有预见未来的能力，已经发生的，就必须得接受了。</p><p>小时候数日历长大的我，在相聚和离别中相互轮回的我，过早地选择住校地我，迫于自我保护而选择忘记的我，曾经一度认为亲情是弱点和牵绊地我，慢慢地在独立的路上越走越远。<br>我不知道在这条自以为正确的路上收获了多少，但我一定失去了很多和家人相互取暖的机会。</p><p>过去的十几年里，我们保持联络的方式，无非是从电话过渡到了手机，除了语音，加了点视频而已。如今的我，才慢慢懂得，什么叫做 “internet communication cannot replace face-to-face communication” , 这大概是高中晨读课上张口就来一段台词。事实也证明，如果所有的经历没有积累到爆破点，所见所闻远非所得。</p><p>在我去拿快递的路上，还在回想，从什么时候开始，我花在家人身上的时间，已经远小于未曾谋面的陌生人。是家人的心照不宣，已经到了不需要感情维系的地步吗？还是我只会索取，并且到了理所当然的地步呢？我不想承认，并且故意找理由搪塞着不安的内心。</p><p>当我拆开纸箱的那一刻，是五味瓶打翻的瞬间。<br>老妈曾经问我，你要不要看一下我给你带的东西？其实当时的我在实验室里，有些敷衍地说了一句，先不看了吧，开箱有惊喜呀。但是老妈还是耐心地打了一段文字，是很长地一个list，罗列了和我说过的，和没有提起过的，已经装进箱子里的各种东西。当然，我没有细看，唯一的印象是list很长，也很期待开箱有惊喜的时刻。</p><p>箱子很重，老妈却说才只有16斤呢。是的，上次收到老妈的快递是在考研的冬季，我低估了母爱的重力，单身匹马去家属区拿快递，当我抱起箱子的那一刻，是傻眼的。我不知道箱子究竟又多重，却是我难以承受的重量，我慢慢地把箱子从家属区挪到S楼，两只胳膊疼了整整一个星期。老妈几乎把冰箱里所有的珍宝都装进了我的箱子里，还有应景的各色月饼。这次依旧是这样，家里唯一的冰箱收藏着所有想留给女儿的美味，可惜女儿不回家，老妈只好打包寄到了女儿手边。</p><p>老妈说要寄新灌的香肠，四五斤的样子，当我看到一大包香肠的时候，从没有重量概念的我才知道，四五斤原来是这个样子，远非我想象中的四五根。裹了芝麻盐的烘焙煎饼，是我的最爱，足足占据了箱子的半壁江山；来自冰箱的栗子，花生和红枣，还带着冰冻的外壳，彷佛还带着家中冰箱的余温；真空包装的猪肉，鸡肉，老妈说每一包都有不同的来历；炒过的核桃和芝麻盐，。。。</p><p>天知道打开箱子的那一刻，我又多脆弱，在一个人的房间里选择了哭泣。突然间意识到，哪怕是有血缘维系的亲情，也是需要用心经营的，老妈所作的这些努力，着实让我感受到亲情的重要性。<br>放弃遥远的花花世界，选择留在父母身边，真的挺好的，能收到家人的快递已经很幸福，能吃到家里的热饭真的是人间奢侈。<br>人生的勇气，除了自己给给自己，的确有相当一部分来自家人的支持。未来，亲情面前，高楼大厦都会黯然失色，我所想要的，只不过是有一个温馨常伴的小家而已。</p><p>慧玉是老妈的宝贝女儿，我不知道这样的幸福还会有多少日子，我唯一能做的，只有用心珍惜。<br>老妈义无反顾地爱着唯一地珍宝，慧玉也想此生宠爱唯一的老妈。</p><blockquote><p>记忆里的酸枣仁</p></blockquote><p>中午休息时想起来的，想起了小时候的蹦蹦跳跳。小时候常跟着姨去田里，恍惚间已经好多年没有去过了，就连那些颇有创意的地名，也只能想起一个：鼻梁骨。</p><p>鼻梁骨的鼻梁上有一片野果灌木，我姨说那是“吃厘子”，以至于第一次在超市里看到“车厘子”的时候，我以为那是从荒野草丛里盗走的美味。</p><p>在我的记忆里，它算是荒野水果中的贵族，为了尝到第一颗熟透的红果，我足足等了好多年，直到那一片灌木日益茁壮，足以抚育丰满的硕果。</p><p>鼻梁骨的另一端，是惊悚的落崖，落崖上肆意地长满了各种奇珍异树，我种在花园里的红叶树，就是这个落崖上的土著。</p><p>因为鲜有人不顾性命去找落崖的麻烦，此处最壮硕的酸枣树，就生在落崖边上。中午和姨回家，瞅见了那颗挂满酸枣的酸枣王，姨停下脚步，拿起镰刀就拽走了大王的半个脑袋，我在一旁看的目瞪口呆。</p><p>当年的姨，还很年轻，会陪我把北山上的大石头拖着带回家，那真的是货真价实的红石头。姨父说，哥哥也有这样的癖好，把四处搜来的滑石用车载回家。而我呢，四处搜罗奇形怪状的风化石，让姨帮我拉回家。这样，姨家的磨盘下，就成了我的石头山。有两块石头，的确是绝精美的，去年过年的时候想找回来，可惜没寻到。</p><p>姨喜欢养花，家里全是花，“吃的买回来，吃完了就没了，花买回来还可以看呢“ 除了爱花的姨，谁也说不出这样的经典。</p><p>姨把我写过的墨迹视若珍宝，世间再也找不出第二个对我如此用心的人。哪怕是我丢弃的半张纸条，姨也会捡回来，和我确认好，生怕我弃用了不该丢的东西。而现在，自己在家里，已经塞进垃圾桶的东西从来没有心情去翻看第二遍，哪怕丢错了东西，也就认为遗失而已。</p><p>姨是一个自带浪漫的人，你能想到吗？周末的我时常赖床，叫醒我的，会是姨的清晨一吻。现在偶尔在家里赖个床，大多不会被人理会。只要屋外有人，我从来不会出去，但凡听不到其余的声响，出去呷一口桌上的饭菜，再回来继续躺着。</p><p>心灵手巧，除了姨，我再也想不出第二个更适合这个词的人，像刺绣这种精巧的东西，姨一看就会。姨会勾花，会绣花，会把剪纸塞满旧书。我脚下的某一双鞋垫，肯定出自姨的手笔，记得有一次回去，鞋子不合适，姨把自己刚做的鞋垫剪了一圈留给了我，这种毫无保留的给与和温暖，不是任何人都给得了的。</p><p>记忆里，最后一个不是一个人过得生日，肯定是在姨家过的，真的好巧，我的生日，竟然可以恰巧在姨家度过，香煎带鱼，羊肉汤。。。最大的幸福是没有孤单和虚伪，就那种自由自在，无拘无束的滋味，不是在自己家就可以轻易找到的。</p><p>每次去开一开那个近乎和我一样高的小白门，老妈说我还没有记忆的小时候，曾把手塞进了它的门缝里。</p><p>直到去年过年，从相聚到离开，不过短短的半天，那一天的我还买了零食，从小学一年级开始恋上的点心摊，竟然还在那里，只不过当年的叔叔阿姨已经有点白发苍苍。要离开时，姨站在最高的路口上送我回家，我坐在姨父的车上看见和我挥手的姨，在我的远去里变成了模糊的影子。我打那一刻，开始懂得用心画画的意义，开始懂得把生命融进画中，我想画那一副画，我想定格那一瞬间，我想让所以时光，都停留在昨天，所有我爱的人，都不会因为我的成长，而慢慢老去。</p><p>那一刻，我有多害怕离去。你能预料，哪一次离别不会成为永别？离开的是影子，关上的是门，你能料到，下一秒会发生什么？</p><p>回来的路上，哭够了眼泪，是我那一天干的事，后来妈妈上班的时候，从楼梯上看不见身影开始，我会迅速关上门，从餐厅、厨房的窗台上一直追到西面的杂物间。</p><blockquote><p>明天考研, 如果你曾做过研狗, 一路上的风景, 你懂得.<br>眼前的生活总是喜忧参半, 但消逝的过往总能充满美好。<br>想一想美好的过往, 怎舍得辜负半点当下; 往昔所有艰难都已过往, 未来又怎会无法逾越?</p></blockquote><p><img src="/medias/pic_md/Diary/RainyDay.jpg" alt="RainyDay"><br>那时的自己对自己还相当苛刻, 时常与自己过不去, 还不懂得, 宽以待己, 试着原谅自己.<br>自己经常’犯错’, 所以时常惩罚自己,<br>某一年的国庆, 早上刷了一眼建模获奖名单，没有我，意料之中，却还是略带后悔，心有不甘。<br>于是，此后的一天里，都在一发不可收拾的自责和自虐中度过，因为我没有完成既定的目标，犯了不该犯的错。<br>一个人坐在E楼404最后一排的角落里，200人的大教室里只有我一个人，确切地说，那一层，就只有我一个人。<br>窗外下着雨，没完没了地烘托着我心情，我就拍下了这张照片，希望自己永远记得这一天，记得失败之后的失落，尤其是开心到忘乎所以的时候，提醒自己尝一尝失败的滋味。<br>另一张照片是桌上的苹果，灿黄的金帅，连同桌上白色的桌布，都是我每天四处游走寻找自习室的标配。我在固定桌布的胶带上写下了这句话：沉下心来，珍惜身边的爱和温暖。<br>我懂得当时心内的滋味，被孤单沉默的味道，还有面对失败的彷徨。我唯一的对策就是沉下心来，重新面对未来。而“爱和温暖”，对我来说，从来都是稀缺的字眼，可遇而不可求的奢侈，得之我幸，失之我命。<br><img src="/medias/pic_md/Diary/Apple.jpg" alt></p><p><img src="/medias/pic_md/Diary/MyBed.jpg" alt="MyBed"><br>支教时的境况，挣扎，无奈，我行我素。<br>我不擅长处理人际关系，最致命的缺点在这段时光里崭露无遗。<br>我一个人待在一人的办公室里，度过下雪的周末，期待雪晴的日子永远不会到来。<br>为了一点委屈独自一人窝在被窝里落泪，都是在所难免的事情。<br>每天晨昏跑到屋后的篮球场上跑圈，是唯一放飞自我的时刻。<br>同一批的室友去炒大锅菜，我就端着一个小煮锅，自己给自己开小灶，那个时候的自己，就是这样的作风，受不了众口难调的麻烦，能自己解决的事情绝不会麻烦别人。<br>同住的舍友希望早休息，早于我的日常11点，直到有一天，毫无预兆地公然把我所在了门外，就有了我的地铺。<br>吃过晚饭把铺盖卷搬到实验室，学累了倒头就睡，第二天肯定是第一个醒来的人，铺盖卷就挂在晾绳上，毫无违和感。<br>第二批舍友喜欢夜生活，日常K歌秀舞晚于我的11点，我依旧住在机房里。<br>就这样，一共四个月，除了自己之外，没有人知晓谁会每天晒被褥，更不会猜到有人谁在机房里。可我就是这样，宁愿一个人孤独，也不想一起庸俗，四张小板凳就可以搭起地铺上的小蚊帐，我生来就擅长生活，可以享受锦绣华服，也不排斥布裙荆钗，没有什么是我不可面对的生活。</p><p><img src="/medias/pic_md/Diary/BaoMing.jpg" alt></p><p>考研报名的数字，那曾经是我遇见的，世界上最美丽的一串数字。</p><p>我也会永远记得，报名当天，在天桥上和妈妈吵了一架，然后把头发剪短到了极点，自己窝在宿舍里边哭边刷网页，浪费了大半天的时光，结果报名失败，晚上TT从图书馆回来，给我报的名。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><img src="/medias/pic_md/Diary/Jiudian.jpg" alt></td><td><img src="/medias/pic_md/Diary/NuanPing.jpg" alt></td><td><img src="/medias/pic_md/Diary/%E9%85%92%E5%BA%972.jpg" alt></td></tr></tbody></table><p>考研时住的宾馆，第一次住如此奢华的宾馆，第一次自己订宾馆，但仍然没有打破自己打车的特例。</p><p>和TT在一起的时候，出门考试也好，比赛也好，何时出发，怎么出发，住在哪里，从来都不用我操心，我真的是那个被朋友宠坏了的人，连下雨天，几乎不会打伞的自己，也从来不会带伞，但TT，永远会多带一把伞。</p><p>出乎意料地发现，住宾馆的那天，我竟然依旧带着标配的暖瓶，就像平时上自习一样，脚边总会放一把暖瓶，或蓝色，或粉色。</p><p>还记得第一晚，我们一起出门吃饺子，把附近的小店逛了一遍，搜罗了两天的粮草，然后回来躺在床上分享人生，遥想一起北漂的约定。</p><p>晚上的我照旧失眠，一直到凌晨一点，悄悄地出门打电话，妈妈秒接，大概是知道我逢考试必失眠地旧习，把电话放在了枕头边：“妈，我睡不着。”，我忘记了妈妈后来说了什么，但回来就睡着了，唯一后悔的是当时没有早一点打电话。</p><p>第二天回来，依旧是TT打车，到宿舍楼下，已是夜色弥漫，拖着行李箱上五楼，回到阔别了两个夜晚的宿舍，好似离开了整个世纪。打开灯才发现宿舍里空荡荡的没有一个人，打开行李箱，看到码齐的书本，刹那间泪如雨下。风里雨里，披星戴月的日子里，陪我走过四年的书本呀，突然发现有一天要和你说再见，你知道我有多留恋吗？</p><p>从那之后的三天里，没有睡过觉，和哥哥要了vip账号，看完了《漂洋过海来看你》，看完了《欢乐颂》。。。逮住了每一个可以落泪的剧情，好不吝啬地挥霍着廉价的眼泪。</p><p>三天之后下床，恍如另一个生命，开始新的生活，做的第一件事，是和大学里唯一一个暗恋过三年之久的人说了一句：我曾经爱过你。</p><p>而今，往事如梦，消逝风中，过去的不愿再提，记忆也懒得去拾起。唯一怀念的，是当时的潇洒和如今的不在乎，如此，过去的，就真的过去了。</p><h1 id="有你真好，让我所有的努力充满意义。"><a href="#有你真好，让我所有的努力充满意义。" class="headerlink" title="有你真好，让我所有的努力充满意义。"></a>有你真好，让我所有的努力充满意义。</h1><p><img src="/medias/pic_md/Diary/home.jpg" alt><br>图片是18年夏天在家拍的，母亲早上着急上班，让我把发酵好的面做成烙饼。我做了油饼和发面饼，一共8张，各有形状，我最喜欢的就是这张名副其实的手抓饼。<br>转眼间已经一年多没有回家了，偶尔也会想家，但忙起来就淡忘了。<br>我和母亲故事，足够写一本百页的小说，我们就是这样一对母女，经历着世间鲜有的生活，却依然可以幸福安逸。哪怕淡忘了跌跌撞撞的曾经，但骨子里的烙印仍然会提醒我，用心去生活，别对不起昨天的自己。<br>小时候是我坐在夕阳里数挂历，翘首期盼下一次团聚的时间，而现在，是目前不停地提醒我，别忘了买回家的火车票。从我7岁到如今的24岁，我们就像聚少离多的平行线，依靠电话和视频感受彼此的温度。<br>我知道母亲对我最大的期盼，就是一生快乐。可是我时常错解知足常乐的含义，总以为自己喜欢压力，迷恋步履匆忙的日子，习惯不轻易放过自己，也做过自己折磨自己的傻事。我会为了一个小小的比赛错过搬家，会为了几个没有做完的实验错过回家。</p><p>我今天才突然想到把所能想到的，关于母亲的一切都慢慢写下来，为了对抗遗忘，为了收藏温度，为了提醒自己懂得宠你的意义。</p><p>2020/2/11</p><p>醒来看到一条消息，好难过，突然意料到要面对我很排斥的现实。我还是老毛病，不管遇到什么，第一时间想到的是自己的过错，而不是别人的过分。</p><p>心不在焉地看着论文，正好母亲的视频弹了出来。我说我好难过。。。这一次，我才懂得，母亲的信条，就是对女儿好的都是对的，否则全是错的；我才突然预料到，偌大的世界里，也就这一个人，不分时间地点和缘由地宠着我，没有条件地信任着我。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界上懂我的你</title>
      <link href="/2019/12/18/Diary/2019-12-18-%E4%B8%96%E7%95%8C%E4%B8%8A%E6%87%82%E6%88%91%E7%9A%84%E4%BD%A0/"/>
      <url>/2019/12/18/Diary/2019-12-18-%E4%B8%96%E7%95%8C%E4%B8%8A%E6%87%82%E6%88%91%E7%9A%84%E4%BD%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我的世界流转变化<br>你却没时差<br>啦啦啦啦 我亲爱的你呀<br>我的心事纷乱复杂<br>你却能解码<br>啦啦啦啦 我亲爱的你呀</p></blockquote><p>我们的故事应该从何说起?</p><p>从见到你第一眼起, 我还在小学里, 而后相继转学, 彼此杳无音讯.</p><p>后来, 中学合校, 我竟会在一个班里看见你. 从那时起, 做过同桌, 一起愉快地度过平凡的周末, 一起做作业, 听海风吹打窗棂的奇妙.一起回归每一个新的周一, 睡在相邻的通铺上, 听你给我讲红楼梦, 讲漂亮朋友, 讲许多许多的睡前故事, 在你乐此不疲的声音里安然入睡. 我们 一起去过我阔别了十多年的老地方, 那是我一个人永远没有勇气和理由回去的地方, 我们看过珍珠鸡, 赏过小鸳鸯, 你送给了我唯一一根孔雀毛, 也是我此生第一次见到货真价实的孔雀毛;  调皮的我们还捡过河蚌, 那是我此生第一次, 也是迄今为止唯一一次尝过如此独特的美味. 我们偷偷爬过人家的杏花树, 在桃花林中寻找春天的味道. </p><p>后来, 我们在一个高中里, 一起开学, 一起去找新的班级和宿舍, 一起开始新的生活. 受了委屈的我, 还会跑到楼上, 和你哭大半个早上.  可你知道吗? 除你之外, 和我从初中到高中的同学, 还没有第二个人见过我的眼泪, 我爱哭, 但很少卸下铠甲真的哭出来.</p><p>后来, 我们一起上大学了, 分别去了不同的地方, 匆忙的四年里, 我别无选择, 若无其事地过着只有自己可以承受的生活, 我知道你的闪耀时刻, 你清楚我奋斗过的旅程, 比我自己更清楚自己, 直到你说我曾一天学习过14h, oh my god, 那是我吗?<br>幸运如我们, 经历了不同的雕琢, 我们有了近乎同样的色彩, 我崇拜那个满身灿烂的你, 那个四年里一直拿第一的你, 不管是成绩还是各种比赛.</p><p>后来, 我们怎么可以如此同步? 我们一起走过支教生活, 只不过我在山东,你在南疆; 我们一起进过辅导班, 你教语文, 我教化学;  但那个把各种offer拿到手软的你呀, 还能让我再仰望一些吗? 我在偷偷自恋, 此生怎可以如此幸运, 天上掉下个天才, 恰巧落到我身边.</p><p>你知道吗? 我从来不敢奢望的, 不敢奢望能有一个陪我走过大半生的你.<br>此生无数波折和转折, 来来回回没有固定的居所. 而我们, 却可以兜兜转转走到一起. 我该如何去感谢上苍的厚爱, 感谢会陪我走完余生的你.</p><p>我们从小学就在一起耶, 天下几人能有此番幸运?<br>而你知道我所有的经历, 无需回忆; 懂我每一个决定, 无需解释.</p><p>其实大学四年里, 我们几乎没有联系的对吗? 纵使经历了不同的风雨,  但我们从未有过时差.<br>回想这过去的半年里,<br>我在操场的屋顶上, 和你说我想要的未来; 在宿舍的走廊里, 和你说我暗恋的他, 满心欢喜听你说我的傻里傻气; 和你在中心花园里, 说我到底有多爱无情的他, 说我会在沉默里爱他直到十年以后. 和你在中教一层, 絮絮叨叨, 没完没了, 有说有笑, 消磨大半个晚上.<br>我们会想起旧时的同窗, 现在大都别番模样, 而我们却和当初一样.<br>我们会期许一个美好的未来, 隐居在荒山野林中, 一起开车出去兜风.<br>那个倔强而又优秀的你呀, 总能在自己的小圈子里做到最好, 就像水到渠成, 无需刻意, 毫不费力.</p><p>我喜欢灿若星辰的你, 带我一起优秀; 喜欢和你聊天时的自己, 轻松自在, 无所顾忌; 喜欢有你的我, 此生不会惧怕孤单, 回家不会百无聊赖, 你知道吗? 你会成为我回家的动力. 如果我妈看到我的偏心和执拗, 不知道会不会吃醋, 她养了20多年的女儿, 好似无牵无挂的过客. 如果我回家后还会一个人孤单, 还会一个人散步, 还会一个人把眼泪留给剧情, 总可以去找你, 看一看不一样的世界.</p><p>你一定知道我是写给你的, 歌词是你告诉我的, 我们刚刚通过电话.<br>我心疼和我一样倔强而又不服输的你, 知道你此刻仍然在寒夜里苦读, 所以我捧起书本, 去了自己该去的地方, 陪你一起感受奋斗的力量.<br>我等你, 等你来到我身边, 我会陪你走一走我疯跑过的操场, 指着9楼上的一扇窗告诉你, 看那个像城堡的地方, 我会每晚9点出现在那里, 一点一点靠近我的梦想, 拥抱我们想要的未来.</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读写pdf：茫茫辞海里，寻找我想要的你</title>
      <link href="/2019/12/09/Tools/2019-12-9-Python%E8%AF%BB%E5%86%99pdf%EF%BC%9A%E8%8C%AB%E8%8C%AB%E8%BE%9E%E6%B5%B7%E9%87%8C%EF%BC%8C%E5%AF%BB%E6%89%BE%E6%88%91%E6%83%B3%E8%A6%81%E7%9A%84%E4%BD%A0/"/>
      <url>/2019/12/09/Tools/2019-12-9-Python%E8%AF%BB%E5%86%99pdf%EF%BC%9A%E8%8C%AB%E8%8C%AB%E8%BE%9E%E6%B5%B7%E9%87%8C%EF%BC%8C%E5%AF%BB%E6%89%BE%E6%88%91%E6%83%B3%E8%A6%81%E7%9A%84%E4%BD%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>需要从某个顶会的pdf论文集中寻找和自己研究方向相关的论文，但是挨个pdf去ctrl+F太浪费生命了。我们尽量用最快捷的办法，解决低秩繁琐的事情，能让程序做的事情，拒绝暴力手工。<br>流程：按照关键词搜索并保存相关页面，这样，我可以顺便读一下摘要，筛选真正想读的论文。</p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>pdfminer3k读取pdf</p><pre class=" language-python"><code class="language-python">pip install pdfminer3k</code></pre><p>PyPDF2保存pdf</p><pre class=" language-python"><code class="language-python">pip install PyPDF2</code></pre><h2 id="走起我的小程序"><a href="#走起我的小程序" class="headerlink" title="走起我的小程序"></a>走起我的小程序</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfinterp <span class="token keyword">import</span> PDFResourceManager<span class="token punctuation">,</span> PDFPageInterpreter<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>converter <span class="token keyword">import</span> PDFPageAggregator<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>layout <span class="token keyword">import</span> LAParams<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfdevice <span class="token keyword">import</span> PDFDevice<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfparser <span class="token keyword">import</span> PDFParser<span class="token punctuation">,</span> PDFDocument<span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span> PdfFileWriter<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">PDFseeker</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span>savedName<span class="token punctuation">,</span>keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#解析目标关键词</span>    fp<span class="token operator">=</span>open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>    parser<span class="token operator">=</span>PDFParser<span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个与文档关联的解释器</span>    doc<span class="token operator">=</span>PDFDocument<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#PDf文档的对象</span>    resource<span class="token operator">=</span>PDFResourceManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建PDF资源管理器</span>    laparam<span class="token operator">=</span>LAParams<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#参数分析器</span>    device<span class="token operator">=</span>PDFPageAggregator<span class="token punctuation">(</span>resource<span class="token punctuation">,</span>laparams<span class="token operator">=</span>laparam<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个聚合器</span>    interpreter<span class="token operator">=</span>PDFPageInterpreter<span class="token punctuation">(</span>resource<span class="token punctuation">,</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建PDF页面解释器</span>    <span class="token comment" spellcheck="true">#链接解释器和文档对象</span>    parser<span class="token punctuation">.</span>set_document<span class="token punctuation">(</span>doc<span class="token punctuation">)</span>    doc<span class="token punctuation">.</span>set_parser<span class="token punctuation">(</span>parser<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#抓取目标页面</span>    pageindex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> doc<span class="token punctuation">.</span>get_pages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#处理每一页</span>        interpreter<span class="token punctuation">.</span>process_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用页面解释器来读取</span>        layout <span class="token operator">=</span> device<span class="token punctuation">.</span>get_result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用聚合器来获得内容</span>        <span class="token keyword">for</span> out <span class="token keyword">in</span> layout<span class="token punctuation">:</span>            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">'get_text'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#鉴于PDF既有text也有图片等等，为了确保不出错先判断对象是否具有 get_text()方法</span>                <span class="token keyword">if</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>out<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    pageindex<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#保存目标页面</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>pageindex<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        pdfWriter <span class="token operator">=</span> PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>        pdfReader <span class="token operator">=</span> PdfFileReader<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> pageindex<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#获取pdf共用多少页</span>            pdfWriter<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdfReader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将一个 PageObject 加入到 PdfFileWriter</span>        final_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>savedName<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>final_path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            pdfWriter<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>keyWord<span class="token punctuation">,</span><span class="token string">'is not found in'</span><span class="token punctuation">,</span>fileName<span class="token punctuation">)</span>    fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    fileName <span class="token operator">=</span> <span class="token string">"./Test.pdf"</span>      savedName <span class="token operator">=</span> <span class="token string">"./final.pdf"</span>     keyWord <span class="token operator">=</span> <span class="token string">"Huiyu Li"</span>     PDFseeker<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> savedName<span class="token punctuation">,</span> keyWord<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Time {:.3f} min'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y/%m/%d-%H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Conference and Journal of Medical Image</title>
      <link href="/2019/12/04/Medical%20Image/The%20Conference%20and%20Journal%20of%20Medical%20Image/"/>
      <url>/2019/12/04/Medical%20Image/The%20Conference%20and%20Journal%20of%20Medical%20Image/</url>
      
        <content type="html"><![CDATA[<h1 id="Conference"><a href="#Conference" class="headerlink" title="Conference"></a>Conference</h1><h2 id="Conference-Submission-Calendar"><a href="#Conference-Submission-Calendar" class="headerlink" title="Conference Submission Calendar"></a>Conference Submission Calendar</h2><table><thead><tr><th>Month</th><th>Conference</th></tr></thead><tbody><tr><td>January</td><td><strong>ICML</strong>, <strong>ECML</strong>, <strong>IJCAI</strong></td></tr><tr><td>February</td><td><strong>MIDL</strong></td></tr><tr><td>March</td><td><strong>MICCAI</strong>, <strong>ICCV</strong>, ECCV</td></tr><tr><td>April</td><td></td></tr><tr><td>May</td><td></td></tr><tr><td>Jun</td><td></td></tr><tr><td>July</td><td>ACCV</td></tr><tr><td>August</td><td></td></tr><tr><td>September</td><td><strong>AAAI</strong>, <strong>ICLR</strong></td></tr><tr><td>October</td><td><strong>ISBI</strong></td></tr><tr><td>November</td><td><strong>CVPR</strong></td></tr><tr><td>December</td><td><strong>IPMI</strong></td></tr></tbody></table><h2 id="Conference-Reading-Calendar"><a href="#Conference-Reading-Calendar" class="headerlink" title="Conference Reading Calendar"></a>Conference Reading Calendar</h2><table><thead><tr><th>January</th><th>February</th><th>March</th><th>April</th><th>May</th><th>Jun</th></tr></thead><tbody><tr><td></td><td><strong>CVPR</strong>, <strong>AAAI</strong></td><td><strong>IPMI</strong></td><td><strong>ISBI</strong></td><td><strong>ICLR</strong></td><td></td></tr><tr><td><strong>July</strong></td><td><strong>August</strong></td><td><strong>September</strong></td><td><strong>October</strong></td><td><strong>November</strong></td><td><strong>December</strong></td></tr><tr><td><strong>ICML</strong></td><td>ECCV, <strong>MIDL</strong>,<strong>IJCAI</strong></td><td><strong>ECML</strong></td><td><strong>MICCAI</strong>, <strong>ICCV</strong></td><td>ACCV</td><td><strong>NeurIPS</strong></td></tr></tbody></table><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><h4 id="IPMI-Information-Processing-in-Medical-Imaging"><a href="#IPMI-Information-Processing-in-Medical-Imaging" class="headerlink" title="IPMI (Information Processing in Medical Imaging)"></a>IPMI (Information Processing in Medical Imaging)</h4><p>顶级会议，两年召开一次，nature，science级别，一个非常小圈子的会。</p><h4 id="MICCAI-International-Conference-on-Medical-Image-Computing-and-Computer-Assisted-Intervention"><a href="#MICCAI-International-Conference-on-Medical-Image-Computing-and-Computer-Assisted-Intervention" class="headerlink" title="MICCAI (International Conference on Medical Image Computing and Computer Assisted Intervention)"></a>MICCAI (International Conference on Medical Image Computing and Computer Assisted Intervention)</h4><p>顶尖年会，接受论文较多，长文被SCI收录，短文不被SCI收录，Springer出版。</p><h4 id="ICML"><a href="#ICML" class="headerlink" title="ICML"></a>ICML</h4><p>CCF A, 机器学习方面最好的会议之一. 现在是IMLS主办, 每年举行. </p><h4 id="ECML"><a href="#ECML" class="headerlink" title="ECML"></a>ECML</h4><p>机器学习方面仅次于ICML的会议, 欧洲人极力捧场</p><h4 id="CVPR-Computer-Vision-and-Pattern-Recognition"><a href="#CVPR-Computer-Vision-and-Pattern-Recognition" class="headerlink" title="CVPR (Computer Vision and Pattern Recognition)"></a>CVPR (Computer Vision and Pattern Recognition)</h4><p>CCF A, CV顶会，有一个专题为Medical Image Analysis，基于图像分析的思路处理三维医学图像的特别有意义的结果可以投这个会议，EI收录。### ECCV (European Conference on Computer Vision)</p><h4 id="ICCV-（IEEE-International-Conference-on-Computer-Vision）"><a href="#ICCV-（IEEE-International-Conference-on-Computer-Vision）" class="headerlink" title="ICCV （IEEE International Conference on Computer Vision）"></a>ICCV （IEEE International Conference on Computer Vision）</h4><p>CCF A, CV顶会，EI收录。三维医学图像分析的很好结果可以投这个会议。</p><h4 id="AAAI"><a href="#AAAI" class="headerlink" title="AAAI"></a>AAAI</h4><p>CCF A, 美国人工智能学会AAAI的年会。</p><h4 id="ISBI-International-Symposium-on-Biomedical-Imaging"><a href="#ISBI-International-Symposium-on-Biomedical-Imaging" class="headerlink" title="ISBI (International Symposium on Biomedical Imaging)"></a>ISBI (International Symposium on Biomedical Imaging)</h4><p>新贵，oral talk的会议录用率在20%左右.</p><h4 id="MIDL-Medical-Imaging-with-Deep-Learning"><a href="#MIDL-Medical-Imaging-with-Deep-Learning" class="headerlink" title="MIDL (Medical Imaging with Deep Learning)"></a>MIDL (Medical Imaging with Deep Learning)</h4><h4 id="ICLR-International-Conference-on-Learning-Representations"><a href="#ICLR-International-Conference-on-Learning-Representations" class="headerlink" title="ICLR (International Conference on Learning Representations)"></a>ICLR (International Conference on Learning Representations)</h4><p>（国际学习表征会议），2013 年才刚刚成立了第一届。被认为「深度学习的顶级会议」</p><h4 id="NeurIPS"><a href="#NeurIPS" class="headerlink" title="NeurIPS"></a>NeurIPS</h4><p>CCF A, 神经计算方面最好的会议之一,  每年举行。</p><h4 id="IJCAI"><a href="#IJCAI" class="headerlink" title="IJCAI"></a>IJCAI</h4><p>CCF A, AI最好的综合性会议, 1969年开始, 每两年开一次, 奇数年开. </p><h1 id="Journal"><a href="#Journal" class="headerlink" title="Journal"></a>Journal</h1><h2 id="Level-1-1"><a href="#Level-1-1" class="headerlink" title="Level 1"></a>Level 1</h2><h4 id="MIA-Medical-Image-Analysis"><a href="#MIA-Medical-Image-Analysis" class="headerlink" title="MIA (Medical Image Analysis)"></a>MIA (Medical Image Analysis)</h4><p>计算机1区, 医学2区, 平均5.0个月</p><h4 id="IEEE-TMI（IEEE-Transactions-on-Medical-Imaging）"><a href="#IEEE-TMI（IEEE-Transactions-on-Medical-Imaging）" class="headerlink" title="IEEE TMI（IEEE Transactions on Medical Imaging）"></a>IEEE TMI（IEEE Transactions on Medical Imaging）</h4><p>医学图像处理顶级的杂志,生物医学图像。<br>平均审稿速度： 5.4个月；平均录用比例：很难</p><h4 id="TPAMI"><a href="#TPAMI" class="headerlink" title="TPAMI"></a>TPAMI</h4><p>CCF A,计算机视觉及模式识别领域最顶尖的SCI期刊</p><h4 id="Nature-Reviews-Cardiology"><a href="#Nature-Reviews-Cardiology" class="headerlink" title="Nature Reviews Cardiology"></a>Nature Reviews Cardiology</h4><h4 id="Cancer-Research"><a href="#Cancer-Research" class="headerlink" title="Cancer Research"></a>Cancer Research</h4><h4 id="Radiology"><a href="#Radiology" class="headerlink" title="Radiology"></a>Radiology</h4><h4 id="Proceedings-of-the-IEEE"><a href="#Proceedings-of-the-IEEE" class="headerlink" title="Proceedings of the IEEE"></a>Proceedings of the IEEE</h4><h4 id="Foundations-of-Computational-Mathematics"><a href="#Foundations-of-Computational-Mathematics" class="headerlink" title="Foundations of Computational Mathematics"></a>Foundations of Computational Mathematics</h4><h4 id="Journal-of-Thoracic-Oncology"><a href="#Journal-of-Thoracic-Oncology" class="headerlink" title="Journal of Thoracic Oncology"></a>Journal of Thoracic Oncology</h4><h4 id="European-Journal-of-Nuclear-Medicine-and-Molecular-Imaging"><a href="#European-Journal-of-Nuclear-Medicine-and-Molecular-Imaging" class="headerlink" title="European Journal of Nuclear Medicine and Molecular Imaging"></a>European Journal of Nuclear Medicine and Molecular Imaging</h4><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><h4 id="NeuroImage-sci2"><a href="#NeuroImage-sci2" class="headerlink" title="NeuroImage_sci2"></a>NeuroImage_sci2</h4><h4 id="Neurocomputing-sci2"><a href="#Neurocomputing-sci2" class="headerlink" title="Neurocomputing_sci2"></a>Neurocomputing_sci2</h4><h4 id="European-Radiology-sci2"><a href="#European-Radiology-sci2" class="headerlink" title="European Radiology_sci2"></a>European Radiology_sci2</h4><h4 id="Frontiers-in-Cardiovascular-Medicine-sci2"><a href="#Frontiers-in-Cardiovascular-Medicine-sci2" class="headerlink" title="Frontiers in Cardiovascular Medicine_sci2"></a>Frontiers in Cardiovascular Medicine_sci2</h4><h4 id="Cancers-sci2"><a href="#Cancers-sci2" class="headerlink" title="Cancers_sci2"></a>Cancers_sci2</h4><h4 id="Heart-Rhythm-sci2"><a href="#Heart-Rhythm-sci2" class="headerlink" title="Heart Rhythm_sci2"></a>Heart Rhythm_sci2</h4><h4 id="Journal-of-Neurosurgery-sci2"><a href="#Journal-of-Neurosurgery-sci2" class="headerlink" title="Journal of Neurosurgery_sci2"></a>Journal of Neurosurgery_sci2</h4><h4 id="IEEE-Transactions-on-Biomedical-Engineering-sci2-3"><a href="#IEEE-Transactions-on-Biomedical-Engineering-sci2-3" class="headerlink" title="IEEE Transactions on Biomedical Engineering_sci2_3"></a>IEEE Transactions on Biomedical Engineering_sci2_3</h4><h4 id="IEEE-Journal-of-Biomedical-and-Health-Informatics-sci2"><a href="#IEEE-Journal-of-Biomedical-and-Health-Informatics-sci2" class="headerlink" title="IEEE Journal of Biomedical and Health Informatics_sci2"></a>IEEE Journal of Biomedical and Health Informatics_sci2</h4><h4 id="IEEE-journal-of-translational-engineering-in-health-and-medicine-sci2"><a href="#IEEE-journal-of-translational-engineering-in-health-and-medicine-sci2" class="headerlink" title="IEEE journal of translational engineering in health and medicine_sci2"></a>IEEE journal of translational engineering in health and medicine_sci2</h4><h4 id="Statistics-and-Computing-sci2"><a href="#Statistics-and-Computing-sci2" class="headerlink" title="Statistics and Computing_sci2"></a>Statistics and Computing_sci2</h4><h4 id="ACM-Transactions-on-Graphics-sci2"><a href="#ACM-Transactions-on-Graphics-sci2" class="headerlink" title="ACM Transactions on Graphics_sci2"></a>ACM Transactions on Graphics_sci2</h4><h1 id="Useful-Links"><a href="#Useful-Links" class="headerlink" title="Useful Links:"></a>Useful Links:</h1><h4 id="Top-Conferences-By-Deadlines"><a href="#Top-Conferences-By-Deadlines" class="headerlink" title="Top Conferences By Deadlines"></a><a href="https://www.guide2research.com/topconf/" target="_blank" rel="noopener">Top Conferences By Deadlines</a></h4><h4 id="Top-Journals-with-Impact-Factor"><a href="#Top-Journals-with-Impact-Factor" class="headerlink" title="Top Journals with Impact Factor"></a><a href="https://www.guide2research.com/special-issues/" target="_blank" rel="noopener">Top Journals with Impact Factor</a></h4><h4 id="Top-1000-Scientist-for-Computer-Science"><a href="#Top-1000-Scientist-for-Computer-Science" class="headerlink" title="Top 1000 Scientist  for Computer Science"></a><a href="https://www.guide2research.com/scientists/" target="_blank" rel="noopener">Top 1000 Scientist  for Computer Science</a></h4><h4 id="University-Ranking-for-Computer-Science"><a href="#University-Ranking-for-Computer-Science" class="headerlink" title="University Ranking for Computer Science"></a><a href="https://www.guide2research.com/ranking/" target="_blank" rel="noopener">University Ranking for Computer Science</a></h4>]]></content>
      
      
      <categories>
          
          <category> Medical Image </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conference and Journal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的医学图像阅读器</title>
      <link href="/2019/12/01/Tools/2019-12-1-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2019/12/01/Tools/2019-12-1-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="RadiAnt"><a href="#RadiAnt" class="headerlink" title="RadiAnt"></a><a href="https://www.radiantviewer.com/en/" target="_blank" rel="noopener">RadiAnt</a></h1><p>中文主页：<a href="http://www.radiantviewer.com/zh/。" target="_blank" rel="noopener">http://www.radiantviewer.com/zh/。</a></p><p>专业的<strong>DICOM阅读器</strong>, 灵活、简单、快速, 读入CT图片后可以自动调节窗宽窗位.</p><h1 id="ITKsnap"><a href="#ITKsnap" class="headerlink" title="ITKsnap"></a><a href="http://www.itksnap.org/pmwiki/pmwiki.php" target="_blank" rel="noopener">ITKsnap</a></h1><p>相较于RadiAnt, ITKsnap可以识别多种类型的医学图像, 可以进行病灶的勾画和标注.</p><p>官网有详细的<a href="http://www.itksnap.org/pmwiki/pmwiki.php?n=Documentation.SNAP3" target="_blank" rel="noopener">配套教程</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Medical Image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Distance Transform</title>
      <link href="/2019/11/29/Knowledge/2019-11-29-Distance-Map/"/>
      <url>/2019/11/29/Knowledge/2019-11-29-Distance-Map/</url>
      
        <content type="html"><![CDATA[<p>写在前面：近几天研究处于卡壳状态，疯狂地Coding，无奈的失败。。。<br>感觉老师说得特别对。一项研究开始之前，要不断地思考，先明确它的物理意义，然后再去动手实现。而不是像我这样，不管三七二十一，先去实现，结果不好，废铜烂铁。<br>一场有深度，有价值的思考，可以给自己接下来的实验省去许多不必要的麻烦。一个新的想法，如果理论上说不通，基本上没什么存活的意义。遇事多问为什么？<br>我为什么要这这样做？<br>它的作用是什么？<br>它的物理意义是什么？</p><h1 id="Distance-Transform"><a href="#Distance-Transform" class="headerlink" title="Distance Transform"></a>Distance Transform</h1><p>先了解一下什么是Distance Transform？它的物理意是什么？<br><a href="https://blog.csdn.net/weixin_44058333/article/details/100186066" target="_blank" rel="noopener">Distance transform(距离变换)</a></p><h1 id="Matlab-计算Distance-Transform"><a href="#Matlab-计算Distance-Transform" class="headerlink" title="Matlab 计算Distance Transform"></a>Matlab 计算Distance Transform</h1><p>bwdist()会将前景置零，计算背景像素点的Distance Transform。</p><pre class=" language-malab"><code class="language-malab">input = [[0,1,1,1,1,0];         [0,1,1,1,1,0];         [0,0,0,1,1,0];         [0,0,0,1,1,0];         [0,0,0,1,1,0]];output = bwdist(input);disp(output);</code></pre><p>output：默认计算背景的Distance Transform</p><blockquote><p>1.0000         0         0         0         0    1.0000<br>1.0000         0         0         0         0    1.0000<br>1.4142    1.0000    1.0000         0         0    1.0000<br>2.2361    2.0000    1.0000         0         0    1.0000<br>3.0000    2.0000    1.0000         0         0    1.0000</p></blockquote><h1 id="Python-计算Distance-Transform"><a href="#Python-计算Distance-Transform" class="headerlink" title="Python 计算Distance Transform"></a>Python 计算Distance Transform</h1><p><a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.ndimage.morphology.distance_transform_edt.html" target="_blank" rel="noopener">distance_transform_edt</a>会将背景置零，计算前景的Distance Transform（和matlab的计算结果正好相反）。使用np.logical_not()可以得到前景的Distance Transform。</p><pre class=" language-pytho"><code class="language-pytho">from scipy.ndimage import distance_transform_edtimport numpy as npimport matplotlib.pyplot as pltinput = np.array([[0,1,1,1,1,0],                   [0,1,1,1,1,0],                   [0,0,0,1,1,0],                   [0,0,0,1,1,0],                   [0,0,0,1,1,0]])out0 = distance_transform_edt(np.logical_not(input))out1 = distance_transform_edt(input)print(out0)print(out1)</code></pre><p>out0:背景的Distance Transform</p><blockquote><p>[[1.         0.         0.         0.         0.         1.        ]<br>[1.         0.         0.         0.         0.         1.        ]<br>[1.41421356 1.         1.         0.         0.         1.        ]<br>[2.23606798 2.         1.         0.         0.         1.        ]<br>[3.         2.         1.         0.         0.         1.        ]]</p></blockquote><p>out1:默认计算前景的Distance Transform</p><blockquote><p>[[0.         1.         2.         2.         1.         0.        ]<br>[0.         1.         1.         1.41421356 1.         0.        ]<br>[0.         0.         0.         1.         1.         0.        ]<br>[0.         0.         0.         1.         1.         0.        ]<br>[0.         0.         0.         1.         1.         0.        ]]</p></blockquote><p>out0+out1</p><blockquote><p>[[1.         1.         2.         2.         1.         1.        ]<br>[1.         1.         1.         1.41421356 1.         1.        ]<br>[1.41421356 1.         1.         1.         1.         1.        ]<br>[2.23606798 2.         1.         1.         1.         1.        ]<br>[3.         2.         1.         1.         1.         1.        ]]</p></blockquote><table><thead><tr><th><img src="/medias/pic_md/Knowledge/DistanceMap2.png" alt="binaryMap"></th><th><img src="/medias/pic_md/Knowledge/DistanceMap3.png" alt="binaryMap"></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>综上，前景和背景的Distance Transform不可共存，到底选用哪一款，当然看你的实验需要。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Distance Transform </tag>
            
            <tag> Matlab </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activation and Loss</title>
      <link href="/2019/11/28/MyResearch/2019-11-28-Activation,%20Label%20and%20Loss/"/>
      <url>/2019/11/28/MyResearch/2019-11-28-Activation,%20Label%20and%20Loss/</url>
      
        <content type="html"><![CDATA[<p>应用场景：医学图像的分割<br>分割结果由神经网络给出，所以，神经网络的最后一层决定了输出的特性。</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p>此处先介绍三组具有代表性的激活函数：</p><table><thead><tr><th>$$Softmax(x_i) = \frac{exp(x_i)}{\sum\nolimits_jexp(x_j)}$$</th><th>$$Sigmoid(x) = \frac{1}{1+exp(-x)}$$</th></tr></thead><tbody><tr><td></td><td><img src="/medias/pic_md/MyResearch/Sigmoid.png" width="200" hegiht="100" align="center"></td></tr></tbody></table><table><thead><tr><th>$$ReLU(x) = max(0,x)$$</th><th>PReLU</th></tr></thead><tbody><tr><td><img src="/medias/pic_md/MyResearch/Relu.jpg" width="200" hegiht="100" align="center"></td><td><img src="/medias/pic_md/MyResearch/PRelu.jpg" width="200" hegiht="100" align="center"></td></tr></tbody></table><table><thead><tr><th>Tanh</th><th>HardTanh</th><th>SoftShrink</th><th>TanhShrink</th></tr></thead><tbody><tr><td><img src="/medias/pic_md/MyResearch/Tanh.jpg" width="200" hegiht="100" align="center"></td><td><img src="/medias/pic_md/MyResearch/Hardtanh.png" width="200" hegiht="100" align="center/"></td><td><img src="/medias/pic_md/MyResearch/SoftShrink.jpg" width="200" hegiht="100" align="center"></td><td><img src="/medias/pic_md/MyResearch/TanhShrink.jpg" width="200" hegiht="100" align="center"></td></tr></tbody></table><h1 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h1><h2 id="Regression-Segmentation"><a href="#Regression-Segmentation" class="headerlink" title="Regression Segmentation"></a>Regression Segmentation</h2><h3 id="1-L1-Loss"><a href="#1-L1-Loss" class="headerlink" title="1. L1 Loss"></a>1. L1 Loss</h3><p>$${L_1} = \left| {p - g} \right|$$</p><h3 id="2-smooth-L1-Loss"><a href="#2-smooth-L1-Loss" class="headerlink" title="2. smooth L1 Loss"></a>2. smooth L1 Loss</h3><p>$$Smooth\ {L_1} = \left{ {\begin{array}{*{20}{c}}<br>{0.5{x^2},\ \left|x \right| &lt; 1}\<br>{\left| x \right| - 0.5,\ x &lt;  - 1\ or\ x &gt; 1}<br>\end{array}} \right.$$</p><h3 id="3-L2-loss"><a href="#3-L2-loss" class="headerlink" title="3. L2 loss"></a>3. L2 loss</h3><p>$${L_2} = {\left| {p - g} \right|^2}$$</p><h3 id="4-Ridge-regression"><a href="#4-Ridge-regression" class="headerlink" title="4. Ridge regression"></a>4. Ridge regression</h3><p>$$Rige = MSE(p,g;\theta ) + \alpha \frac{1}{2}\sum\nolimits_i {\theta _i^2} $$</p><h3 id="5-LASSO"><a href="#5-LASSO" class="headerlink" title="5. LASSO"></a>5. LASSO</h3><p>$$LASSO = MSE(p,g;\theta ) + \alpha \sum\nolimits_i {\left| {\theta _i} \right|}$$</p><p>参考：<br><a href="https://blog.csdn.net/weixin_44058333/article/details/103205940" target="_blank" rel="noopener">L1 loss VS L2 loss； L1 regularization VS L2 regularization</a></p>]]></content>
      
      
      <categories>
          
          <category> MyResearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Segmentation </tag>
            
            <tag> Regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玉言又止</title>
      <link href="/2019/11/27/Diary/2019-11-27-%E7%8E%89%E8%A8%80%E5%8F%88%E6%AD%A2/"/>
      <url>/2019/11/27/Diary/2019-11-27-%E7%8E%89%E8%A8%80%E5%8F%88%E6%AD%A2/</url>
      
        <content type="html"><![CDATA[<p>往昔太美好，让我舍不得去辜负。<br>我从未预料到，写日记，会成为我一生的习惯；写博客，会成为此生最美好的事情。<br>文字，作为最能穿透心灵的载体，帮我收藏了险些被遗忘的过往，也收录了我过去的跌跌撞撞。<br>重读曾经的日记，回首远去的曾经，我在和昨天共舞的同时，重拾勇气和动力。</p><blockquote><p>只有经历过美好，才知道幸福的样子</p></blockquote><blockquote><p>我爱Ta, 是因为Ta没有那么简单；比翼齐飞的陪伴，让昨日变得无比留恋。</p><p>因为有你，我想遇见更好的自己。</p></blockquote><blockquote><p>当我有了在意的人和事，整个世界都变得轻快明亮了。因为我有足够的勇气去忽略无关紧要，可以目标明确地去聚焦，也有足够的胆量去保卫我的疆域。</p><p>Ta也许是一个人，也许是一件事，也许是我窗台上的玫瑰，予我多年陪伴的仙人掌，我守护多年的花园。。。只因独一无二的存在，刻骨铭心的陪伴，让原本平凡的日子变得无与伦比。</p></blockquote><blockquote><p>只要心是明朗的，所见之处阳光满溢。</p></blockquote><p>这里写下的，都是某个时刻，关于某次遇见，恰到好处的突发奇想，承载了我日常的可遇而不可求。</p><blockquote><p>我希望自己永远记得:<br>有慧玉，就会有奇迹；<br>慧玉值得世间所有美好；</p><p>我不知道未来究竟会如何，我只知道，不管我选择那一条路，都会遇见无限可能。<br>我从未如此自信过，自信地站在了这个时刻的人生巅峰。<br>我知道未来依旧会有艰难险阻，但我已经有足够的勇气去相信，挑战和机遇并存。</p></blockquote><blockquote><p>今天在电闪雷鸣中玩命一样地疯跑了5圈，依靠心肺炸裂的感觉回归淡定<br>狂奔的感觉注定不会很舒服，但突破极限后的感觉让一切都值得<br>我不知道昨天的自己究竟付出了多少，才换来了今天的无限可能<br>我不知道明天的自己是否记得远去的曾经，相信自己就是无限可能<br>在我心底，人生就像一场800米，不论长路漫漫有多煎熬，不管冲刺的刹那有多惨烈，我永远无法拒绝心跳加速的快感</p></blockquote><blockquote><p>有那么一段时间，天堂和地狱的差别，仅需要一封新消息提醒。<br>茫茫人海里，有多人在负重前行，谁又能理解谁的无奈和愁容？</p></blockquote><blockquote><p>每个人要走的路，都是不一样的，所有人的明天，都充满未知，也无所参照，所以，知道自己到底想要什么，是一件很重要的事情。</p></blockquote><blockquote><p>不要把未来寄希望于某个人，或者把某个追求具象到某个人，除非，那个人是你自己。<br>与其把赌注下在别人身上，不如自己掌控主动。</p></blockquote><blockquote><p>做自己的国王，懂得独立，拥有自由，是一件很了不起的事情。<br>也许艰难些，但不要对自己丧失信心。<br>也许，有一天，我会一无所有，只剩下内心的火热来驱赶平凡。<br>哪怕你只剩美好的追求，相对正确的坚持，我想，都是一件值得骄傲的事情。</p></blockquote><blockquote><p>好论文需要细细品，如此才能品出好味道。</p></blockquote><blockquote><p>勇敢，聚焦；由简入繁，not由繁化简<br>我不再好奇为什么Pro们能按时昨晚当天的工作，因为那不过是些“文书”的工作，而且我也可以做到。<br>效率和能力，以及对计划的把控，都要不断在战场中得到锻炼。<br>所有的挑战，只会让一个人更强大；逃避和拖延，才会打垮一个人。张开怀抱，你会收获更多的人生体验；立即开始，你会拥有更多自信，从容和力量。<br>小时候读过的一篇文章如是说：<br>我曾经因为有几个大学生登山迷途丧生，而访问某位登山专家。其中一个问题是：”如果我们在半山腰，突然遇到大雨，应该怎么办？”<br>登山专家说：”你应该向山顶走。”<br>“为什么不往山下跑？山顶风雨不是更大吗？”我怀疑地问。<br>“往山顶走，固然风雨可能更大，却不足以威胁你的生命。至于向山下跑，看来风雨小些，似乎比较安全，但却可能遇到暴发的山洪而被活活淹死。”登山专家严肃地说：”对于风雨，逃避它，你只有被卷入洪流；迎向它，你却能获得生存！”<br>It’s totally true, 迎向风雨，获得生存。</p></blockquote><blockquote><p>当时光成为雕刻机，对钻石来说，是一件幸福的事情。<br>时间，充满神奇和魔力，<br>它既可以让病树化为朽木，也可以让新芽长成参天大树。<br>它既彰显公允，也充满残酷，是强压之下的抛光机，普通日子里的美工笔，也是，一不留神，无法掌控的杀猪刀。</p></blockquote><blockquote><p>我在恍如夏日的冬阳里瞥见了冬初写给自己的一句话：日日是好日。它出自文偃禅师，是沥川口中的台词，也是树木希林主演的茶道电影。这，是它的来由。它之所以跃然我的纸上，是因为我在那个时段里，连每一口呼吸，都充满压力。<br>如今想一想远去的昨天，不禁恍然大悟，是呀，一切都会过去的。痛苦不会很长久，幸福会很短暂，就连严冬都来去匆匆。<br>不管外界如何，关键是要有一颗稳定的心；如果蹦极失败，自己就是最好的缓冲。<br>还有，该来的总会来的，这句话是一位朋友告诉我的。所以，不要为了未知的困难，而阻挡了眼前的脚步，你需要勇敢一些，再勇敢一些，做一个勇敢的赛车手。而且，人生的许多赛程，你完全可以依靠自己扭转战局。</p></blockquote><blockquote><p>爱，让一切不同。<br>这是我爱上一个人，爱上一件事之后的切身体验，融化的心，无尽的勇气， 和不知疲倦的狂热，哪怕未来积毁销骨，都无法抹除曾经拥有。</p></blockquote><blockquote><p>洗澡的空隙，厕所中的片刻，这些短暂的放空或逃离，帮我理清了许多事。<br>我不再纠结考试或保送，不在为自己没有坐上第一趟列车而懊悔不已。不管徒步，单车，还是私家车，我们的交通工具是不一样，但沿途看到的风景也截然不同。<br>我不再艳羡一生无忧的人有多幸福，因为形形色色的经历，会让我懂得很多。<br>我做的每一次选择，都是在给自己一个新的机会，去遇见新的成长，拥有新的经历。<br>尽管明天依旧充满未知，但我已经拥有勇气，而且懂得聚焦，这是我此番旅途的意外至宝。</p></blockquote><blockquote><p>善良，仅仅是众多选择中的一种而已。<br>你可以选择做一个好女儿，好妻子，好母亲，也可以选择去做它的反义词。只是一种选择而已。<br>而我选择善良，屏蔽丑恶，大概不是因为一直活在温室里，而是因为我遇见过很多，从此几乎认为，除了能夺走我生命的东西，四舍五入，都可以认为是nice的事情。仅此而已。</p></blockquote><blockquote><p>用心，是开启一切的钥匙。<br>有一个未来目标，总能让我欢欣鼓舞，只知道，确定了就义无反顾/<br>就像飞向火光的灰蛾，甘愿做烈焰的俘虏/<br>在一往情深的日子里，要输就输给追求，要嫁就嫁给幸福。</p></blockquote><blockquote><p>试问岭南应不好。却道。此心安处是吾乡。==我喜欢的，就是最好的。<br>一首《定风波》道出了我这一年最想说的一句话。也许，久经波折的人，才值得:<br>万里归来颜愈少。微笑。笑时犹带岭梅香。</p></blockquote><blockquote><p>人生很重要的是态度，处事的态度，待人的态度。暂且不去想手头的某件事能给自己带来什么，首先要有做下去的意义，要有说服自己的理由。<br>如果能时刻保持清醒，不轻易随波逐流，不强迫自己去适应某些不舒服不正常的环境，自是人生一大幸事。就像慢慢地我们会懂得，一时的新鲜感会随着时间的推移产生厌恶，一时赚足眼球的事物时间久了会褪色。就像你升学，升职，登上了某一个更高的舞台，并不意味着段位越高就越顺利，平台越低就越难生存，事在人为，所有的一切都永远都掌握在自己手中。<br>月有阴晴圆缺，人有旦夕祸福。没有永恒的幸福和痛苦，颠峰和低估。没有必要为了闪耀的星光灼伤眼睛，也没有必要对暗夜中的萤火冷嘲热讽，不以物喜，不以己悲，宁静透彻，方为佳选。</p></blockquote><blockquote><p>是寻一座灯塔聊做依傍，还是相信心中的光芒？<br>是缺少遇见未来的力量，还是不敢坚持孤独的向往？<br>不止为何缘故，想到了Monet，也许是我迷上了其中的色彩，也许是因为Titanic中Rose的一句话，也许是因为说不出来的其他原因。<br>深夜里，想到了蔚蓝星空下的坠树；想到了金色余晖下的森林；想到了穷困的画家和平凡的建筑系学生一起追逐梦想的故事；想到了放手去追逐，去勾勒，去寻找自己真正喜欢的东西；想到了西装，剧本，音乐，绘画的未知殿堂。<br>老师说，人生就像loss寻优，如果不能到达最优，次优也是好的。<br>如果我不能去追逐自己想要的东西，认真做好当下的事，大概也是好的。<br>我也喜欢去相信，越努力，越幸运。</p></blockquote><blockquote><p>每一个当下，都有值得去追逐，去付出的东西。不知道远方在哪里，就先把脚下的路做到最好。<br>斯人若彩虹，遇上方知有。还是那句话，去遇见彩虹一样的灵魂，去成为这样的彩虹，以后要培养这样的彩虹。<br>登山之路千万条，你不是要走最光彩照人的那一条，而是要走最适合自己的那一条。</p></blockquote><blockquote><p>睡前在纠结要不要考博，梦里一个女孩把一片沙漠种成了绿洲，想风一样快乐：“我喜欢把不确定的事，变得确定一些。”我想这大概就是她想和我说的话。</p></blockquote><blockquote><p>如果你对未知未来充满恐惧和担心，可能是你对无法handle当下的影射，与其焦虑并不太可能发生的祸患，倒不如用心走好当先。如果每一个当下你都可以完美应对，未来还有什么好担心的。</p></blockquote><blockquote><p>人生在世，怎么可能不经历几场大的磨难，也许是天灾，也许是人祸，无法避免也好，尽量规避也罢，你都得学会勇敢面对。</p></blockquote><blockquote><p>人生最安全的方式，就是无论何时何地，都能过得精彩绝伦。</p></blockquote><blockquote><p>有很多你没有经历的事，显得很孤独，告诉自己，这是一件很平常的事情。如果有一个人能做到，你一定也可以做到，如果没有人做到，你就去做第一个。</p></blockquote><blockquote><p><strong>自己的路自己走，一个人去面对所有。</strong>所谓钱可以解决的问题，从来都不是问题，所谓朋友的帮助可以度过的难关，从来都不是难关。<br>一个人，走着走着，总要遇见一些困难，足够的金钱和朋友的帮助都无济于事。<br>首先告诉自己，这很正常，是个人总要遇见。<br>然后，自己一个人安安静静，平平稳稳地度过这些磨难。<br>不论遇见什么，都要看到阳光的那一面，用最快的时间找到正确的打开方式。</p></blockquote><blockquote><p><em>不轻易去麻烦别人，是应有的修养之一。*</em>每个人的时间和精力都很宝贵，每个人在自私的同时，要懂得去尊重别人的自由和安排。<br>为人处世最好不要精打细算，考虑着每一份付出都要获得应有的回报，这样自己会心累，甚至会心碎；每个人都不傻，当别人看穿你的“交易”，当是转身离去的时刻。</p></blockquote><blockquote><p><strong>真正的快乐，从来和金钱无关，最宝贵的，从来都是时间。</strong>金钱买不来快乐，也守不住真正的安全感，不要让金钱成为枷锁。拮据的时候就过紧凑的日子，富有的时候去享受可及的奢华，任何时候，都享受和拥抱当下的生活。</p></blockquote><blockquote><p><strong>时间的沉淀可以帮你甄别好坏。</strong>有些灰暗的模糊，不要着急去下定义，有些灿烂的心动，不要着急去奋不顾身，迟钝一些，可以交给时间的东西就不要着急去做决断。</p></blockquote><blockquote><p>*<em>希望你有所爱，有所期待。 *</em></p></blockquote><blockquote><p>*<em>不要认为自己很惨，惊喜，很可能就在下一秒。 *</em></p></blockquote><blockquote><p><strong>就当所有的困难都是为了遇见你，所必须经历的旅程。</strong>我知道你也会迷茫，也会恐惧，也会担心，告诉自己 ，这些都很正常。看一看窗前有故事的栀子花，欣欣然绿意渐浓，似乎没有什么可以阻挡成长和繁盛的脚步。</p></blockquote><blockquote><p>一个人身上珍贵的品质是善良，她可以愚钝，但绝不可以不择手段；<br>一个人身上闪光的特质是追求，目标清晰，爱己所爱，无怨无悔，那最好不过。</p></blockquote><blockquote><p>人与人之间最大的区别，是思想的错位。</p></blockquote><blockquote><p>常说目光要长远，殊不知，每一步的脚踏实地，才是长远之道的根本。</p></blockquote><blockquote><p>“U” are master of your own world. 所以，自己的事情靠自己去主宰，自己的问题靠自己去寻找出路，其他的一切，都只能是辅助。</p></blockquote><blockquote><p>不要妄想去读最好的书，以最快的方式滋养灵魂。接触高质量的东西的确可以在一定程度上减少生命的浪费，却并不意味着生命的成长，因为生命的成长需要你的“独立思考”，所以，食糟粕不一定成侏儒，享精华未必能成巨人。</p></blockquote><blockquote><p>我会懂得这个世界的残酷，也愿意去相信美好依然存在。</p></blockquote><blockquote><p>总是当局者迷，尤其是在黑白交错的灰色地带，没有绝对的对与错，也许应该相信我认为，我认为正确的事情就去追，不管结局如何，起码收获成长。</p><p>任何事情，都可能有“例外”不是吗？也许大千世界平平无奇，偏偏唯独这一件会成为例外。</p></blockquote><blockquote><p>许多的人和事，真正的放下不过是三个字“不在乎”。从此我的脑海里，不再有你的专属领地，从此你的存在对我来说平淡无奇。我不再手足无措，也不会故作冷漠。</p></blockquote><p>我喜欢的词句——每一句话都有故事</p><p>《定风波·南海归赠王定国侍人寓娘》：宋-苏轼<br>常羡人间琢玉郎，天应乞与点酥娘。尽道清歌传皓齿，风起，雪飞炎海变清凉。<br>万里归来颜愈少，微笑，笑时犹带岭梅香。试问岭南应不好，却道：此心安处是吾乡。</p><blockquote><p>那一天读论文，像乌龟一样逐字逐句的耐心品味，那一刻，时间的奢侈以及内心的宁静，赋予了内心强大的安全感。就在那一瞬间，我相信，不会再有外物可以伤害到我，哪怕是在空闲时间里占满我心灵的Scarecrow。</p></blockquote><blockquote><p>那一刻，慢慢懂得，所谓世间宁静，不若心灵的安静，人生在世，总能寻一方心灵的净土，感受时间停滞的永恒。</p></blockquote><blockquote><p>是谁说，世间没有永恒？差点让我相信了这诡异的谎言。</p></blockquote><blockquote><p>“此心安处，便是吾乡”。料想柔奴定是人间佳丽，得遇王巩；人品高洁，方成佳话。再附一曲，聊表思绪：</p></blockquote><p>云伯《颐道堂文集》中，有《与姬人采鸾书》云：“十年以前，慕君之色；十年以后，爱君之才。经岁以来，感君之情；一夕之谈，重君之德。湖山之友，闺房之侣，向惟鸥波，今则停云，不图此生，乃兼二妙。新诗在袖，别泪在襟，言念君子，如何勿思？奉别以来，风餐水宿，舟行六日，始达邗江，小住浃旬，当至袁浦。小诗一律，聊志别怀。花气侵人，不宜起早，月痕感梦，莫爱眠迟。寒暖自珍，起居无恙。临楮怅怅，不知所云。”</p><p>《喜欢一个人》吴桂君<br>伤害你的不是对方的绝情，而是你心存幻想的坚持。<br>爱情永远是两个人的努力，而不是一个人的委屈求全。<br>喜欢一个人，<br>始于颜值，陷于才华，<br>忠于人品，痴于肉体，<br>迷于声音，醉于深情。<br>这样在一起，<br>才是嫁给了爱情，<br>愿你遇到一个成熟的爱人，<br>愿你执迷不悟时少受点伤，<br>愿你幡然醒悟时还赶得上。</p><p>多谢你如此精彩耀眼，做我平淡岁月里星辰</p><p>我们首先要明白这么一件事，在自由恋爱，信息对称的当下，每个人都喜欢择优而从之。你喜欢的人，一般不会只有你才喜欢，而有一个喜欢你的人说明你很幸运。</p><p>《为学》彭端淑<br>天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。人之为学有难易乎？学之，则难者亦易矣；不学，则易者亦难矣。<br>吾资之昏，不逮人也，吾材之庸，不逮人也；旦旦而学之，久而不怠焉，迄乎成，而亦不知其昏与庸也。吾资之聪，倍人也，吾材之敏，倍人也；屏弃而不用，其与昏与庸无以异也。圣人之道，卒于鲁也传之。然则昏庸聪敏之用，岂有常哉？<br>蜀之鄙有二僧：其一贫，其一富。贫者语于富者曰：“吾欲之南海，何如？”富者曰：“子何恃而往？”曰：“吾一瓶一钵足矣。”富者曰：“吾数年来欲买舟而下，犹未能也。子何恃而往！”越明年，贫者自南海还，以告富者，富者有惭色。<br>西蜀之去南海，不知几千里也，僧富者不能至而贫者至焉。人之立志，顾不如蜀鄙之僧哉?是故聪与敏，可恃而不可恃也；自恃其聪与敏而不学者，自败者也。昏与庸，可限而不可限也；不自限其昏与庸，而力学不倦者，自力者也。</p><p>送东阳马生序》明-宋濂<br>余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。</p><p>既加冠，益慕圣贤之道，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p><p>当余之从师也，尝负笈曳屣，行深山巨谷中。穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四肢僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴珠缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，煜然若神人。余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p><p>今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵《诗》《书》，无奔走之劳矣；有司业、博士为之师，未有问而不告、求而不得者也；凡所宜有之书，皆集于此，不必若余之手录、假诸人而后见也。其业有不精、德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p><p>东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达；与之论辩，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知余者哉！</p><p>战国时期荀子的《劝学》 唐代韩愈的《师说》 清代彭端的《为学》</p><blockquote><p>我本期望此生得以早些遇见最大的伤害，如此余生便不再畏惧，其实，当自己的心底有了真正的勇气，同样可以无惧人任何伤害。</p></blockquote><blockquote><p>我希望可以永远保持住自己的骨气和纯净，因为那是我独树一帜的底气。</p></blockquote><blockquote><p>慢慢地了解自己，学会和自己相处<br>我希望你可以尊重自己内心，做自己喜欢的事情，爱自己喜欢的人。</p></blockquote><blockquote><p>我发现自己成长了许多，我还记得去年的0510，拐弯去二食堂的路上，S问我喜不喜欢现在的方向。我当时坚信任何一个方向往深了走，都会遇见困难；我喜欢日久生情，每一个方向，时间久了，付出的心血多了，我都会喜欢上它。所以，对我来说，没有特殊的喜好，选择哪个一并不重要，我会等，等到某个方向我走来。<br>而现在呢，开始学着照顾自己的特殊偏好，希望未来的自己有足够的能力，去保护和尊重内心最真实的想法，做自己最喜欢的事情，爱自己最喜欢的人。</p></blockquote><blockquote><p>既然喜欢仍在，就好好去爱。<br>不管是为一个人，还是对一件事，只需要这唯一理由，就不要轻言放弃。<br>能如此执着的爱上一个人，这本身恐怕就是件了不起的事。——村上春树</p></blockquote><p>作家柏邦妮曾采访袁泉，并评价说：“她有绝顶的才华，绝顶的敏感，也有绝顶的骄傲，这些东西揉合在一起，她的一生不会是容易的。十年之后，她好像还像我初见她的时候一样，始终没有大红大紫，却是沉金冷玉那样的女演员，她每次出场，哪怕只有一个镜头，却如此隽永难忘。她的柔弱和强韧，就像一株风中的芦苇，随时都会折断，却永远不。她的冷香和热毒，就像一味珍稀的丸药，你可以治好自己，但舍不得。”</p><blockquote><p>认真，永远不失真<br>认真对待有关自己的每个决定，对自己的行为负责，独自承担所有后果。</p></blockquote><p>心将流水同清净，身与浮云无是非</p><p>胜，不妄喜；败，不遑馁；胸有激雷而面如平湖者，可拜上将军。</p><p>世上没有最正确无误的决定，所谓正确的决定，一定是“亦余心之所善兮”的向往。</p><p>扎扎实实地做好当下的事，是治愈迷茫最好的方式</p><p>川北悦吏子曾说，生命不必每时每刻都要冲刺，低沉时就当作放了一个悠长的假期。</p><p>爱上一个人，愿意为其倾尽所有；爱上一件事，愿意为它熬尽所有的心血。这时，这件事不仅仅是职业，更是事业。<br>心灵不在它生活的地方，而在它所爱的地方。</p><blockquote><p>夜空中，总有一颗最亮的星辰，对不同的人而言有着独特的意义。<br>中学时代，我发现了这个秘密，就一颗星，镶在我窗框里，陪我度过每一个孤单而又无助的夜晚。<br>高中时代，搬家到千里之外，书桌前的窗框里，依旧只有一颗星，陪我收藏点点滴滴的努力，度过跌跌撞撞的日子。<br>大学毕业，搬家到马路的那一边，闺房的窗框里，还是那颗最闪亮的星，陪我度过每一段思念和忧伤，迎接意想不到的惊喜。<br>读研时代，校园的上空，就是那颗最亮的星辰，见证我的每一段绝望，无助，痛苦，开心，以及成长，在我肆意奔跑的时候，在我夜归的路上。<br>我知道，夜空中，总有一颗最亮的星辰，对不同的人而言有着独特的意义。对我而言，My Brilliant Start， 它意味着跨越生死界限的陪伴，给我无声的守护和永恒的支持。<br>当我找到我爱的他，我会跑到星空之下告诉你，我相信的美好依然存在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heartbeats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让谷歌搜索到自己在GitHub上的博客</title>
      <link href="/2019/11/27/Tools/2019-11-27-%E8%AE%A9%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1%E5%86%8DGitHub%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/27/Tools/2019-11-27-%E8%AE%A9%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1%E5%86%8DGitHub%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>许久不写博客了，假借CSDN的便捷和随性，其实是因为自己的懒伞，打算从今天起重新拾起自己的私人博客。<br>还是那句话，因为喜欢就好好去爱。不管是为一个人，还是对一件事，很多时候我们贪恋的，都是当初那份恰如其分的感觉，时间走过，当初的那份记忆和感觉，便很难再找回来了。世间有太多的可遇而不可求对吗？下一秒会发生什么，我们都无法预料。<br>期望自己能够早日拥有让自己真心喜欢的博文。</p><h2 id="Step0-why"><a href="#Step0-why" class="headerlink" title="Step0: why ?"></a>Step0: why ?</h2><p>网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，因为搜索引擎不会去检索你的Github仓库。遇到这个问题怎么办呢？本文教你用Hexo在Github Pages上搭建的博客如何能被Google搜索到。</p><h2 id="Step1-验证网站是否被Google收录"><a href="#Step1-验证网站是否被Google收录" class="headerlink" title="Step1: 验证网站是否被Google收录"></a>Step1: 验证网站是否被Google收录</h2><p>打开谷歌搜索，在搜索框中输入</p><p>site:<a href="https://Huiyu-Li.github.io/">https://Huiyu-Li.github.io/</a> ( 注意将Huiyu-Li替换为你自己的)</p><p>如果提示说：找不到和您查询的“site:<a href="https://maxwellyue.github.io”" target="_blank" rel="noopener">https://maxwellyue.github.io”</a> 相符的内容或信息，说明未被收录。</p><p>如果搜索结果的第一条就是你的博客站点，说明已被收录，不用再继续看下面的内容了。</p><h2 id="Step2-提交谷歌搜索"><a href="#Step2-提交谷歌搜索" class="headerlink" title="Step2:提交谷歌搜索"></a>Step2:提交谷歌搜索</h2><p>进入Google Web Master <a href="https://search.google.com/search-console?hl=zh-CN&utm_source=wmx&utm_medium=deprecation-pane&utm_content=home&resource_id=https://huiyu-li.github.io/" target="_blank" rel="noopener">Search Console</a>，登录之后提交你的博客网址：<br><img src="/medias/pic_md/Tools/SubmitGoogle1.png" alt="SubmitGoogle1"><br>这里需要验证网站所有权，网站给我们提示了一个推荐验证方法是通过在你的网站上添加一个它提供的HTML文件来验证，按照步骤依次操作即可。在设置中看到下图所示场景，即为验证成功。<br><img src="/medias/pic_md/Tools/SubmitGoogle2.png" alt="SubmitGoogle2"></p><h2 id="Step3-添加站点地图"><a href="#Step3-添加站点地图" class="headerlink" title="Step3:添加站点地图"></a>Step3:添加站点地图</h2><p>站点地图(Site Map)是用来注明网站结构的文件，我们希望搜索引擎的爬虫了解我们的网站结构，以便于高效爬取内容，快速建立索引。</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>首先为Hexo安装hexo-generator-sitemap和hexo-generator-baidu-sitemap插件，在Hexo博客目录下运行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save</code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开博客根目录下的_config.yml文件，添加如下字段:</p><pre class=" language-bash"><code class="language-bash">sitemap:    path: sitemap.xml</code></pre><p>然后重新生成博客文件，运行<br>hexo clean<br>hexo g<br>此时应该可以在public目录下看到sitemap.xml文件了。</p><h4 id="添加-测试站点地图"><a href="#添加-测试站点地图" class="headerlink" title="添加/测试站点地图"></a>添加/测试站点地图</h4><p>回到之前提交搜索资源的页面，在左边侧边栏找到“站点地图”,点击“添加/测试站点地图”，将<a href="https://xxxx.github.io/sitemap.xml" target="_blank" rel="noopener">https://xxxx.github.io/sitemap.xml</a> 提交并刷新，就可以看到博客的网站结构了。<br>如果没有什么问题的话，到这里就结束了，但是现在用Google还不能立即查到博客的内容，要等到搜索引擎下一次更新检索时才会有显示。</p><p>参考：<br><a href="https://blog.csdn.net/weixin_44058333/article/details/100165245" target="_blank" rel="noopener">让Google搜索到GitHub上的个人博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传统的图像分割方法</title>
      <link href="/2019/08/05/Knowledge/2019-2-10-%E4%BC%A0%E7%BB%9F%E7%9A%84%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/05/Knowledge/2019-2-10-%E4%BC%A0%E7%BB%9F%E7%9A%84%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>图像分割(image segmentation)是指将图像分成若干具有相似性质的区域的过程.传统的图像分割方法主要有:</p><h4 id="1-基于阈值的分割"><a href="#1-基于阈值的分割" class="headerlink" title="1. 基于阈值的分割"></a>1. 基于阈值的分割</h4><p>阈值法的基本思想是基于图像的灰度特征来计算一个或多个灰度阈值，并将图像中每个像素的灰度值与阈值相比较，最后将像素根据比较结果分到合适的类别中。因此，该类方法最为关键的一步就是按照某个准则函数来求解最佳灰度阈值。</p><p>阈值法特别适用于目标和背景占据不同灰度级范围的图。</p><p>图像若只有目标和背景两大类，那么只需要选取一个阈值进行分割，此方法成为单阈值分割；但是如果图像中有多个目标需要提取，单一阈值的分割就会出现作物，在这种情况下就需要选取多个阈值将每个目标分隔开，这种分割方法相应的成为多阈值分割。</p><p>阀值分割方法的优缺点：</p><p>计算简单，效率较高；</p><p>只考虑像素点灰度值本身的特征，一般不考虑空间特征，因此对噪声比较敏感，鲁棒性不高。</p><p>从前面的介绍里我们可以看出，阈值分割方法的最关键就在于阈值的选择。若将智能遗传算法应用在阀值筛选上，选取能最优分割图像的阀值，这可能是基于阀值分割的图像分割法的发展趋势。</p><h5 id="1-1-固定阈值分割"><a href="#1-1-固定阈值分割" class="headerlink" title="1.1 固定阈值分割"></a>1.1 固定阈值分割</h5><p>固定某像素值为分割点。</p><h5 id="1-2-直方图双峰法："><a href="#1-2-直方图双峰法：" class="headerlink" title="1.2 直方图双峰法："></a>1.2 直方图双峰法：</h5><p>Prewitt 等人于六十年代中期提出的直方图双峰法(也称 mode 法) 是典型的全局单阈值分割方法。</p><p>该方法的基本思想是：假设图像中有明显的目标和背景，则其灰度直方图呈双峰分布，当灰度级直方图具有双峰特性时，选取两峰之间的谷对应的灰度级作为阈值。如果背景的灰度值在整个图像中可以合理地看作为恒定，而且所有物体与背景都具有几乎相同的对比度，那么，选择一个正确的、固定的全局阈值会有较好的效果.</p><p>算法实现：找到第一个峰值和第二个峰值,再找到第一和第二个峰值之间的谷值，谷值就是那个阀值。</p><h5 id="1-3-迭代阈值图像分割"><a href="#1-3-迭代阈值图像分割" class="headerlink" title="1.3 迭代阈值图像分割:"></a>1.3 迭代阈值图像分割:</h5><p>Step 1．统计图像灰度直方图,求出图像的最大灰度值和最小灰度值，分别记为$Z_{max}$和$Z_{min}$，令初始阈值$T_0 =  (Z_{min}+Z_{max})/2$；</p><p>Step 2． 根据阈值$T_k$将图象分割为前景和背景，计算小于$T_k$所有灰度的均值$Z_{min}$，和大于$T_k$的所有灰度的均值$Z_{max}$。</p><p>Step 3． 求出新阈值$T_{k+1} = (Z_{min}+Z_{max})/2$；</p><p>Step 4． 若$T_k == T_{k+1}$，则所得即为阈值；否则转2，迭代计算。</p><h5 id="1-4-自适应阈值图像分割"><a href="#1-4-自适应阈值图像分割" class="headerlink" title="1.4 自适应阈值图像分割:"></a>1.4 自适应阈值图像分割:</h5><p>有时候物体和背景的对比度在图像中不是处处一样的，普通阈值分割难以起作用。这时候可以根据图像的局部特征分别采用不同的阈值进行分割。只要我们将图像分为几个区域，分别选择阈值，或动态地根据一定邻域范围选择每点处的阈值，从而进行图像分割。</p><h5 id="1-5-大津法OTSU-最大类间方差法-："><a href="#1-5-大津法OTSU-最大类间方差法-：" class="headerlink" title="1.5 大津法OTSU (最大类间方差法)："></a>1.5 大津法OTSU (最大类间方差法)：</h5><p>日本学者大津在1979年提出的自适应阈值确定方法。 按照图像的灰度特性，将图像分为背景和目标两部分。背景和目标之间的类间方差越大,说明构成图像的2部分的差别越大,当部分目标错分为背景或部分背景错分为目标都会导致2部分差别变小。因此,使类间方差最大的分割意味着错分概率最小。</p><h5 id="1-6-均值法"><a href="#1-6-均值法" class="headerlink" title="1.6 均值法:"></a>1.6 均值法:</h5><p>把图像分成m*n块子图，求取每一块子图的灰度均值, 将所有像素灰度值之和除以像素点的数量，这个均值就是阈值了。这种方法明显不比大津法好，因为均值法和大津法都是从图像整体来考虑阈值的，但是大津法找了一个类间方差最大值来求出最佳阈值的；这两种方法子图越多应该分割效果会好一点，但效率可能会变慢。</p><h5 id="1-7-最佳阈值"><a href="#1-7-最佳阈值" class="headerlink" title="1.7 最佳阈值:"></a>1.7 最佳阈值:</h5><p>阈值选择需要根据具体问题来确定，一般通过实验来确定。如对某类图片，可以分析其直方图等。</p><h4 id="2-基于边缘的分割方法"><a href="#2-基于边缘的分割方法" class="headerlink" title="2. 基于边缘的分割方法"></a>2. 基于边缘的分割方法</h4><p>图像中两个不同区域的边界线上连续的像素点的集合，是图像局部特征不连续性的反映，体现了灰度、颜色、纹理等图像特性的突变。通常情况下，基于边缘的分割方法指的是基于灰度值的边缘检测，它是建立在边缘灰度值会呈现出阶跃型或屋顶型变化这一观测基础上的方法。阶跃型边缘两边像素点的灰度值存在着明显的差异，而屋顶型边缘则位于灰度值上升或下降的转折处。如果将图片从空间域通过傅里叶变换到频率域，边缘就对应着高频部分，这是一种非常简单的边缘检测算法。最简单的边缘检测方法是微分算子法，即使用一阶导数的极值与二阶导数的零点来确定边缘，具体实现时可以使用<strong>图像与模板进行卷积</strong>来完成。</p><p>   边缘检测的优缺点：</p><ol><li>边缘定位准确；</li><li>速度快；</li><li>不能保证边缘的连续性和封闭性；</li><li>在高细节区域存在大量的碎边缘，难以形成一个大区域，但是又不宜将高细节区域分成小碎片；</li></ol><p>由于上述的3,4两个难点，边缘检测只能产生边缘点，而非完整意义上的图像分割过程。这也就是说，在边缘点信息获取到之后还需要后续的处理或者其他相关算法相结合才能完成分割任务。<br>在以后的研究当中，用于提取初始边缘点的自适应阈值选取、用于图像的层次分割的更大区域的选取以及如何确认重要边缘以去除假边缘将变得非常重要。</p><p>边缘角点和兴趣点的检测器有：</p><h5 id="2-1-Canny边缘检测器："><a href="#2-1-Canny边缘检测器：" class="headerlink" title="2.1 Canny边缘检测器："></a>2.1 Canny边缘检测器：</h5><p>将图像P模糊化，然后与一堆正交微分滤波器（如Prewitt滤波器）做<strong>卷积</strong>生成分别包括水平和垂直方向上的导数的图像H和V，对像素(i,j)计算其梯度方向和幅度。若幅度超过临界值就分配一条边缘（此处称为阈值法，但效果不佳）。canny使用非极大抑制的方法对那些不需要响应的进行删除。</p><h5 id="2-2-Harris角点检测器："><a href="#2-2-Harris角点检测器：" class="headerlink" title="2.2 Harris角点检测器："></a>2.2 Harris角点检测器：</h5><p>对每个点周围的水平方向垂直方向的据ubu梯度进行考虑。目的在于找到图像中亮度在两个方向上均发生变化的点，而非一个方向（一条边缘）或者零个方向（平坦区域）。Harris角点检测器是基于对图像结构张量的决策。</p><h5 id="2-3-SIFT检测器"><a href="#2-3-SIFT检测器" class="headerlink" title="2.3 SIFT检测器:"></a>2.3 SIFT检测器:</h5><p>尺度不变特征转换，检测是用来识别兴趣点的第二中方法。不同与Harris角点检测器，SIFT将尺度和方向与结果中的兴趣点相关联。为了找到兴趣点，交替使用多种算子。</p><h5 id="2-4-SURF检测器"><a href="#2-4-SURF检测器" class="headerlink" title="2.4 SURF检测器"></a>2.4 SURF检测器</h5><p>SIFT的改进版。</p><h5 id="基于小波分析和小波变换的图像分割方法"><a href="#基于小波分析和小波变换的图像分割方法" class="headerlink" title="基于小波分析和小波变换的图像分割方法"></a>基于小波分析和小波变换的图像分割方法</h5><p>小波变换是近年来得到的广泛应用的数学工具，也是现在数字图像处理必学部分，它在时间域和频率域上都有量高的局部化性质，能将时域和频域统一于一体来研究信号。而且小波变换具有多尺度特性，能够在不同尺度上对信号进行分析，因此在图像分割方面的得到了应用。</p><p>二进小波变换具有检测二元函数的局部突变能力，因此可作为图像边缘检测工具。图像的边缘出现在图像局部灰度不连续处，对应于二进小波变换的模极大值点。通过检测小波变换模极大值点可以确定图像的边缘小波变换位于各个尺度上，而每个尺度上的小波变换都能提供一定的边缘信息，因此可进行多尺度边缘检测来得到比较理想的图像边缘。</p><p>另外，将小波和其他方法结合起来处理图像分割的问题也得到了广泛研究，比如一种局部自适应阈值法就是将Hilbert图像扫描和小波相结合，从而获得了连续光滑的阈值曲线。</p><h4 id="3-基于区域的分割方法"><a href="#3-基于区域的分割方法" class="headerlink" title="3. 基于区域的分割方法"></a>3. 基于区域的分割方法</h4><p>基于区域的分割方法是以直接寻找区域为基础的分割技术，基于区域提取方法有两种基本形式：一种是区域生长，从单个像素出发，逐步合并以形成所需要的分割区域；另一种是从全局出发，逐步切割至所需的分割区域。</p><h5 id="3-1-种子区域生长法"><a href="#3-1-种子区域生长法" class="headerlink" title="3.1 种子区域生长法"></a>3.1 种子区域生长法</h5><p>区域生长是从一组代表不同生长区域的种子像素开始，接下来将种子像素邻域里符合条件的像素合并到种子像素所代表的生长区域中，并将新添加的像素作为新的种子像素继续合并过程，直到找不到符合条件的新像素为止，该方法的关键是选择合适的初始种子像素以及合理的生长准则。最早的区域生长图像分割方法是由Levine等人提出。</p><p>区域生长算法需要解决的三个问题：</p><ol><li>选择或确定一组能正确代表所需区域的种子像素；</li><li>确定在生长过程中能将相邻像素包括进来的准则；</li><li>指定让生长过程停止的条件或规则。</li></ol><h5 id="3-2-区域分裂合并法"><a href="#3-2-区域分裂合并法" class="headerlink" title="3.2 区域分裂合并法"></a>3.2 区域分裂合并法</h5><p>区域分裂合并法（Gonzalez，2002）可以说是区域生长的逆过程，从整幅图像出发，确定分裂合并的准则，然后将图像任意分成若干互不相交的区域，按准则对这些区域进行分裂合并。</p><p>四叉树分解法就是一种典型的区域分裂合并法，基本算法如下：</p><ol><li>对于任一区域，如果$H(R_i)=FALSE$就将其分裂成不重叠的四等分；</li><li>对相邻的两个区域$R_i$和$R_j$，它们也可以大小不同（即不在同一层），如果条件$H(R_iUR_j)=TURE$满足，就将它们合并起来；</li><li>如果进一步的分裂或合并都不可能，则结束。</li></ol><p>区域分裂合并算法优缺点：</p><ol><li>对复杂图像分割效果好；</li><li>算法复杂，计算量大；</li><li>分裂有可能破怪区域的边界。</li></ol><p>在实际应用当中通常将区域生长算法和区域分裂合并算法结合使用，该类算法对某些复杂物体定义的复杂场景的分割或者对某些自然景物的分割等类似先验知识不足的图像分割效果较为理想。</p><h5 id="3-3-分水岭法"><a href="#3-3-分水岭法" class="headerlink" title="3.3 分水岭法"></a>3.3 分水岭法</h5><p>分水岭分割方法，是一种基于拓扑理论的数学形态学的分割方法，其基本思想是把图像看作是测地学上的拓扑地貌，图像中每一点像素的灰度值表示该点的海拔高度，每一个局部极小值及其影响区域称为集水盆，而集水盆的边界则形成分水岭。分水岭的概念和形成可以通过模拟浸入过程来说明。在每一个局部极小值表面，刺穿一个小孔，然后把整个模型慢慢浸入水中，随着浸入的加深，每一个局部极小值的影响域慢慢向外扩展，在两个集水盆汇合处构筑大坝，即形成分水岭。</p><p>分水岭对微弱边缘具有良好的响应，图像中的噪声、物体表面细微的灰度变化都有可能产生过度分割的现象，但是这也同时能够保证得到封闭连续边缘。同时，分水岭算法得到的封闭的集水盆也为分析图像的区域特征提供了可能。</p><h4 id="4-基于图论的分割方法"><a href="#4-基于图论的分割方法" class="headerlink" title="4. 基于图论的分割方法"></a>4. 基于图论的分割方法</h4><p>此类方法基于图论的方法利用图论领域的理论和方法，将图像映射为带权无向图，把像素视作节点，将图像分割问题看作是图的顶点划分问题，利用最小剪切准则得到图像的最佳分割。此类方法把图像分割问题与图的最小割(MIN-CUT)问题相关联，通常做法是将待分割的图像映射为带权无向图G=(V，E)，其中, $V={ v_{1} ，…， v_{n} }$是顶点的集合，E为边的集合。图中每个节点N∈V对应于图像中的每个像素，每条边∈E连接着一对相邻的像素，边的权值$w( v_{i}，v_{j} )$，其中$ (v_{i}，v_{j})∈E$，表示了相邻像素之间在灰度、颜色或纹理方面的非负相似度。而对图像的一个分割S就是对图的一个剪切，被分割的每个区域C∈S对应着图中的一个子图。</p><p>分割的原则就是使划分后的子图在内部保持相似度最大，而子图之间的相似度保持最小。我们以一个两类的分割为例，把G = (V,E) 分成两个子集A,B,另：$ A\cup B=V$，$A\cap B=\phi$ ，$CUT(A,B) = \Sigma_{\mu\in A，v\in B}w(\mu,v) $, 其中 $w(\mu,v) $, 是权重(weight), 最小割就是让上式的值最小的分割。</p><p>基于图论的代表有NormalizedCut，GraphCut和GrabCut等方法.</p><h5 id="4-1-NormalizedCut"><a href="#4-1-NormalizedCut" class="headerlink" title="4.1 NormalizedCut"></a>4.1 NormalizedCut</h5><p>最小化分割解决了把权重图G分成两部分的任务，但是问题来了，如下图所示，想要的结果是中间实线表示的分割，但是最小化切割却切掉了最边缘的角。这中情况很容易理解，因为最小化切割就是让CUT(A,B)的值最小的情况，而边缘处CUT值确实是最小，因此我们输最小化切割时会有偏差的(bias)。如何去除这种偏差就要引入Normalized Cut算法了。</p><p><img src="/medias/pic_md/Knowledge/ConventioanlSegmentation1.png" alt="Conventioanl Segmentation1"><br>思路很简单，将Cut normalize一下，除以表现顶点集大小的某种量度(如 vol A = 所有A中顶点集的度之和，含义是A中所有点到图中所有点的权重的和)， 也就是$NormalizeCut(A, B) = Cut(A, B) / volA + Cut(A, B) / volB$，通过公式可以很清晰的看到NormalizeCut在追求不同子集间点的权重最小值的同时也追求同一子集间点的权重和最大值。</p><h5 id="4-2-GraphCut-图割"><a href="#4-2-GraphCut-图割" class="headerlink" title="4.2 GraphCut (图割)"></a>4.2 GraphCut (图割)</h5><p>Graph Cuts图是在普通图的基础上多了2个顶点，这2个顶点分别用符号”S”和”T”表示，称为终端顶点。其它所有的顶点都必须和这2个顶点相连形成边集合中的一部分，所以Graph Cuts中有两种顶点，也有两种边，第一种普通顶点对应于图像中的每个像素。每两个邻域顶点的连接就是一条边。这种边也叫n-links。除图像像素外，还有另外两个终端顶点，叫S源点和T汇点。每个普通顶点和这2个终端顶点之间都有连接，组成第二种边,这种边也叫t-links，如下图所示。</p><p><img src="/medias/pic_md/Knowledge/ConventioanlSegmentation2.png" alt="ConventioanlSegmentation2"><br>Graph Cuts中的Cuts是指这样一个边的集合，这些边集合包括了上面定义的2种边，该集合中所有边的断开会导致残留“S”和“T”图的分开，所以就称为“割”。如果一个割，它的边的所有权值之和最小，那么这个就称为最小割，也就是图割的结果。根据网络中最大流和最小割等价的原理，将图像的最优分割问题转化为求解对应图的最小割问题。由Boykov和Kolmogorov发明的max-flow/min-cut算法[1，4]就可以用来获得S-T图的最小割，这个最小割把图的顶点划分为两个不相交的子集S和T，其中s ∈S，t∈ T和S∪T=V 。这两个子集就对应于图像的前景像素集和背景像素集，那就相当于完成了图像分割。</p><h5 id="4-3-GrabCut-分割和抠图"><a href="#4-3-GrabCut-分割和抠图" class="headerlink" title="4.3 GrabCut 分割和抠图"></a>4.3 GrabCut 分割和抠图</h5><p>Graph Cuts 算法利用了图像的像素灰度信息和区域边界信息，代价函数构建在全局最优的框架下，保证了分割效果。但Graph Cuts 是NP 难问题，且分割结果更倾向于具有相同的类内相似度。Rother 等人提出了基于迭代的图割方法，称为Grab Cut 算法。该算法使用高斯混合模型对目标和背景建模，利用了图像的RGB 色彩信息和边界信息，通过少量的用户交互操作得到非常好的分割效果。</p><p>Graph Cuts是Graphcut的改进版，是迭代的GraphCut。改进包括：</p><ol><li>将基于灰度分布的模型替换为高斯混合模型（Gaussian Mixture Model，GMM）以支持彩色图片;</li><li>将能一次性得到结果的算法改成了『强大的』迭代流程；将用户的交互简化到只需要框选前景物体即可。</li></ol><p>与Graph Cut不同处：</p><ol><li>Graph Cut的目标和背景的模型是灰度直方图，Grab Cut取代为RGB三通道的混合高斯模型GMM;</li><li>Graph Cut的能量最小化（分割）是一次达到的，而Grab Cut取代为一个不断进行分割估计和模型参数学习的交互迭代过程;</li><li>Graph Cut需要用户指定目标和背景的一些种子点，但是Grab Cut只需要提供背景区域的像素集就可以了。也就是说你只需要框选目标，那么在方框外的像素全部当成背景，这时候就可以对GMM进行建模和完成良好的分割了。即Grab Cut允许不完全的标注（incomplete labelling）。彩色像素值的稀疏问题比灰度图要严重得多（256 vs 17M），所以，继续使用histogram是不现实的，需要信息压缩得更好一点的模型，作者在这里参考前人，对前景和背景各建了K=5的高斯混合模型。</li><li>GrabCut是按颜色分布和边缘对比度来分割图片的，对一些常见的与此原则相悖的图片，效果确实不好。比如前景人物的帽子、鞋、墨镜，通常颜色跟前景主体有较大区别；再如前景中的孔，有可能由于颜色区分和边缘的对比度不足，导致边缘的惩罚占上风，而没有扣出来背景。所以，GrabCut还是保留了人工修正的操作，定义了两种标记：绝对是背景和可能是前景。对分割错误人工修正后，分割还是可以比较准确的。对自然场景图片的分割，比Bayes matte等方法得到的边缘明显看起来舒服得多。</li></ol><h4 id="5-基于能量泛函的分割方法"><a href="#5-基于能量泛函的分割方法" class="headerlink" title="5. 基于能量泛函的分割方法"></a>5. 基于能量泛函的分割方法</h4><p>该类方法主要指的是活动轮廓模型（active contour model）以及在其基础上发展出来的算法，其基本思想是使用连续曲线来表达目标边缘，并定义一个能量泛函使得其自变量包括边缘曲线，因此分割过程就转变为求解能量泛函的最小值的过程，一般可通过求解函数对应的欧拉(Euler．Lagrange)方程来实现，能量达到最小时的曲线位置就是目标的轮廓所在。</p><p>活动轮廓模型逐渐形成了不同的分类方式，较常见的是根据曲线演化方式的不同，将活动轮廓模型分为基于边界、基于区域和混合型活动轮廓模型。</p><p>按照模型中曲线表达形式的不同，活动轮廓模型可以分为两大类：参数活动轮廓模型（parametric active contour model）和几何活动轮廓模型（geometric active contour model）。</p><h5 id="5-1-参数主动轮廓模型（parametric-active-contour-model）"><a href="#5-1-参数主动轮廓模型（parametric-active-contour-model）" class="headerlink" title="5.1 参数主动轮廓模型（parametric active contour model）:"></a>5.1 参数主动轮廓模型（parametric active contour model）:</h5><p>参数活动轮廓模型基于Lagrange框架，将曲线或曲面的形变以参数化形式表达，最具代表性的是由Kasset a1(1987)所提出的Snake模型。该类模型在早期的生物图像分割领域得到了成功的应用，但其存在着分割结果受初始轮廓的设置影响较大以及难以处理曲线拓扑结构变化等缺点，此外其能量泛函只依赖于曲线参数的选择，与物体的几何形状无关，这也限制了其进一步的应用。</p><p>Snake模型: Michael Kass et al. Snakes: Active contour models. International Journal of Computer Vision, pages 321-331, 1987.</p><p>Snake定义为能量极小化的样条曲线，它在来自曲线自身的内力和来自图像数据的外力的共同作用下移动到感兴趣的边缘，内力用于约束曲线形状，而外力则引导曲线到特征此边缘。参数主动轮廓模型的特点是将初始曲线置于目标区域附近，无需人为设定曲线的的演化是收缩或膨胀，其优点是能够与模型直接进行交互，且模型表达紧凑，实现速度快；其缺点是难以处理模型拓扑结构的变化。比如曲线的合并或分裂等。而使用水平集（level set）的几何活动轮廓方法恰好解决了这一问题。</p><p>基本Snakes模型的能量函数由三项组成，弹性能量和弯曲能量合称内部能量（内部力），用于控制轮廓线的弹性形变，起到保持轮廓连续性和平滑性的作用。而第三项代表外部能量，也被称为图像能量，表示变形曲线与图像局部特征吻合的情况。内部能量仅仅跟snake的形状有关，而跟图像数据无关。而外部能量仅仅跟图像数据有关。在某一点的α和β的值决定曲线可以在这一点伸展和弯曲的程度。最终对图像的分割转化为求解能量函数Etotal(v)极小化（最小化轮廓的能量）。在能量函数极小化过程中，弹性能量迅速把轮廓线压缩成一个光滑的圆，弯曲能量驱使轮廓线成为光滑曲线或直线，而图像力则使轮廓线向图像的高梯度位置靠拢。基本Snakes模型就是在这3个力的联合作用下工作的。</p><p>snake相对于经典的特征提取方法有以下优点：</p><ol><li>通过正确设置和项前系数，可交互方式控制snake;</li><li>容易操控，因为图像力是以直观的方式表现;</li><li>在寻找最小能量状态的时候它们是自主的和自适应的;</li><li>可以通过在图像能量函数中加入高斯平滑而对图像尺度敏感;</li><li>可以用于跟踪时间或者空间维度上的动态目标。</li></ol><p>snake的缺点：</p><ol><li>初始位置不同使得结果不同;</li><li>经常陷入局部最小状态，这也许可以通过使用模拟退火技术来克服，代价就是计算时间增加;</li><li>在最小化整个轮廓路径上的能量过程中经常忽略微小特征;</li><li>精度由能量最小化技术中使用的收敛标准控制；更高的精度要求更严格的收敛标准，因此需要更长的计算时间。</li></ol><h5 id="5-2-ASM-Active-Shape-Model-主动形状模型"><a href="#5-2-ASM-Active-Shape-Model-主动形状模型" class="headerlink" title="5.2 ASM(Active Shape Model)主动形状模型"></a>5.2 ASM(Active Shape Model)主动形状模型</h5><p>Cootes T F, Taylor C J. Active Shape Models — ‘Smart Snakes’[M]// BMVC92. Springer London, 1992:266–275.</p><p>ASM（主动形状模型）是建立在PDM（点分布模型）的基础上，通过训练图像样本获取训练图像样本的特征点分布的统计信息，并且获取特征点允许存在的变化方向，实现在目标图像上寻找对应的特征点的位置。训练样本需要手动的标记所有的特征点的位置，记录特征点的坐标，并且计算每一个特征点对应的局部灰度模型作为局部特征点调整用的特征向量。在将训练好的模型放在目标图像上，寻找每一个特征点的下一个位置的时候，采用局部灰度模型寻找在当前特征点指定方向上局部灰度模型马氏距离最小的特征点作为当前特征点即将移动到的位置，称为suggested point, 找到所有的suggested points就可以获得一个搜索的suggested shape, 然后将当前的模型通过调整参数使得当前的模型最可能相似的调整到suggest shape，重复迭代直到实现收敛。</p><h5 id="5-3-AAM-Active-Appearance-Models"><a href="#5-3-AAM-Active-Appearance-Models" class="headerlink" title="5.3 AAM(Active Appearance Models)"></a>5.3 AAM(Active Appearance Models)</h5><p>Cootes T F, Edwards G J, Taylor C J. Active Appearance Models[C]// European Conference on Computer Vision. Springer Berlin Heidelberg, 1998:484-498.</p><p>ASM是基于统计形状模型的基础上进行的，而AAM则是在ASM的基础上，进一步对纹理（将人脸图像变形到平均形状而得到的形状无关图像）进行统计建模，并将形状和纹理两个统计模型进一步融合为表观模型。</p><p>AAM模型相对于ASM模型的改进为：</p><ol><li>使用两个统计模型融合 取代 ASM的灰度模型。</li><li>主要对特征点的特征描述子进行了改进，增加了描述子的复杂度和鲁棒性</li></ol><h5 id="5-4-CLM-Constrained-local-model-有约束的局部模型"><a href="#5-4-CLM-Constrained-local-model-有约束的局部模型" class="headerlink" title="5.4 CLM(Constrained local model)有约束的局部模型"></a>5.4 CLM(Constrained local model)有约束的局部模型</h5><p>CLM是有约束的局部模型，ASM也属于CLM的一种。CLM通过初始化平均脸的位置，然后让每个平均脸上的特征点在其邻域位置上进行搜索匹配来完成人脸点检测。整个过程分两个阶段：模型构建阶段和点拟合阶段。模型构建阶段又可以细分两个不同模型的构建：</p><p>形状模型构建: 对人脸模型形状进行建模，说白了就是一个ASM的点分布函数（PDM），它描述了形状变化遵循的准则.</p><p>Patch模型构建: 对每个特征点周围邻域进行建模，也就说建立一个特征点匹配准则，怎么判断特征点是最佳匹配.</p><h5 id="5-5-GAC-geometric-active-contour-model-几何主动轮廓模型"><a href="#5-5-GAC-geometric-active-contour-model-几何主动轮廓模型" class="headerlink" title="5.5 GAC(geometric active contour model)几何主动轮廓模型:"></a>5.5 GAC(geometric active contour model)几何主动轮廓模型:</h5><p>S.Osher,J.A.Sethian,Fronts propagating with curvature dependent speed:algorithms basedon Hamilton-Jacobi formulations.Journal of Computational Physics,1988,79:12—49</p><p>几何活动轮廓模型的曲线运动过程是基于曲线的几何度量参数而非曲线的表达参数，因此可以较好地处理拓扑结构的变化，并可以解决参数活动轮廓模型难以解决的问题。而水平集（Level Set）方法（Osher，1988）的引入，则极大地推动了几何活动轮廓模型的发展，因此几何活动轮廓模型一般也可被称为水平集方法。</p><p>几何活动轮廓模型是以曲线演化理论和水平集方法为理论基础,继参数活动轮廓模型后形变模型的又一发展,是图像分割和边界提取的重要工具之一。相对于参数活动轮廓模型,几何活动轮廓模型具有很多优点,如可以处理曲线的拓扑变化、对初始位置不敏感、具有稳定的数值解等.</p><p>几何活动轮廓模型又可分为基于边界的活动轮廓模型、基于区域的活动轮廓模型。基于边界的活动轮廓模型主要依赖图像的边缘信息控制曲线的运动速度。在图像边缘强度较弱或是远离边缘的地方，轮廓曲线运动速度较大，而在图像边缘强度较强的地方，轮廓曲线运动速度较小甚至停止，使得最终的轮廓曲线运动到边缘位置.</p><h4 id="6-基于遗传算法的图像分割"><a href="#6-基于遗传算法的图像分割" class="headerlink" title="6. 基于遗传算法的图像分割"></a>6. 基于遗传算法的图像分割</h4><p>遗传算法（Genetic Algorithms，简称GA）是1973年由美国教授Holland提出的，是一种借鉴生物界自然选择和自然遗传机制的随机化搜索算法。是仿生学在数学领域的应用。其基本思想是，模拟由一些基因串控制的生物群体的进化过程，把该过程的原理应用到搜索算法中，以提高寻优的速度和质量。此算法的搜索过程不直接作用在变量上，而是在参数集进行了编码的个体，这使得遗传算法可直接对结构对象（图像）进行操作。整个搜索过程是从一组解迭代到另一组解，采用同时处理群体中多个个体的方法，降低了陷入局部最优解的可能性，并易于并行化。搜索过程采用概率的变迁规则来指导搜索方向，而不采用确定性搜索规则，而且对搜索空间没有任何特殊要求（如连通性、凸性等），只利用适应性信息，不需要导数等其他辅助信息，适应范围广。</p><p>遗传算法擅长于全局搜索，但局部搜索能力不足，所以常把遗传算法和其他算法结合起来应用。将遗传算法运用到图像处理主要是考虑到遗传算法具有与问题领域无关且快速随机的搜索能力。其搜索从群体出发，具有潜在的并行性，可以进行多个个体的同时比较，能有效的加快图像处理的速度。但是遗传算法也有其缺点：搜索所使用的评价函数的设计、初始种群的选择有一定的依赖性等。要是能够结合一些启发算法进行改进且遗传算法的并行机制的潜力得到充分的利用，这是当前遗传算法在图像处理中的一个研究热点。</p><h4 id="7-基于聚类的图像分割"><a href="#7-基于聚类的图像分割" class="headerlink" title="7. 基于聚类的图像分割"></a>7. 基于聚类的图像分割</h4><p>基于聚类的图像分割将图像分割问题转化为模式识别的聚类分析。  K均值、模糊C-均值算法(Fuzzy C-Means,简称FCM)是最常用的聚类算法。</p><p>K均值算法先选K个初始类均值，然后将每个像素归入均值离它最近的类并计算新的类均值。迭代执行前面的步骤直到新旧类均值之差小于某一阈值。</p><p>模糊C均值算法是在模糊数学基础上对K均值算法的推广，是通过最优化一个模糊目标函数实现聚类，它不像K均值聚类那样认为每个点只能属于某一类，而是赋予每个点一个对各类的隶属度，用隶属度更好地描述边缘像素亦此亦彼的特点，适合处理事物内在的不确定性。利用模糊C均值(FCM)非监督模糊聚类标定的特点进行图像分割，可以减少人为的干预，且较适合图像中存在不确定性和模糊性的特点。</p><p>聚类方法应注意几个问题：</p><ol><li>聚类的类数如何确定。</li><li>怎样确定聚类的有效性准则。</li><li>聚类中心的位置和特性事先不清楚时，如何设置初始值。</li><li>运算的开销。</li></ol><p>并且FCM算法对初始参数极为敏感，有时需要人工干预参数的初始化以接近全局最优解，提高分割速度。另外，传统FCM算法没有考虑空间信息，对噪声和灰度不均匀敏感。</p><p>参考:<br><a href="https://zhuanlan.zhihu.com/p/30732385" target="_blank" rel="noopener">图像分割 传统方法 整理</a><br><a href="https://www.jishuwen.com/d/2Ddq" target="_blank" rel="noopener">最全综述 | 图像分割算法</a><br><a href="https://juejin.im/entry/5bea5e7ef265da61553a5e28" target="_blank" rel="noopener">图像分割技术介绍</a><br>《计算机视觉：模型、学习和推理》</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Segmentation </tag>
            
            <tag> Conventional method </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRF as RNN</title>
      <link href="/2019/07/15/Knowledge/2020-2-10-CRF%20as%20RNN/"/>
      <url>/2019/07/15/Knowledge/2020-2-10-CRF%20as%20RNN/</url>
      
        <content type="html"><![CDATA[<p><strong>条件随机场(CRF )的概率函数</strong>为$P(X = x|I) = \frac{1}{z}\exp ( - E(x|I))$</p><p><strong>CRF 的能量函数为</strong>$E(x) = \sum\limits_i{\psi_u}({x_i})+\sum\limits_{i&lt;j}{\psi_p}({x_i},{x_j})$<br>其中第一项为数据项，第二项为平滑项，其定义为若干个高斯函数的和，如下公式所示。数据项约束每个像素尽可能分类正确，平滑项约束相邻像素之间的灰度值差异要尽可能小。<br>$$<br>{\psi_p}({x_i},{x_j}) = u({x_i},{x_j})\sum\limits_{m=1}^M{\omega ^{(m)}}{k^{(m)}}({f_i},{f_j}))<br>$$<br><img src="/medias/pic_md/Knowledge/CRFasRNN3.png" alt><br><img src="/medias/pic_md/Knowledge/CRFasRNN2.jpg" alt=" A mean-field iteration as a CNN"><br>参考：<br><a href="https://blog.csdn.net/taigw/article/details/51794283" target="_blank" rel="noopener">CRF as RNN的原理及Caffe实现</a><br><a href="https://www.cv-foundation.org/openaccess/content_iccv_2015/html/Zheng_Conditional_Random_Fields_ICCV_2015_paper.html" target="_blank" rel="noopener">2015_Conditional Random Fields as Recurrent Neural Networks_ICCV</a></p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRF </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水平集-Level Set</title>
      <link href="/2019/07/10/Knowledge/2019-7-10-%E6%B0%B4%E5%B9%B3%E9%9B%86Level%20Set/"/>
      <url>/2019/07/10/Knowledge/2019-7-10-%E6%B0%B4%E5%B9%B3%E9%9B%86Level%20Set/</url>
      
        <content type="html"><![CDATA[<h2 id="水平集（Level-Set）"><a href="#水平集（Level-Set）" class="headerlink" title="水平集（Level Set）"></a>水平集（Level Set）</h2><h4 id="曲线演化的直观解释"><a href="#曲线演化的直观解释" class="headerlink" title="曲线演化的直观解释"></a>曲线演化的直观解释</h4><p>   假设$X(t)$表示一平面曲线，$T$表示切线，$N$表示法线。因为切向量$T$和法向量$N$互相垂直，所以平面上任何曲线都可以用曲线上任何一点的$T$和$N$的线性组合来表示：<br>$$\frac{\partial X}{\partial t} = \alpha T + \beta N$$<br>   如果只考虑几何形状的变化，则曲线变化只跟法线方向的变化有关系:<br>$$\frac{\partial X}{\partial t} = \beta N$$<br>   假设我们有一个3D surface和一个2D plane，如下所示，<br><img src="/medias/pic_md/Knowledge/LevelSet1.png" alt="Level Set1"><br>   我们通过surface与plane的关系来描述curve（surface与plane的交线），通过调整surface来实现curve的变化，这就是level set的基本思想。<br><img src="/medias/pic_md/Knowledge/LevelSet2.png" alt="Level Set2"></p><h4 id="Level-set-的数学定义及运动表示"><a href="#Level-set-的数学定义及运动表示" class="headerlink" title="Level set 的数学定义及运动表示"></a>Level set 的数学定义及运动表示</h4><p>   假设隐函数$φ(X(t),t)$表示一个高维空间的surface，程其在低维空间上的接触面为$φ(X(t),t)=0$<br>   我们按如下方式跟踪surface和curve的演化过程。<br>$$\frac{\partial X}{\partial t} = V(k)N$$<br>其中,$V(k)$称为<strong>速度方程</strong>，$k$表示曲率，$t$表示时间，$N =  - \frac{\nabla \phi }{\left| {\nabla \phi } \right|}$表示surface的内法线。<br>然后对surface对t进行级联求导，<br>$$\phi (X(t),t) = 0$$<br>$$\Rightarrow \nabla \phi {X_t} + {\phi _t} = 0$$<br>$$\Rightarrow {\phi _t} = V(k)\left| {\nabla \phi } \right|$$<br>   由此可知，给定初始的surface$ φ(X(t),t)$以及速度方程$V(k)$，便可以得到任意时刻的surface $φ$。</p><h4 id="Level-Set的数值解法"><a href="#Level-Set的数值解法" class="headerlink" title="Level Set的数值解法"></a>Level Set的数值解法</h4><p>   熟知机器学习同学可能会发现，surface φ的演化过程酷似神经网络中的参数利用梯度下降更新过程。<br>$$\frac{\partial \phi }{\partial t} = \frac{\phi ^{t + \Delta t} - {\phi ^t}}{\Delta t}$$<br>$$\Rightarrow {\phi ^{t + \Delta t}} = {\phi ^t} + {\phi _t}\Delta t = {\phi ^t} + V(k)\left| {\nabla \phi } \right|\Delta t$$</p><p>参考：<br>[1] <a href="https://wiseodd.github.io/techblog/2016/11/05/levelset-method/" target="_blank" rel="noopener">“Level Set Method Part I: Introduction”</a></p>]]></content>
      
      
      <categories>
          
          <category> Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Level Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业季有感</title>
      <link href="/2019/06/26/Diary/2019-06-26-%E6%AF%95%E4%B8%9A%E5%AD%A3%E6%9C%89%E6%84%9F/"/>
      <url>/2019/06/26/Diary/2019-06-26-%E6%AF%95%E4%B8%9A%E5%AD%A3%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>第一次遇到BIT的毕业季，颇为壮观，因此感觉异常新鲜和惊奇，毕业竟然可以和入学有着相似的热闹，就像洗礼和葬礼有着相似的仪式感，虽然昭示着截然不同的起点和终点；还有生命中段的婚礼，人生遇到新鲜事，总是可喜可贺的事情。</p><blockquote><p>成长，总在不停地和过去告别，同时去迎接新鲜的未来。</p></blockquote><p> 若想对过去少些遗憾和抱歉，对未来多些确定和希冀。最重要的是确保每时每刻都有一个充实当下。</p><blockquote><p>你认真走过的一点一滴，会让你和不得不离开的昨天有一个体面的告别，和随即到来的明天有个无所畏惧的拥抱。<br>无论何时，无论何地，不遗余力，用心努力。</p></blockquote><p> 要知道，已经走过的，无法回头，对错与否，如果不能化作前进的动力，一切毫无意义。<br> 当下和未来的每一段时光，也会在转瞬即逝中成为过去，所以，在没有机会后悔的世界里，聪明的你要学会和过去和解，选择最聪明的做法：走好当下。</p><ul><li>我希望，在见证别人走进又离开的过程中，你可以懂得珍惜当下的意义。</li><li>我希望，明年或者后年，你可以用自己的努力，去换来一个值得拥抱的未来，让过去的一段时光收获应有的结局。</li><li>我知道，不管未来面对怎样的Next Step，你仍会紧张，仍会忐忑不安，但是没关系的，一个值得拥抱的未来会给你微笑告别过去的勇气，会给你一个崭新的未来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heartbeats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dust Page</title>
      <link href="/2019/01/09/Diary/2020-1-9-%E5%B0%98%E5%B0%81%E5%BE%80%E4%BA%8B/"/>
      <url>/2019/01/09/Diary/2020-1-9-%E5%B0%98%E5%B0%81%E5%BE%80%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="The birthday of Cerry." />    <label for="pass">The birthday of Cerry.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Miss Scarecrow </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
